// DO NOT EDIT.
// swift-format-ignore-file
// swiftlint:disable all
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: ei.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

enum Ei_Platform: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case unknownPlatform = 0
  case ios = 1
  case droid = 2

  init() {
    self = .unknownPlatform
  }

}

enum Ei_DeviceFormFactor: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case unknownDevice = 0
  case phone = 1
  case tablet = 2

  init() {
    self = .unknownDevice
  }

}

enum Ei_AdNetwork: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case vungle = 0
  case chartboost = 1
  case adColony = 2
  case hyperMx = 3
  case unity = 4
  case facebook = 5
  case applovin = 6

  init() {
    self = .vungle
  }

}

enum Ei_Egg: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case edible = 1
  case superfood = 2
  case medical = 3
  case rocketFuel = 4
  case superMaterial = 5
  case fusion = 6
  case quantum = 7
  case immortality = 8
  case tachyon = 9
  case graviton = 10
  case dilithium = 11
  case prodigy = 12
  case terraform = 13
  case antimatter = 14
  case darkMatter = 15
  case ai = 16
  case nebula = 17
  case universe = 18
  case enlightenment = 19
  case curiosity = 50
  case integrity = 51
  case humility = 52
  case resilience = 53
  case kindness = 54
  case chocolate = 100
  case easter = 101
  case waterballoon = 102
  case firework = 103
  case pumpkin = 104
  case customEgg = 200
  case unknown = 1000

  init() {
    self = .edible
  }

}

enum Ei_FarmType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case empty = 1
  case home = 2
  case contract = 3

  init() {
    self = .empty
  }

}

enum Ei_GoalType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case eggsLaid = 1
  case unknownGoal = 100

  init() {
    self = .eggsLaid
  }

}

enum Ei_RewardType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case cash = 1
  case gold = 2
  case soulEggs = 3
  case eggsOfProphecy = 4
  case epicResearchItem = 5
  case piggyFill = 6
  case piggyMultiplier = 7
  case piggyLevelBump = 8
  case boost = 9
  case boostToken = 10
  case artifact = 11
  case artifactCase = 12
  case chicken = 13
  case shellScript = 14
  case virtueGem = 15
  case unknownReward = 100

  init() {
    self = .cash
  }

}

enum Ei_UILocation: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case none = 0
  case shop = 1
  case boostShop = 2
  case piggy = 3
  case proPermit = 4
  case ultraShop = 10
  case shells = 5
  case shellSets = 6
  case shellsShowcase = 12
  case chickens = 7
  case chickenHats = 11
  case epicResearch = 8
  case settings = 9
  case help = 13
  case university = 14

  init() {
    self = .none
  }

}

enum Ei_UserType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case allUsers = 0
  case eggedUp = 15
  case contractsUnlocked = 1
  case artifactsUnlocked = 3
  case fuelTankUnlocked = 4
  case proPermitActive = 5
  case ultraActive = 6
  case noProPermit = 7
  case noUltra = 8
  case contractsInactive = 9
  case contractsActive = 10
  case playingContract = 11
  case artifactsInactive = 12
  case artifactsActive = 13
  case prestigeReady = 14
  case piggyHesitant = 16

  init() {
    self = .allUsers
  }

}

enum Ei_LeaderboardScope: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
  case allTime = 0
  case currentSeason = 1

  init() {
    self = .allTime
  }

}

struct Ei_Vector3: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Float {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {self._x = nil}

  var y: Float {
    get {return _y ?? 0}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  mutating func clearY() {self._y = nil}

  var z: Float {
    get {return _z ?? 0}
    set {_z = newValue}
  }
  /// Returns true if `z` has been explicitly set.
  var hasZ: Bool {return self._z != nil}
  /// Clears the value of `z`. Subsequent reads from it will return its default value.
  mutating func clearZ() {self._z = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _x: Float? = nil
  fileprivate var _y: Float? = nil
  fileprivate var _z: Float? = nil
}

struct Ei_Vector4: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var x: Float {
    get {return _x ?? 0}
    set {_x = newValue}
  }
  /// Returns true if `x` has been explicitly set.
  var hasX: Bool {return self._x != nil}
  /// Clears the value of `x`. Subsequent reads from it will return its default value.
  mutating func clearX() {self._x = nil}

  var y: Float {
    get {return _y ?? 0}
    set {_y = newValue}
  }
  /// Returns true if `y` has been explicitly set.
  var hasY: Bool {return self._y != nil}
  /// Clears the value of `y`. Subsequent reads from it will return its default value.
  mutating func clearY() {self._y = nil}

  var z: Float {
    get {return _z ?? 0}
    set {_z = newValue}
  }
  /// Returns true if `z` has been explicitly set.
  var hasZ: Bool {return self._z != nil}
  /// Clears the value of `z`. Subsequent reads from it will return its default value.
  mutating func clearZ() {self._z = nil}

  var w: Float {
    get {return _w ?? 0}
    set {_w = newValue}
  }
  /// Returns true if `w` has been explicitly set.
  var hasW: Bool {return self._w != nil}
  /// Clears the value of `w`. Subsequent reads from it will return its default value.
  mutating func clearW() {self._w = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _x: Float? = nil
  fileprivate var _y: Float? = nil
  fileprivate var _z: Float? = nil
  fileprivate var _w: Float? = nil
}

struct Ei_Backup: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var eiUserID: String {
    get {return _storage._eiUserID ?? String()}
    set {_uniqueStorage()._eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return _storage._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {_uniqueStorage()._eiUserID = nil}

  var gameServicesID: String {
    get {return _storage._gameServicesID ?? String()}
    set {_uniqueStorage()._gameServicesID = newValue}
  }
  /// Returns true if `gameServicesID` has been explicitly set.
  var hasGameServicesID: Bool {return _storage._gameServicesID != nil}
  /// Clears the value of `gameServicesID`. Subsequent reads from it will return its default value.
  mutating func clearGameServicesID() {_uniqueStorage()._gameServicesID = nil}

  var pushUserID: String {
    get {return _storage._pushUserID ?? String()}
    set {_uniqueStorage()._pushUserID = newValue}
  }
  /// Returns true if `pushUserID` has been explicitly set.
  var hasPushUserID: Bool {return _storage._pushUserID != nil}
  /// Clears the value of `pushUserID`. Subsequent reads from it will return its default value.
  mutating func clearPushUserID() {_uniqueStorage()._pushUserID = nil}

  var deviceID: String {
    get {return _storage._deviceID ?? String()}
    set {_uniqueStorage()._deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return _storage._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {_uniqueStorage()._deviceID = nil}

  var userName: String {
    get {return _storage._userName ?? String()}
    set {_uniqueStorage()._userName = newValue}
  }
  /// Returns true if `userName` has been explicitly set.
  var hasUserName: Bool {return _storage._userName != nil}
  /// Clears the value of `userName`. Subsequent reads from it will return its default value.
  mutating func clearUserName() {_uniqueStorage()._userName = nil}

  var approxTime: Double {
    get {return _storage._approxTime ?? 0}
    set {_uniqueStorage()._approxTime = newValue}
  }
  /// Returns true if `approxTime` has been explicitly set.
  var hasApproxTime: Bool {return _storage._approxTime != nil}
  /// Clears the value of `approxTime`. Subsequent reads from it will return its default value.
  mutating func clearApproxTime() {_uniqueStorage()._approxTime = nil}

  var version: UInt32 {
    get {return _storage._version ?? 0}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {_uniqueStorage()._version = nil}

  var forceOfferBackup: Bool {
    get {return _storage._forceOfferBackup ?? false}
    set {_uniqueStorage()._forceOfferBackup = newValue}
  }
  /// Returns true if `forceOfferBackup` has been explicitly set.
  var hasForceOfferBackup: Bool {return _storage._forceOfferBackup != nil}
  /// Clears the value of `forceOfferBackup`. Subsequent reads from it will return its default value.
  mutating func clearForceOfferBackup() {_uniqueStorage()._forceOfferBackup = nil}

  var forceBackup: Bool {
    get {return _storage._forceBackup ?? false}
    set {_uniqueStorage()._forceBackup = newValue}
  }
  /// Returns true if `forceBackup` has been explicitly set.
  var hasForceBackup: Bool {return _storage._forceBackup != nil}
  /// Clears the value of `forceBackup`. Subsequent reads from it will return its default value.
  mutating func clearForceBackup() {_uniqueStorage()._forceBackup = nil}

  var settings: Ei_Backup.Settings {
    get {return _storage._settings ?? Ei_Backup.Settings()}
    set {_uniqueStorage()._settings = newValue}
  }
  /// Returns true if `settings` has been explicitly set.
  var hasSettings: Bool {return _storage._settings != nil}
  /// Clears the value of `settings`. Subsequent reads from it will return its default value.
  mutating func clearSettings() {_uniqueStorage()._settings = nil}

  var tutorial: Ei_Backup.Tutorial {
    get {return _storage._tutorial ?? Ei_Backup.Tutorial()}
    set {_uniqueStorage()._tutorial = newValue}
  }
  /// Returns true if `tutorial` has been explicitly set.
  var hasTutorial: Bool {return _storage._tutorial != nil}
  /// Clears the value of `tutorial`. Subsequent reads from it will return its default value.
  mutating func clearTutorial() {_uniqueStorage()._tutorial = nil}

  var stats: Ei_Backup.Stats {
    get {return _storage._stats ?? Ei_Backup.Stats()}
    set {_uniqueStorage()._stats = newValue}
  }
  /// Returns true if `stats` has been explicitly set.
  var hasStats: Bool {return _storage._stats != nil}
  /// Clears the value of `stats`. Subsequent reads from it will return its default value.
  mutating func clearStats() {_uniqueStorage()._stats = nil}

  var game: Ei_Backup.Game {
    get {return _storage._game ?? Ei_Backup.Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  mutating func clearGame() {_uniqueStorage()._game = nil}

  var artifacts: Ei_Backup.Artifacts {
    get {return _storage._artifacts ?? Ei_Backup.Artifacts()}
    set {_uniqueStorage()._artifacts = newValue}
  }
  /// Returns true if `artifacts` has been explicitly set.
  var hasArtifacts: Bool {return _storage._artifacts != nil}
  /// Clears the value of `artifacts`. Subsequent reads from it will return its default value.
  mutating func clearArtifacts() {_uniqueStorage()._artifacts = nil}

  var virtue: Ei_Backup.Virtue {
    get {return _storage._virtue ?? Ei_Backup.Virtue()}
    set {_uniqueStorage()._virtue = newValue}
  }
  /// Returns true if `virtue` has been explicitly set.
  var hasVirtue: Bool {return _storage._virtue != nil}
  /// Clears the value of `virtue`. Subsequent reads from it will return its default value.
  mutating func clearVirtue() {_uniqueStorage()._virtue = nil}

  var shells: Ei_Backup.Shells {
    get {return _storage._shells ?? Ei_Backup.Shells()}
    set {_uniqueStorage()._shells = newValue}
  }
  /// Returns true if `shells` has been explicitly set.
  var hasShells: Bool {return _storage._shells != nil}
  /// Clears the value of `shells`. Subsequent reads from it will return its default value.
  mutating func clearShells() {_uniqueStorage()._shells = nil}

  var sim: Ei_Backup.Simulation {
    get {return _storage._sim ?? Ei_Backup.Simulation()}
    set {_uniqueStorage()._sim = newValue}
  }
  /// Returns true if `sim` has been explicitly set.
  var hasSim: Bool {return _storage._sim != nil}
  /// Clears the value of `sim`. Subsequent reads from it will return its default value.
  mutating func clearSim() {_uniqueStorage()._sim = nil}

  var farms: [Ei_Backup.Simulation] {
    get {return _storage._farms}
    set {_uniqueStorage()._farms = newValue}
  }

  var mission: Ei_Backup.Mission {
    get {return _storage._mission ?? Ei_Backup.Mission()}
    set {_uniqueStorage()._mission = newValue}
  }
  /// Returns true if `mission` has been explicitly set.
  var hasMission: Bool {return _storage._mission != nil}
  /// Clears the value of `mission`. Subsequent reads from it will return its default value.
  mutating func clearMission() {_uniqueStorage()._mission = nil}

  var misc: Ei_Backup.Misc {
    get {return _storage._misc ?? Ei_Backup.Misc()}
    set {_uniqueStorage()._misc = newValue}
  }
  /// Returns true if `misc` has been explicitly set.
  var hasMisc: Bool {return _storage._misc != nil}
  /// Clears the value of `misc`. Subsequent reads from it will return its default value.
  mutating func clearMisc() {_uniqueStorage()._misc = nil}

  var contracts: Ei_MyContracts {
    get {return _storage._contracts ?? Ei_MyContracts()}
    set {_uniqueStorage()._contracts = newValue}
  }
  /// Returns true if `contracts` has been explicitly set.
  var hasContracts: Bool {return _storage._contracts != nil}
  /// Clears the value of `contracts`. Subsequent reads from it will return its default value.
  mutating func clearContracts() {_uniqueStorage()._contracts = nil}

  var artifactsDb: Ei_ArtifactsDB {
    get {return _storage._artifactsDb ?? Ei_ArtifactsDB()}
    set {_uniqueStorage()._artifactsDb = newValue}
  }
  /// Returns true if `artifactsDb` has been explicitly set.
  var hasArtifactsDb: Bool {return _storage._artifactsDb != nil}
  /// Clears the value of `artifactsDb`. Subsequent reads from it will return its default value.
  mutating func clearArtifactsDb() {_uniqueStorage()._artifactsDb = nil}

  var shellDb: Ei_ShellDB {
    get {return _storage._shellDb ?? Ei_ShellDB()}
    set {_uniqueStorage()._shellDb = newValue}
  }
  /// Returns true if `shellDb` has been explicitly set.
  var hasShellDb: Bool {return _storage._shellDb != nil}
  /// Clears the value of `shellDb`. Subsequent reads from it will return its default value.
  mutating func clearShellDb() {_uniqueStorage()._shellDb = nil}

  var readMailIds: [String] {
    get {return _storage._readMailIds}
    set {_uniqueStorage()._readMailIds = newValue}
  }

  var mailState: Ei_MailState {
    get {return _storage._mailState ?? Ei_MailState()}
    set {_uniqueStorage()._mailState = newValue}
  }
  /// Returns true if `mailState` has been explicitly set.
  var hasMailState: Bool {return _storage._mailState != nil}
  /// Clears the value of `mailState`. Subsequent reads from it will return its default value.
  mutating func clearMailState() {_uniqueStorage()._mailState = nil}

  var checksum: UInt64 {
    get {return _storage._checksum ?? 0}
    set {_uniqueStorage()._checksum = newValue}
  }
  /// Returns true if `checksum` has been explicitly set.
  var hasChecksum: Bool {return _storage._checksum != nil}
  /// Clears the value of `checksum`. Subsequent reads from it will return its default value.
  mutating func clearChecksum() {_uniqueStorage()._checksum = nil}

  var signature: String {
    get {return _storage._signature ?? String()}
    set {_uniqueStorage()._signature = newValue}
  }
  /// Returns true if `signature` has been explicitly set.
  var hasSignature: Bool {return _storage._signature != nil}
  /// Clears the value of `signature`. Subsequent reads from it will return its default value.
  mutating func clearSignature() {_uniqueStorage()._signature = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Settings: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var sfx: Bool {
      get {return _storage._sfx ?? false}
      set {_uniqueStorage()._sfx = newValue}
    }
    /// Returns true if `sfx` has been explicitly set.
    var hasSfx: Bool {return _storage._sfx != nil}
    /// Clears the value of `sfx`. Subsequent reads from it will return its default value.
    mutating func clearSfx() {_uniqueStorage()._sfx = nil}

    var music: Bool {
      get {return _storage._music ?? false}
      set {_uniqueStorage()._music = newValue}
    }
    /// Returns true if `music` has been explicitly set.
    var hasMusic: Bool {return _storage._music != nil}
    /// Clears the value of `music`. Subsequent reads from it will return its default value.
    mutating func clearMusic() {_uniqueStorage()._music = nil}

    var lowBatteryMode: Bool {
      get {return _storage._lowBatteryMode ?? false}
      set {_uniqueStorage()._lowBatteryMode = newValue}
    }
    /// Returns true if `lowBatteryMode` has been explicitly set.
    var hasLowBatteryMode: Bool {return _storage._lowBatteryMode != nil}
    /// Clears the value of `lowBatteryMode`. Subsequent reads from it will return its default value.
    mutating func clearLowBatteryMode() {_uniqueStorage()._lowBatteryMode = nil}

    var lowPerformanceMode: Bool {
      get {return _storage._lowPerformanceMode ?? false}
      set {_uniqueStorage()._lowPerformanceMode = newValue}
    }
    /// Returns true if `lowPerformanceMode` has been explicitly set.
    var hasLowPerformanceMode: Bool {return _storage._lowPerformanceMode != nil}
    /// Clears the value of `lowPerformanceMode`. Subsequent reads from it will return its default value.
    mutating func clearLowPerformanceMode() {_uniqueStorage()._lowPerformanceMode = nil}

    var forceTouchChickenBtn: Bool {
      get {return _storage._forceTouchChickenBtn ?? false}
      set {_uniqueStorage()._forceTouchChickenBtn = newValue}
    }
    /// Returns true if `forceTouchChickenBtn` has been explicitly set.
    var hasForceTouchChickenBtn: Bool {return _storage._forceTouchChickenBtn != nil}
    /// Clears the value of `forceTouchChickenBtn`. Subsequent reads from it will return its default value.
    mutating func clearForceTouchChickenBtn() {_uniqueStorage()._forceTouchChickenBtn = nil}

    var notificationsQueried: Bool {
      get {return _storage._notificationsQueried ?? false}
      set {_uniqueStorage()._notificationsQueried = newValue}
    }
    /// Returns true if `notificationsQueried` has been explicitly set.
    var hasNotificationsQueried: Bool {return _storage._notificationsQueried != nil}
    /// Clears the value of `notificationsQueried`. Subsequent reads from it will return its default value.
    mutating func clearNotificationsQueried() {_uniqueStorage()._notificationsQueried = nil}

    var lastNotificationQueryTime: Double {
      get {return _storage._lastNotificationQueryTime ?? 0}
      set {_uniqueStorage()._lastNotificationQueryTime = newValue}
    }
    /// Returns true if `lastNotificationQueryTime` has been explicitly set.
    var hasLastNotificationQueryTime: Bool {return _storage._lastNotificationQueryTime != nil}
    /// Clears the value of `lastNotificationQueryTime`. Subsequent reads from it will return its default value.
    mutating func clearLastNotificationQueryTime() {_uniqueStorage()._lastNotificationQueryTime = nil}

    var notificationsOn: Bool {
      get {return _storage._notificationsOn ?? false}
      set {_uniqueStorage()._notificationsOn = newValue}
    }
    /// Returns true if `notificationsOn` has been explicitly set.
    var hasNotificationsOn: Bool {return _storage._notificationsOn != nil}
    /// Clears the value of `notificationsOn`. Subsequent reads from it will return its default value.
    mutating func clearNotificationsOn() {_uniqueStorage()._notificationsOn = nil}

    var notifyDailyGift: Bool {
      get {return _storage._notifyDailyGift ?? false}
      set {_uniqueStorage()._notifyDailyGift = newValue}
    }
    /// Returns true if `notifyDailyGift` has been explicitly set.
    var hasNotifyDailyGift: Bool {return _storage._notifyDailyGift != nil}
    /// Clears the value of `notifyDailyGift`. Subsequent reads from it will return its default value.
    mutating func clearNotifyDailyGift() {_uniqueStorage()._notifyDailyGift = nil}

    var lowPerformance: Bool {
      get {return _storage._lowPerformance ?? false}
      set {_uniqueStorage()._lowPerformance = newValue}
    }
    /// Returns true if `lowPerformance` has been explicitly set.
    var hasLowPerformance: Bool {return _storage._lowPerformance != nil}
    /// Clears the value of `lowPerformance`. Subsequent reads from it will return its default value.
    mutating func clearLowPerformance() {_uniqueStorage()._lowPerformance = nil}

    var autoStopFueling: Bool {
      get {return _storage._autoStopFueling ?? false}
      set {_uniqueStorage()._autoStopFueling = newValue}
    }
    /// Returns true if `autoStopFueling` has been explicitly set.
    var hasAutoStopFueling: Bool {return _storage._autoStopFueling != nil}
    /// Clears the value of `autoStopFueling`. Subsequent reads from it will return its default value.
    mutating func clearAutoStopFueling() {_uniqueStorage()._autoStopFueling = nil}

    var maxEnabled: Bool {
      get {return _storage._maxEnabled ?? false}
      set {_uniqueStorage()._maxEnabled = newValue}
    }
    /// Returns true if `maxEnabled` has been explicitly set.
    var hasMaxEnabled: Bool {return _storage._maxEnabled != nil}
    /// Clears the value of `maxEnabled`. Subsequent reads from it will return its default value.
    mutating func clearMaxEnabled() {_uniqueStorage()._maxEnabled = nil}

    var hideCcStatus: Bool {
      get {return _storage._hideCcStatus ?? false}
      set {_uniqueStorage()._hideCcStatus = newValue}
    }
    /// Returns true if `hideCcStatus` has been explicitly set.
    var hasHideCcStatus: Bool {return _storage._hideCcStatus != nil}
    /// Clears the value of `hideCcStatus`. Subsequent reads from it will return its default value.
    mutating func clearHideCcStatus() {_uniqueStorage()._hideCcStatus = nil}

    var contractsWidgetEnabled: Bool {
      get {return _storage._contractsWidgetEnabled ?? false}
      set {_uniqueStorage()._contractsWidgetEnabled = newValue}
    }
    /// Returns true if `contractsWidgetEnabled` has been explicitly set.
    var hasContractsWidgetEnabled: Bool {return _storage._contractsWidgetEnabled != nil}
    /// Clears the value of `contractsWidgetEnabled`. Subsequent reads from it will return its default value.
    mutating func clearContractsWidgetEnabled() {_uniqueStorage()._contractsWidgetEnabled = nil}

    var artifactSparkle: Bool {
      get {return _storage._artifactSparkle ?? false}
      set {_uniqueStorage()._artifactSparkle = newValue}
    }
    /// Returns true if `artifactSparkle` has been explicitly set.
    var hasArtifactSparkle: Bool {return _storage._artifactSparkle != nil}
    /// Clears the value of `artifactSparkle`. Subsequent reads from it will return its default value.
    mutating func clearArtifactSparkle() {_uniqueStorage()._artifactSparkle = nil}

    var lastBackupTime: Double {
      get {return _storage._lastBackupTime ?? 0}
      set {_uniqueStorage()._lastBackupTime = newValue}
    }
    /// Returns true if `lastBackupTime` has been explicitly set.
    var hasLastBackupTime: Bool {return _storage._lastBackupTime != nil}
    /// Clears the value of `lastBackupTime`. Subsequent reads from it will return its default value.
    mutating func clearLastBackupTime() {_uniqueStorage()._lastBackupTime = nil}

    var coppaQueried: Bool {
      get {return _storage._coppaQueried ?? false}
      set {_uniqueStorage()._coppaQueried = newValue}
    }
    /// Returns true if `coppaQueried` has been explicitly set.
    var hasCoppaQueried: Bool {return _storage._coppaQueried != nil}
    /// Clears the value of `coppaQueried`. Subsequent reads from it will return its default value.
    mutating func clearCoppaQueried() {_uniqueStorage()._coppaQueried = nil}

    var coppaRestricted: Bool {
      get {return _storage._coppaRestricted ?? false}
      set {_uniqueStorage()._coppaRestricted = newValue}
    }
    /// Returns true if `coppaRestricted` has been explicitly set.
    var hasCoppaRestricted: Bool {return _storage._coppaRestricted != nil}
    /// Clears the value of `coppaRestricted`. Subsequent reads from it will return its default value.
    mutating func clearCoppaRestricted() {_uniqueStorage()._coppaRestricted = nil}

    var gdprConsentQueried: Bool {
      get {return _storage._gdprConsentQueried ?? false}
      set {_uniqueStorage()._gdprConsentQueried = newValue}
    }
    /// Returns true if `gdprConsentQueried` has been explicitly set.
    var hasGdprConsentQueried: Bool {return _storage._gdprConsentQueried != nil}
    /// Clears the value of `gdprConsentQueried`. Subsequent reads from it will return its default value.
    mutating func clearGdprConsentQueried() {_uniqueStorage()._gdprConsentQueried = nil}

    var gdprAgeRestricted: Bool {
      get {return _storage._gdprAgeRestricted ?? false}
      set {_uniqueStorage()._gdprAgeRestricted = newValue}
    }
    /// Returns true if `gdprAgeRestricted` has been explicitly set.
    var hasGdprAgeRestricted: Bool {return _storage._gdprAgeRestricted != nil}
    /// Clears the value of `gdprAgeRestricted`. Subsequent reads from it will return its default value.
    mutating func clearGdprAgeRestricted() {_uniqueStorage()._gdprAgeRestricted = nil}

    var gdprConsentGiven: Bool {
      get {return _storage._gdprConsentGiven ?? false}
      set {_uniqueStorage()._gdprConsentGiven = newValue}
    }
    /// Returns true if `gdprConsentGiven` has been explicitly set.
    var hasGdprConsentGiven: Bool {return _storage._gdprConsentGiven != nil}
    /// Clears the value of `gdprConsentGiven`. Subsequent reads from it will return its default value.
    mutating func clearGdprConsentGiven() {_uniqueStorage()._gdprConsentGiven = nil}

    var ageQueried: Bool {
      get {return _storage._ageQueried ?? false}
      set {_uniqueStorage()._ageQueried = newValue}
    }
    /// Returns true if `ageQueried` has been explicitly set.
    var hasAgeQueried: Bool {return _storage._ageQueried != nil}
    /// Clears the value of `ageQueried`. Subsequent reads from it will return its default value.
    mutating func clearAgeQueried() {_uniqueStorage()._ageQueried = nil}

    var ageRestricted: Bool {
      get {return _storage._ageRestricted ?? false}
      set {_uniqueStorage()._ageRestricted = newValue}
    }
    /// Returns true if `ageRestricted` has been explicitly set.
    var hasAgeRestricted: Bool {return _storage._ageRestricted != nil}
    /// Clears the value of `ageRestricted`. Subsequent reads from it will return its default value.
    mutating func clearAgeRestricted() {_uniqueStorage()._ageRestricted = nil}

    var dataCollectionConsentQueried: Bool {
      get {return _storage._dataCollectionConsentQueried ?? false}
      set {_uniqueStorage()._dataCollectionConsentQueried = newValue}
    }
    /// Returns true if `dataCollectionConsentQueried` has been explicitly set.
    var hasDataCollectionConsentQueried: Bool {return _storage._dataCollectionConsentQueried != nil}
    /// Clears the value of `dataCollectionConsentQueried`. Subsequent reads from it will return its default value.
    mutating func clearDataCollectionConsentQueried() {_uniqueStorage()._dataCollectionConsentQueried = nil}

    var dataCollectionConsentGiven: Bool {
      get {return _storage._dataCollectionConsentGiven ?? false}
      set {_uniqueStorage()._dataCollectionConsentGiven = newValue}
    }
    /// Returns true if `dataCollectionConsentGiven` has been explicitly set.
    var hasDataCollectionConsentGiven: Bool {return _storage._dataCollectionConsentGiven != nil}
    /// Clears the value of `dataCollectionConsentGiven`. Subsequent reads from it will return its default value.
    mutating func clearDataCollectionConsentGiven() {_uniqueStorage()._dataCollectionConsentGiven = nil}

    var lastDayAgeQueried: UInt32 {
      get {return _storage._lastDayAgeQueried ?? 0}
      set {_uniqueStorage()._lastDayAgeQueried = newValue}
    }
    /// Returns true if `lastDayAgeQueried` has been explicitly set.
    var hasLastDayAgeQueried: Bool {return _storage._lastDayAgeQueried != nil}
    /// Clears the value of `lastDayAgeQueried`. Subsequent reads from it will return its default value.
    mutating func clearLastDayAgeQueried() {_uniqueStorage()._lastDayAgeQueried = nil}

    var userAdsEnabled: Bool {
      get {return _storage._userAdsEnabled ?? true}
      set {_uniqueStorage()._userAdsEnabled = newValue}
    }
    /// Returns true if `userAdsEnabled` has been explicitly set.
    var hasUserAdsEnabled: Bool {return _storage._userAdsEnabled != nil}
    /// Clears the value of `userAdsEnabled`. Subsequent reads from it will return its default value.
    mutating func clearUserAdsEnabled() {_uniqueStorage()._userAdsEnabled = nil}

    var userCloudEnabled: Bool {
      get {return _storage._userCloudEnabled ?? true}
      set {_uniqueStorage()._userCloudEnabled = newValue}
    }
    /// Returns true if `userCloudEnabled` has been explicitly set.
    var hasUserCloudEnabled: Bool {return _storage._userCloudEnabled != nil}
    /// Clears the value of `userCloudEnabled`. Subsequent reads from it will return its default value.
    mutating func clearUserCloudEnabled() {_uniqueStorage()._userCloudEnabled = nil}

    var userAnalyticsEnabled: Bool {
      get {return _storage._userAnalyticsEnabled ?? true}
      set {_uniqueStorage()._userAnalyticsEnabled = newValue}
    }
    /// Returns true if `userAnalyticsEnabled` has been explicitly set.
    var hasUserAnalyticsEnabled: Bool {return _storage._userAnalyticsEnabled != nil}
    /// Clears the value of `userAnalyticsEnabled`. Subsequent reads from it will return its default value.
    mutating func clearUserAnalyticsEnabled() {_uniqueStorage()._userAnalyticsEnabled = nil}

    var userPersonalizedAdsEnabled: Bool {
      get {return _storage._userPersonalizedAdsEnabled ?? true}
      set {_uniqueStorage()._userPersonalizedAdsEnabled = newValue}
    }
    /// Returns true if `userPersonalizedAdsEnabled` has been explicitly set.
    var hasUserPersonalizedAdsEnabled: Bool {return _storage._userPersonalizedAdsEnabled != nil}
    /// Clears the value of `userPersonalizedAdsEnabled`. Subsequent reads from it will return its default value.
    mutating func clearUserPersonalizedAdsEnabled() {_uniqueStorage()._userPersonalizedAdsEnabled = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Tutorial: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var introShown: Bool {
      get {return _introShown ?? false}
      set {_introShown = newValue}
    }
    /// Returns true if `introShown` has been explicitly set.
    var hasIntroShown: Bool {return self._introShown != nil}
    /// Clears the value of `introShown`. Subsequent reads from it will return its default value.
    mutating func clearIntroShown() {self._introShown = nil}

    var clickTutorialShown: Bool {
      get {return _clickTutorialShown ?? false}
      set {_clickTutorialShown = newValue}
    }
    /// Returns true if `clickTutorialShown` has been explicitly set.
    var hasClickTutorialShown: Bool {return self._clickTutorialShown != nil}
    /// Clears the value of `clickTutorialShown`. Subsequent reads from it will return its default value.
    mutating func clearClickTutorialShown() {self._clickTutorialShown = nil}

    var buyHabShown: Bool {
      get {return _buyHabShown ?? false}
      set {_buyHabShown = newValue}
    }
    /// Returns true if `buyHabShown` has been explicitly set.
    var hasBuyHabShown: Bool {return self._buyHabShown != nil}
    /// Clears the value of `buyHabShown`. Subsequent reads from it will return its default value.
    mutating func clearBuyHabShown() {self._buyHabShown = nil}

    var hireVehicleShown: Bool {
      get {return _hireVehicleShown ?? false}
      set {_hireVehicleShown = newValue}
    }
    /// Returns true if `hireVehicleShown` has been explicitly set.
    var hasHireVehicleShown: Bool {return self._hireVehicleShown != nil}
    /// Clears the value of `hireVehicleShown`. Subsequent reads from it will return its default value.
    mutating func clearHireVehicleShown() {self._hireVehicleShown = nil}

    var qNumShown: Bool {
      get {return _qNumShown ?? false}
      set {_qNumShown = newValue}
    }
    /// Returns true if `qNumShown` has been explicitly set.
    var hasQNumShown: Bool {return self._qNumShown != nil}
    /// Clears the value of `qNumShown`. Subsequent reads from it will return its default value.
    mutating func clearQNumShown() {self._qNumShown = nil}

    var sNumShown: Bool {
      get {return _sNumShown ?? false}
      set {_sNumShown = newValue}
    }
    /// Returns true if `sNumShown` has been explicitly set.
    var hasSNumShown: Bool {return self._sNumShown != nil}
    /// Clears the value of `sNumShown`. Subsequent reads from it will return its default value.
    mutating func clearSNumShown() {self._sNumShown = nil}

    var contractsTabShown: Bool {
      get {return _contractsTabShown ?? false}
      set {_contractsTabShown = newValue}
    }
    /// Returns true if `contractsTabShown` has been explicitly set.
    var hasContractsTabShown: Bool {return self._contractsTabShown != nil}
    /// Clears the value of `contractsTabShown`. Subsequent reads from it will return its default value.
    mutating func clearContractsTabShown() {self._contractsTabShown = nil}

    var contractInfoShown: Bool {
      get {return _contractInfoShown ?? false}
      set {_contractInfoShown = newValue}
    }
    /// Returns true if `contractInfoShown` has been explicitly set.
    var hasContractInfoShown: Bool {return self._contractInfoShown != nil}
    /// Clears the value of `contractInfoShown`. Subsequent reads from it will return its default value.
    mutating func clearContractInfoShown() {self._contractInfoShown = nil}

    var joinCoopShown: Bool {
      get {return _joinCoopShown ?? false}
      set {_joinCoopShown = newValue}
    }
    /// Returns true if `joinCoopShown` has been explicitly set.
    var hasJoinCoopShown: Bool {return self._joinCoopShown != nil}
    /// Clears the value of `joinCoopShown`. Subsequent reads from it will return its default value.
    mutating func clearJoinCoopShown() {self._joinCoopShown = nil}

    var switchFarmShown: Bool {
      get {return _switchFarmShown ?? false}
      set {_switchFarmShown = newValue}
    }
    /// Returns true if `switchFarmShown` has been explicitly set.
    var hasSwitchFarmShown: Bool {return self._switchFarmShown != nil}
    /// Clears the value of `switchFarmShown`. Subsequent reads from it will return its default value.
    mutating func clearSwitchFarmShown() {self._switchFarmShown = nil}

    var tutorialShown: [Bool] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _introShown: Bool? = nil
    fileprivate var _clickTutorialShown: Bool? = nil
    fileprivate var _buyHabShown: Bool? = nil
    fileprivate var _hireVehicleShown: Bool? = nil
    fileprivate var _qNumShown: Bool? = nil
    fileprivate var _sNumShown: Bool? = nil
    fileprivate var _contractsTabShown: Bool? = nil
    fileprivate var _contractInfoShown: Bool? = nil
    fileprivate var _joinCoopShown: Bool? = nil
    fileprivate var _switchFarmShown: Bool? = nil
  }

  struct Stats: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eggTotalsOld: [UInt64] {
      get {return _storage._eggTotalsOld}
      set {_uniqueStorage()._eggTotalsOld = newValue}
    }

    var eggTotals: [Double] {
      get {return _storage._eggTotals}
      set {_uniqueStorage()._eggTotals = newValue}
    }

    var unlimitedChickensUses: UInt64 {
      get {return _storage._unlimitedChickensUses ?? 0}
      set {_uniqueStorage()._unlimitedChickensUses = newValue}
    }
    /// Returns true if `unlimitedChickensUses` has been explicitly set.
    var hasUnlimitedChickensUses: Bool {return _storage._unlimitedChickensUses != nil}
    /// Clears the value of `unlimitedChickensUses`. Subsequent reads from it will return its default value.
    mutating func clearUnlimitedChickensUses() {_uniqueStorage()._unlimitedChickensUses = nil}

    var refillUses: UInt64 {
      get {return _storage._refillUses ?? 0}
      set {_uniqueStorage()._refillUses = newValue}
    }
    /// Returns true if `refillUses` has been explicitly set.
    var hasRefillUses: Bool {return _storage._refillUses != nil}
    /// Clears the value of `refillUses`. Subsequent reads from it will return its default value.
    mutating func clearRefillUses() {_uniqueStorage()._refillUses = nil}

    var warp1Uses: UInt64 {
      get {return _storage._warp1Uses ?? 0}
      set {_uniqueStorage()._warp1Uses = newValue}
    }
    /// Returns true if `warp1Uses` has been explicitly set.
    var hasWarp1Uses: Bool {return _storage._warp1Uses != nil}
    /// Clears the value of `warp1Uses`. Subsequent reads from it will return its default value.
    mutating func clearWarp1Uses() {_uniqueStorage()._warp1Uses = nil}

    var warp8Uses: UInt64 {
      get {return _storage._warp8Uses ?? 0}
      set {_uniqueStorage()._warp8Uses = newValue}
    }
    /// Returns true if `warp8Uses` has been explicitly set.
    var hasWarp8Uses: Bool {return _storage._warp8Uses != nil}
    /// Clears the value of `warp8Uses`. Subsequent reads from it will return its default value.
    mutating func clearWarp8Uses() {_uniqueStorage()._warp8Uses = nil}

    var boostsUsed: UInt64 {
      get {return _storage._boostsUsed ?? 0}
      set {_uniqueStorage()._boostsUsed = newValue}
    }
    /// Returns true if `boostsUsed` has been explicitly set.
    var hasBoostsUsed: Bool {return _storage._boostsUsed != nil}
    /// Clears the value of `boostsUsed`. Subsequent reads from it will return its default value.
    mutating func clearBoostsUsed() {_uniqueStorage()._boostsUsed = nil}

    var videoDoublerUses: UInt64 {
      get {return _storage._videoDoublerUses ?? 0}
      set {_uniqueStorage()._videoDoublerUses = newValue}
    }
    /// Returns true if `videoDoublerUses` has been explicitly set.
    var hasVideoDoublerUses: Bool {return _storage._videoDoublerUses != nil}
    /// Clears the value of `videoDoublerUses`. Subsequent reads from it will return its default value.
    mutating func clearVideoDoublerUses() {_uniqueStorage()._videoDoublerUses = nil}

    var droneTakedowns: UInt64 {
      get {return _storage._droneTakedowns ?? 0}
      set {_uniqueStorage()._droneTakedowns = newValue}
    }
    /// Returns true if `droneTakedowns` has been explicitly set.
    var hasDroneTakedowns: Bool {return _storage._droneTakedowns != nil}
    /// Clears the value of `droneTakedowns`. Subsequent reads from it will return its default value.
    mutating func clearDroneTakedowns() {_uniqueStorage()._droneTakedowns = nil}

    var droneTakedownsElite: UInt64 {
      get {return _storage._droneTakedownsElite ?? 0}
      set {_uniqueStorage()._droneTakedownsElite = newValue}
    }
    /// Returns true if `droneTakedownsElite` has been explicitly set.
    var hasDroneTakedownsElite: Bool {return _storage._droneTakedownsElite != nil}
    /// Clears the value of `droneTakedownsElite`. Subsequent reads from it will return its default value.
    mutating func clearDroneTakedownsElite() {_uniqueStorage()._droneTakedownsElite = nil}

    var numPrestiges: UInt64 {
      get {return _storage._numPrestiges ?? 0}
      set {_uniqueStorage()._numPrestiges = newValue}
    }
    /// Returns true if `numPrestiges` has been explicitly set.
    var hasNumPrestiges: Bool {return _storage._numPrestiges != nil}
    /// Clears the value of `numPrestiges`. Subsequent reads from it will return its default value.
    mutating func clearNumPrestiges() {_uniqueStorage()._numPrestiges = nil}

    var numPiggyBreaks: UInt64 {
      get {return _storage._numPiggyBreaks ?? 0}
      set {_uniqueStorage()._numPiggyBreaks = newValue}
    }
    /// Returns true if `numPiggyBreaks` has been explicitly set.
    var hasNumPiggyBreaks: Bool {return _storage._numPiggyBreaks != nil}
    /// Clears the value of `numPiggyBreaks`. Subsequent reads from it will return its default value.
    mutating func clearNumPiggyBreaks() {_uniqueStorage()._numPiggyBreaks = nil}

    var iapPacksPurchased: UInt64 {
      get {return _storage._iapPacksPurchased ?? 0}
      set {_uniqueStorage()._iapPacksPurchased = newValue}
    }
    /// Returns true if `iapPacksPurchased` has been explicitly set.
    var hasIapPacksPurchased: Bool {return _storage._iapPacksPurchased != nil}
    /// Clears the value of `iapPacksPurchased`. Subsequent reads from it will return its default value.
    mutating func clearIapPacksPurchased() {_uniqueStorage()._iapPacksPurchased = nil}

    var piggyFull: Bool {
      get {return _storage._piggyFull ?? false}
      set {_uniqueStorage()._piggyFull = newValue}
    }
    /// Returns true if `piggyFull` has been explicitly set.
    var hasPiggyFull: Bool {return _storage._piggyFull != nil}
    /// Clears the value of `piggyFull`. Subsequent reads from it will return its default value.
    mutating func clearPiggyFull() {_uniqueStorage()._piggyFull = nil}

    var piggyFoundFull: Bool {
      get {return _storage._piggyFoundFull ?? false}
      set {_uniqueStorage()._piggyFoundFull = newValue}
    }
    /// Returns true if `piggyFoundFull` has been explicitly set.
    var hasPiggyFoundFull: Bool {return _storage._piggyFoundFull != nil}
    /// Clears the value of `piggyFoundFull`. Subsequent reads from it will return its default value.
    mutating func clearPiggyFoundFull() {_uniqueStorage()._piggyFoundFull = nil}

    var timePiggyFilledRealtime: Double {
      get {return _storage._timePiggyFilledRealtime ?? 0}
      set {_uniqueStorage()._timePiggyFilledRealtime = newValue}
    }
    /// Returns true if `timePiggyFilledRealtime` has been explicitly set.
    var hasTimePiggyFilledRealtime: Bool {return _storage._timePiggyFilledRealtime != nil}
    /// Clears the value of `timePiggyFilledRealtime`. Subsequent reads from it will return its default value.
    mutating func clearTimePiggyFilledRealtime() {_uniqueStorage()._timePiggyFilledRealtime = nil}

    var timePiggyFullGametime: Double {
      get {return _storage._timePiggyFullGametime ?? 0}
      set {_uniqueStorage()._timePiggyFullGametime = newValue}
    }
    /// Returns true if `timePiggyFullGametime` has been explicitly set.
    var hasTimePiggyFullGametime: Bool {return _storage._timePiggyFullGametime != nil}
    /// Clears the value of `timePiggyFullGametime`. Subsequent reads from it will return its default value.
    mutating func clearTimePiggyFullGametime() {_uniqueStorage()._timePiggyFullGametime = nil}

    var lostPiggyIncrements: UInt64 {
      get {return _storage._lostPiggyIncrements ?? 0}
      set {_uniqueStorage()._lostPiggyIncrements = newValue}
    }
    /// Returns true if `lostPiggyIncrements` has been explicitly set.
    var hasLostPiggyIncrements: Bool {return _storage._lostPiggyIncrements != nil}
    /// Clears the value of `lostPiggyIncrements`. Subsequent reads from it will return its default value.
    mutating func clearLostPiggyIncrements() {_uniqueStorage()._lostPiggyIncrements = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Game: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var currentFarm: UInt32 {
      get {return _storage._currentFarm ?? 0}
      set {_uniqueStorage()._currentFarm = newValue}
    }
    /// Returns true if `currentFarm` has been explicitly set.
    var hasCurrentFarm: Bool {return _storage._currentFarm != nil}
    /// Clears the value of `currentFarm`. Subsequent reads from it will return its default value.
    mutating func clearCurrentFarm() {_uniqueStorage()._currentFarm = nil}

    var maxEggReached: Ei_Egg {
      get {return _storage._maxEggReached ?? .edible}
      set {_uniqueStorage()._maxEggReached = newValue}
    }
    /// Returns true if `maxEggReached` has been explicitly set.
    var hasMaxEggReached: Bool {return _storage._maxEggReached != nil}
    /// Clears the value of `maxEggReached`. Subsequent reads from it will return its default value.
    mutating func clearMaxEggReached() {_uniqueStorage()._maxEggReached = nil}

    var goldenEggsEarned: UInt64 {
      get {return _storage._goldenEggsEarned ?? 0}
      set {_uniqueStorage()._goldenEggsEarned = newValue}
    }
    /// Returns true if `goldenEggsEarned` has been explicitly set.
    var hasGoldenEggsEarned: Bool {return _storage._goldenEggsEarned != nil}
    /// Clears the value of `goldenEggsEarned`. Subsequent reads from it will return its default value.
    mutating func clearGoldenEggsEarned() {_uniqueStorage()._goldenEggsEarned = nil}

    var goldenEggsSpent: UInt64 {
      get {return _storage._goldenEggsSpent ?? 0}
      set {_uniqueStorage()._goldenEggsSpent = newValue}
    }
    /// Returns true if `goldenEggsSpent` has been explicitly set.
    var hasGoldenEggsSpent: Bool {return _storage._goldenEggsSpent != nil}
    /// Clears the value of `goldenEggsSpent`. Subsequent reads from it will return its default value.
    mutating func clearGoldenEggsSpent() {_uniqueStorage()._goldenEggsSpent = nil}

    var uncliamedGoldenEggs: UInt64 {
      get {return _storage._uncliamedGoldenEggs ?? 0}
      set {_uniqueStorage()._uncliamedGoldenEggs = newValue}
    }
    /// Returns true if `uncliamedGoldenEggs` has been explicitly set.
    var hasUncliamedGoldenEggs: Bool {return _storage._uncliamedGoldenEggs != nil}
    /// Clears the value of `uncliamedGoldenEggs`. Subsequent reads from it will return its default value.
    mutating func clearUncliamedGoldenEggs() {_uniqueStorage()._uncliamedGoldenEggs = nil}

    var soulEggs: UInt64 {
      get {return _storage._soulEggs ?? 0}
      set {_uniqueStorage()._soulEggs = newValue}
    }
    /// Returns true if `soulEggs` has been explicitly set.
    var hasSoulEggs: Bool {return _storage._soulEggs != nil}
    /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
    mutating func clearSoulEggs() {_uniqueStorage()._soulEggs = nil}

    var unclaimedSoulEggs: UInt64 {
      get {return _storage._unclaimedSoulEggs ?? 0}
      set {_uniqueStorage()._unclaimedSoulEggs = newValue}
    }
    /// Returns true if `unclaimedSoulEggs` has been explicitly set.
    var hasUnclaimedSoulEggs: Bool {return _storage._unclaimedSoulEggs != nil}
    /// Clears the value of `unclaimedSoulEggs`. Subsequent reads from it will return its default value.
    mutating func clearUnclaimedSoulEggs() {_uniqueStorage()._unclaimedSoulEggs = nil}

    var soulEggsD: Double {
      get {return _storage._soulEggsD ?? 0}
      set {_uniqueStorage()._soulEggsD = newValue}
    }
    /// Returns true if `soulEggsD` has been explicitly set.
    var hasSoulEggsD: Bool {return _storage._soulEggsD != nil}
    /// Clears the value of `soulEggsD`. Subsequent reads from it will return its default value.
    mutating func clearSoulEggsD() {_uniqueStorage()._soulEggsD = nil}

    var unclaimedSoulEggsD: Double {
      get {return _storage._unclaimedSoulEggsD ?? 0}
      set {_uniqueStorage()._unclaimedSoulEggsD = newValue}
    }
    /// Returns true if `unclaimedSoulEggsD` has been explicitly set.
    var hasUnclaimedSoulEggsD: Bool {return _storage._unclaimedSoulEggsD != nil}
    /// Clears the value of `unclaimedSoulEggsD`. Subsequent reads from it will return its default value.
    mutating func clearUnclaimedSoulEggsD() {_uniqueStorage()._unclaimedSoulEggsD = nil}

    var eggsOfProphecy: UInt64 {
      get {return _storage._eggsOfProphecy ?? 0}
      set {_uniqueStorage()._eggsOfProphecy = newValue}
    }
    /// Returns true if `eggsOfProphecy` has been explicitly set.
    var hasEggsOfProphecy: Bool {return _storage._eggsOfProphecy != nil}
    /// Clears the value of `eggsOfProphecy`. Subsequent reads from it will return its default value.
    mutating func clearEggsOfProphecy() {_uniqueStorage()._eggsOfProphecy = nil}

    var unclaimedEggsOfProphecy: UInt64 {
      get {return _storage._unclaimedEggsOfProphecy ?? 0}
      set {_uniqueStorage()._unclaimedEggsOfProphecy = newValue}
    }
    /// Returns true if `unclaimedEggsOfProphecy` has been explicitly set.
    var hasUnclaimedEggsOfProphecy: Bool {return _storage._unclaimedEggsOfProphecy != nil}
    /// Clears the value of `unclaimedEggsOfProphecy`. Subsequent reads from it will return its default value.
    mutating func clearUnclaimedEggsOfProphecy() {_uniqueStorage()._unclaimedEggsOfProphecy = nil}

    var shellScriptsEarned: UInt64 {
      get {return _storage._shellScriptsEarned ?? 0}
      set {_uniqueStorage()._shellScriptsEarned = newValue}
    }
    /// Returns true if `shellScriptsEarned` has been explicitly set.
    var hasShellScriptsEarned: Bool {return _storage._shellScriptsEarned != nil}
    /// Clears the value of `shellScriptsEarned`. Subsequent reads from it will return its default value.
    mutating func clearShellScriptsEarned() {_uniqueStorage()._shellScriptsEarned = nil}

    var shellScriptsSpent: UInt64 {
      get {return _storage._shellScriptsSpent ?? 0}
      set {_uniqueStorage()._shellScriptsSpent = newValue}
    }
    /// Returns true if `shellScriptsSpent` has been explicitly set.
    var hasShellScriptsSpent: Bool {return _storage._shellScriptsSpent != nil}
    /// Clears the value of `shellScriptsSpent`. Subsequent reads from it will return its default value.
    mutating func clearShellScriptsSpent() {_uniqueStorage()._shellScriptsSpent = nil}

    var unclaimedShellScripts: UInt64 {
      get {return _storage._unclaimedShellScripts ?? 0}
      set {_uniqueStorage()._unclaimedShellScripts = newValue}
    }
    /// Returns true if `unclaimedShellScripts` has been explicitly set.
    var hasUnclaimedShellScripts: Bool {return _storage._unclaimedShellScripts != nil}
    /// Clears the value of `unclaimedShellScripts`. Subsequent reads from it will return its default value.
    mutating func clearUnclaimedShellScripts() {_uniqueStorage()._unclaimedShellScripts = nil}

    var prestigeCashEarned: Double {
      get {return _storage._prestigeCashEarned ?? 0}
      set {_uniqueStorage()._prestigeCashEarned = newValue}
    }
    /// Returns true if `prestigeCashEarned` has been explicitly set.
    var hasPrestigeCashEarned: Bool {return _storage._prestigeCashEarned != nil}
    /// Clears the value of `prestigeCashEarned`. Subsequent reads from it will return its default value.
    mutating func clearPrestigeCashEarned() {_uniqueStorage()._prestigeCashEarned = nil}

    var prestigeSoulBoostCash: Double {
      get {return _storage._prestigeSoulBoostCash ?? 0}
      set {_uniqueStorage()._prestigeSoulBoostCash = newValue}
    }
    /// Returns true if `prestigeSoulBoostCash` has been explicitly set.
    var hasPrestigeSoulBoostCash: Bool {return _storage._prestigeSoulBoostCash != nil}
    /// Clears the value of `prestigeSoulBoostCash`. Subsequent reads from it will return its default value.
    mutating func clearPrestigeSoulBoostCash() {_uniqueStorage()._prestigeSoulBoostCash = nil}

    var lifetimeCashEarned: Double {
      get {return _storage._lifetimeCashEarned ?? 0}
      set {_uniqueStorage()._lifetimeCashEarned = newValue}
    }
    /// Returns true if `lifetimeCashEarned` has been explicitly set.
    var hasLifetimeCashEarned: Bool {return _storage._lifetimeCashEarned != nil}
    /// Clears the value of `lifetimeCashEarned`. Subsequent reads from it will return its default value.
    mutating func clearLifetimeCashEarned() {_uniqueStorage()._lifetimeCashEarned = nil}

    var piggyBank: UInt64 {
      get {return _storage._piggyBank ?? 0}
      set {_uniqueStorage()._piggyBank = newValue}
    }
    /// Returns true if `piggyBank` has been explicitly set.
    var hasPiggyBank: Bool {return _storage._piggyBank != nil}
    /// Clears the value of `piggyBank`. Subsequent reads from it will return its default value.
    mutating func clearPiggyBank() {_uniqueStorage()._piggyBank = nil}

    var piggyFullAlertShown: Bool {
      get {return _storage._piggyFullAlertShown ?? false}
      set {_uniqueStorage()._piggyFullAlertShown = newValue}
    }
    /// Returns true if `piggyFullAlertShown` has been explicitly set.
    var hasPiggyFullAlertShown: Bool {return _storage._piggyFullAlertShown != nil}
    /// Clears the value of `piggyFullAlertShown`. Subsequent reads from it will return its default value.
    mutating func clearPiggyFullAlertShown() {_uniqueStorage()._piggyFullAlertShown = nil}

    var permitLevel: UInt32 {
      get {return _storage._permitLevel ?? 0}
      set {_uniqueStorage()._permitLevel = newValue}
    }
    /// Returns true if `permitLevel` has been explicitly set.
    var hasPermitLevel: Bool {return _storage._permitLevel != nil}
    /// Clears the value of `permitLevel`. Subsequent reads from it will return its default value.
    mutating func clearPermitLevel() {_uniqueStorage()._permitLevel = nil}

    var epicResearch: [Ei_Backup.ResearchItem] {
      get {return _storage._epicResearch}
      set {_uniqueStorage()._epicResearch = newValue}
    }

    var hyperloopStation: Bool {
      get {return _storage._hyperloopStation ?? false}
      set {_uniqueStorage()._hyperloopStation = newValue}
    }
    /// Returns true if `hyperloopStation` has been explicitly set.
    var hasHyperloopStation: Bool {return _storage._hyperloopStation != nil}
    /// Clears the value of `hyperloopStation`. Subsequent reads from it will return its default value.
    mutating func clearHyperloopStation() {_uniqueStorage()._hyperloopStation = nil}

    var nextDailyGiftTime: Double {
      get {return _storage._nextDailyGiftTime ?? 0}
      set {_uniqueStorage()._nextDailyGiftTime = newValue}
    }
    /// Returns true if `nextDailyGiftTime` has been explicitly set.
    var hasNextDailyGiftTime: Bool {return _storage._nextDailyGiftTime != nil}
    /// Clears the value of `nextDailyGiftTime`. Subsequent reads from it will return its default value.
    mutating func clearNextDailyGiftTime() {_uniqueStorage()._nextDailyGiftTime = nil}

    var lastDailyGiftCollectedDay: UInt32 {
      get {return _storage._lastDailyGiftCollectedDay ?? 0}
      set {_uniqueStorage()._lastDailyGiftCollectedDay = newValue}
    }
    /// Returns true if `lastDailyGiftCollectedDay` has been explicitly set.
    var hasLastDailyGiftCollectedDay: Bool {return _storage._lastDailyGiftCollectedDay != nil}
    /// Clears the value of `lastDailyGiftCollectedDay`. Subsequent reads from it will return its default value.
    mutating func clearLastDailyGiftCollectedDay() {_uniqueStorage()._lastDailyGiftCollectedDay = nil}

    var numDailyGiftsCollected: UInt32 {
      get {return _storage._numDailyGiftsCollected ?? 0}
      set {_uniqueStorage()._numDailyGiftsCollected = newValue}
    }
    /// Returns true if `numDailyGiftsCollected` has been explicitly set.
    var hasNumDailyGiftsCollected: Bool {return _storage._numDailyGiftsCollected != nil}
    /// Clears the value of `numDailyGiftsCollected`. Subsequent reads from it will return its default value.
    mutating func clearNumDailyGiftsCollected() {_uniqueStorage()._numDailyGiftsCollected = nil}

    var news: [Ei_Backup.NewsHeadline] {
      get {return _storage._news}
      set {_uniqueStorage()._news = newValue}
    }

    var lastNewsTime: Double {
      get {return _storage._lastNewsTime ?? 0}
      set {_uniqueStorage()._lastNewsTime = newValue}
    }
    /// Returns true if `lastNewsTime` has been explicitly set.
    var hasLastNewsTime: Bool {return _storage._lastNewsTime != nil}
    /// Clears the value of `lastNewsTime`. Subsequent reads from it will return its default value.
    mutating func clearLastNewsTime() {_uniqueStorage()._lastNewsTime = nil}

    var currentMultiplier: Double {
      get {return _storage._currentMultiplier ?? 0}
      set {_uniqueStorage()._currentMultiplier = newValue}
    }
    /// Returns true if `currentMultiplier` has been explicitly set.
    var hasCurrentMultiplier: Bool {return _storage._currentMultiplier != nil}
    /// Clears the value of `currentMultiplier`. Subsequent reads from it will return its default value.
    mutating func clearCurrentMultiplier() {_uniqueStorage()._currentMultiplier = nil}

    var currentMultiplierExpiration: Double {
      get {return _storage._currentMultiplierExpiration ?? 0}
      set {_uniqueStorage()._currentMultiplierExpiration = newValue}
    }
    /// Returns true if `currentMultiplierExpiration` has been explicitly set.
    var hasCurrentMultiplierExpiration: Bool {return _storage._currentMultiplierExpiration != nil}
    /// Clears the value of `currentMultiplierExpiration`. Subsequent reads from it will return its default value.
    mutating func clearCurrentMultiplierExpiration() {_uniqueStorage()._currentMultiplierExpiration = nil}

    var achievements: [Ei_Backup.AchievementInfo] {
      get {return _storage._achievements}
      set {_uniqueStorage()._achievements = newValue}
    }

    var maxFarmSizeReached: [UInt64] {
      get {return _storage._maxFarmSizeReached}
      set {_uniqueStorage()._maxFarmSizeReached = newValue}
    }

    var eggMedalLevel: [UInt32] {
      get {return _storage._eggMedalLevel}
      set {_uniqueStorage()._eggMedalLevel = newValue}
    }

    var longIdleNotificationSet: Bool {
      get {return _storage._longIdleNotificationSet ?? false}
      set {_uniqueStorage()._longIdleNotificationSet = newValue}
    }
    /// Returns true if `longIdleNotificationSet` has been explicitly set.
    var hasLongIdleNotificationSet: Bool {return _storage._longIdleNotificationSet != nil}
    /// Clears the value of `longIdleNotificationSet`. Subsequent reads from it will return its default value.
    mutating func clearLongIdleNotificationSet() {_uniqueStorage()._longIdleNotificationSet = nil}

    var longIdleNotificationThreshold: Double {
      get {return _storage._longIdleNotificationThreshold ?? 0}
      set {_uniqueStorage()._longIdleNotificationThreshold = newValue}
    }
    /// Returns true if `longIdleNotificationThreshold` has been explicitly set.
    var hasLongIdleNotificationThreshold: Bool {return _storage._longIdleNotificationThreshold != nil}
    /// Clears the value of `longIdleNotificationThreshold`. Subsequent reads from it will return its default value.
    mutating func clearLongIdleNotificationThreshold() {_uniqueStorage()._longIdleNotificationThreshold = nil}

    var longIdleReward: Double {
      get {return _storage._longIdleReward ?? 0}
      set {_uniqueStorage()._longIdleReward = newValue}
    }
    /// Returns true if `longIdleReward` has been explicitly set.
    var hasLongIdleReward: Bool {return _storage._longIdleReward != nil}
    /// Clears the value of `longIdleReward`. Subsequent reads from it will return its default value.
    mutating func clearLongIdleReward() {_uniqueStorage()._longIdleReward = nil}

    var boosts: [Ei_Backup.OwnedBoost] {
      get {return _storage._boosts}
      set {_uniqueStorage()._boosts = newValue}
    }

    var totalTimeCheatsDetected: UInt32 {
      get {return _storage._totalTimeCheatsDetected ?? 0}
      set {_uniqueStorage()._totalTimeCheatsDetected = newValue}
    }
    /// Returns true if `totalTimeCheatsDetected` has been explicitly set.
    var hasTotalTimeCheatsDetected: Bool {return _storage._totalTimeCheatsDetected != nil}
    /// Clears the value of `totalTimeCheatsDetected`. Subsequent reads from it will return its default value.
    mutating func clearTotalTimeCheatsDetected() {_uniqueStorage()._totalTimeCheatsDetected = nil}

    var forceEliteContracts: Bool {
      get {return _storage._forceEliteContracts ?? false}
      set {_uniqueStorage()._forceEliteContracts = newValue}
    }
    /// Returns true if `forceEliteContracts` has been explicitly set.
    var hasForceEliteContracts: Bool {return _storage._forceEliteContracts != nil}
    /// Clears the value of `forceEliteContracts`. Subsequent reads from it will return its default value.
    mutating func clearForceEliteContracts() {_uniqueStorage()._forceEliteContracts = nil}

    var newPlayerEventEndTime: Double {
      get {return _storage._newPlayerEventEndTime ?? 0}
      set {_uniqueStorage()._newPlayerEventEndTime = newValue}
    }
    /// Returns true if `newPlayerEventEndTime` has been explicitly set.
    var hasNewPlayerEventEndTime: Bool {return _storage._newPlayerEventEndTime != nil}
    /// Clears the value of `newPlayerEventEndTime`. Subsequent reads from it will return its default value.
    mutating func clearNewPlayerEventEndTime() {_uniqueStorage()._newPlayerEventEndTime = nil}

    var timeCheatDebt: Double {
      get {return _storage._timeCheatDebt ?? 0}
      set {_uniqueStorage()._timeCheatDebt = newValue}
    }
    /// Returns true if `timeCheatDebt` has been explicitly set.
    var hasTimeCheatDebt: Bool {return _storage._timeCheatDebt != nil}
    /// Clears the value of `timeCheatDebt`. Subsequent reads from it will return its default value.
    mutating func clearTimeCheatDebt() {_uniqueStorage()._timeCheatDebt = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Artifacts: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var infusing: Bool {
      get {return _storage._infusing ?? false}
      set {_uniqueStorage()._infusing = newValue}
    }
    /// Returns true if `infusing` has been explicitly set.
    var hasInfusing: Bool {return _storage._infusing != nil}
    /// Clears the value of `infusing`. Subsequent reads from it will return its default value.
    mutating func clearInfusing() {_uniqueStorage()._infusing = nil}

    var itemBeingInfused: Ei_ArtifactInventoryItem {
      get {return _storage._itemBeingInfused ?? Ei_ArtifactInventoryItem()}
      set {_uniqueStorage()._itemBeingInfused = newValue}
    }
    /// Returns true if `itemBeingInfused` has been explicitly set.
    var hasItemBeingInfused: Bool {return _storage._itemBeingInfused != nil}
    /// Clears the value of `itemBeingInfused`. Subsequent reads from it will return its default value.
    mutating func clearItemBeingInfused() {_uniqueStorage()._itemBeingInfused = nil}

    var specBeingInfused: Ei_ArtifactSpec {
      get {return _storage._specBeingInfused ?? Ei_ArtifactSpec()}
      set {_uniqueStorage()._specBeingInfused = newValue}
    }
    /// Returns true if `specBeingInfused` has been explicitly set.
    var hasSpecBeingInfused: Bool {return _storage._specBeingInfused != nil}
    /// Clears the value of `specBeingInfused`. Subsequent reads from it will return its default value.
    mutating func clearSpecBeingInfused() {_uniqueStorage()._specBeingInfused = nil}

    var eggTypeInfusing: Ei_Egg {
      get {return _storage._eggTypeInfusing ?? .edible}
      set {_uniqueStorage()._eggTypeInfusing = newValue}
    }
    /// Returns true if `eggTypeInfusing` has been explicitly set.
    var hasEggTypeInfusing: Bool {return _storage._eggTypeInfusing != nil}
    /// Clears the value of `eggTypeInfusing`. Subsequent reads from it will return its default value.
    mutating func clearEggTypeInfusing() {_uniqueStorage()._eggTypeInfusing = nil}

    var infusingEggsRequired: Double {
      get {return _storage._infusingEggsRequired ?? 0}
      set {_uniqueStorage()._infusingEggsRequired = newValue}
    }
    /// Returns true if `infusingEggsRequired` has been explicitly set.
    var hasInfusingEggsRequired: Bool {return _storage._infusingEggsRequired != nil}
    /// Clears the value of `infusingEggsRequired`. Subsequent reads from it will return its default value.
    mutating func clearInfusingEggsRequired() {_uniqueStorage()._infusingEggsRequired = nil}

    var eggsInfused: Double {
      get {return _storage._eggsInfused ?? 0}
      set {_uniqueStorage()._eggsInfused = newValue}
    }
    /// Returns true if `eggsInfused` has been explicitly set.
    var hasEggsInfused: Bool {return _storage._eggsInfused != nil}
    /// Clears the value of `eggsInfused`. Subsequent reads from it will return its default value.
    mutating func clearEggsInfused() {_uniqueStorage()._eggsInfused = nil}

    var flowPercentageArtifacts: Double {
      get {return _storage._flowPercentageArtifacts ?? 0.5}
      set {_uniqueStorage()._flowPercentageArtifacts = newValue}
    }
    /// Returns true if `flowPercentageArtifacts` has been explicitly set.
    var hasFlowPercentageArtifacts: Bool {return _storage._flowPercentageArtifacts != nil}
    /// Clears the value of `flowPercentageArtifacts`. Subsequent reads from it will return its default value.
    mutating func clearFlowPercentageArtifacts() {_uniqueStorage()._flowPercentageArtifacts = nil}

    var fuelingEnabled: Bool {
      get {return _storage._fuelingEnabled ?? true}
      set {_uniqueStorage()._fuelingEnabled = newValue}
    }
    /// Returns true if `fuelingEnabled` has been explicitly set.
    var hasFuelingEnabled: Bool {return _storage._fuelingEnabled != nil}
    /// Clears the value of `fuelingEnabled`. Subsequent reads from it will return its default value.
    mutating func clearFuelingEnabled() {_uniqueStorage()._fuelingEnabled = nil}

    var tankFillingEnabled: Bool {
      get {return _storage._tankFillingEnabled ?? false}
      set {_uniqueStorage()._tankFillingEnabled = newValue}
    }
    /// Returns true if `tankFillingEnabled` has been explicitly set.
    var hasTankFillingEnabled: Bool {return _storage._tankFillingEnabled != nil}
    /// Clears the value of `tankFillingEnabled`. Subsequent reads from it will return its default value.
    mutating func clearTankFillingEnabled() {_uniqueStorage()._tankFillingEnabled = nil}

    var tankLevel: UInt32 {
      get {return _storage._tankLevel ?? 0}
      set {_uniqueStorage()._tankLevel = newValue}
    }
    /// Returns true if `tankLevel` has been explicitly set.
    var hasTankLevel: Bool {return _storage._tankLevel != nil}
    /// Clears the value of `tankLevel`. Subsequent reads from it will return its default value.
    mutating func clearTankLevel() {_uniqueStorage()._tankLevel = nil}

    var tankFuels: [Double] {
      get {return _storage._tankFuels}
      set {_uniqueStorage()._tankFuels = newValue}
    }

    var tankLimits: [Double] {
      get {return _storage._tankLimits}
      set {_uniqueStorage()._tankLimits = newValue}
    }

    var lastFueledShip: Ei_MissionInfo.Spaceship {
      get {return _storage._lastFueledShip ?? .chickenOne}
      set {_uniqueStorage()._lastFueledShip = newValue}
    }
    /// Returns true if `lastFueledShip` has been explicitly set.
    var hasLastFueledShip: Bool {return _storage._lastFueledShip != nil}
    /// Clears the value of `lastFueledShip`. Subsequent reads from it will return its default value.
    mutating func clearLastFueledShip() {_uniqueStorage()._lastFueledShip = nil}

    var inventoryScore: Double {
      get {return _storage._inventoryScore ?? 0}
      set {_uniqueStorage()._inventoryScore = newValue}
    }
    /// Returns true if `inventoryScore` has been explicitly set.
    var hasInventoryScore: Bool {return _storage._inventoryScore != nil}
    /// Clears the value of `inventoryScore`. Subsequent reads from it will return its default value.
    mutating func clearInventoryScore() {_uniqueStorage()._inventoryScore = nil}

    var craftingXp: Double {
      get {return _storage._craftingXp ?? 0}
      set {_uniqueStorage()._craftingXp = newValue}
    }
    /// Returns true if `craftingXp` has been explicitly set.
    var hasCraftingXp: Bool {return _storage._craftingXp != nil}
    /// Clears the value of `craftingXp`. Subsequent reads from it will return its default value.
    mutating func clearCraftingXp() {_uniqueStorage()._craftingXp = nil}

    var enabled: Bool {
      get {return _storage._enabled ?? false}
      set {_uniqueStorage()._enabled = newValue}
    }
    /// Returns true if `enabled` has been explicitly set.
    var hasEnabled: Bool {return _storage._enabled != nil}
    /// Clears the value of `enabled`. Subsequent reads from it will return its default value.
    mutating func clearEnabled() {_uniqueStorage()._enabled = nil}

    var introShown: Bool {
      get {return _storage._introShown ?? false}
      set {_uniqueStorage()._introShown = newValue}
    }
    /// Returns true if `introShown` has been explicitly set.
    var hasIntroShown: Bool {return _storage._introShown != nil}
    /// Clears the value of `introShown`. Subsequent reads from it will return its default value.
    mutating func clearIntroShown() {_uniqueStorage()._introShown = nil}

    var infusingEnabledDeprecated: Bool {
      get {return _storage._infusingEnabledDeprecated ?? true}
      set {_uniqueStorage()._infusingEnabledDeprecated = newValue}
    }
    /// Returns true if `infusingEnabledDeprecated` has been explicitly set.
    var hasInfusingEnabledDeprecated: Bool {return _storage._infusingEnabledDeprecated != nil}
    /// Clears the value of `infusingEnabledDeprecated`. Subsequent reads from it will return its default value.
    mutating func clearInfusingEnabledDeprecated() {_uniqueStorage()._infusingEnabledDeprecated = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Virtue: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var shiftCount: UInt32 {
      get {return _shiftCount ?? 0}
      set {_shiftCount = newValue}
    }
    /// Returns true if `shiftCount` has been explicitly set.
    var hasShiftCount: Bool {return self._shiftCount != nil}
    /// Clears the value of `shiftCount`. Subsequent reads from it will return its default value.
    mutating func clearShiftCount() {self._shiftCount = nil}

    var resets: UInt32 {
      get {return _resets ?? 0}
      set {_resets = newValue}
    }
    /// Returns true if `resets` has been explicitly set.
    var hasResets: Bool {return self._resets != nil}
    /// Clears the value of `resets`. Subsequent reads from it will return its default value.
    mutating func clearResets() {self._resets = nil}

    var eovEarned: [UInt32] = []

    var eggsDelivered: [Double] = []

    var afx: Ei_Backup.Artifacts {
      get {return _afx ?? Ei_Backup.Artifacts()}
      set {_afx = newValue}
    }
    /// Returns true if `afx` has been explicitly set.
    var hasAfx: Bool {return self._afx != nil}
    /// Clears the value of `afx`. Subsequent reads from it will return its default value.
    mutating func clearAfx() {self._afx = nil}

    var activeAfx: [Ei_ActiveArtifactSlot] = []

    var lastSync: Double {
      get {return _lastSync ?? 0}
      set {_lastSync = newValue}
    }
    /// Returns true if `lastSync` has been explicitly set.
    var hasLastSync: Bool {return self._lastSync != nil}
    /// Clears the value of `lastSync`. Subsequent reads from it will return its default value.
    mutating func clearLastSync() {self._lastSync = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _shiftCount: UInt32? = nil
    fileprivate var _resets: UInt32? = nil
    fileprivate var _afx: Ei_Backup.Artifacts? = nil
    fileprivate var _lastSync: Double? = nil
  }

  struct Shells: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var introAlert: Bool {
      get {return _introAlert ?? false}
      set {_introAlert = newValue}
    }
    /// Returns true if `introAlert` has been explicitly set.
    var hasIntroAlert: Bool {return self._introAlert != nil}
    /// Clears the value of `introAlert`. Subsequent reads from it will return its default value.
    mutating func clearIntroAlert() {self._introAlert = nil}

    var contractsIntroAlert: Bool {
      get {return _contractsIntroAlert ?? false}
      set {_contractsIntroAlert = newValue}
    }
    /// Returns true if `contractsIntroAlert` has been explicitly set.
    var hasContractsIntroAlert: Bool {return self._contractsIntroAlert != nil}
    /// Clears the value of `contractsIntroAlert`. Subsequent reads from it will return its default value.
    mutating func clearContractsIntroAlert() {self._contractsIntroAlert = nil}

    var numNew: [Int32] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _introAlert: Bool? = nil
    fileprivate var _contractsIntroAlert: Bool? = nil
  }

  struct Simulation: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var eggType: Ei_Egg {
      get {return _storage._eggType ?? .edible}
      set {_uniqueStorage()._eggType = newValue}
    }
    /// Returns true if `eggType` has been explicitly set.
    var hasEggType: Bool {return _storage._eggType != nil}
    /// Clears the value of `eggType`. Subsequent reads from it will return its default value.
    mutating func clearEggType() {_uniqueStorage()._eggType = nil}

    var farmType: Ei_FarmType {
      get {return _storage._farmType ?? .empty}
      set {_uniqueStorage()._farmType = newValue}
    }
    /// Returns true if `farmType` has been explicitly set.
    var hasFarmType: Bool {return _storage._farmType != nil}
    /// Clears the value of `farmType`. Subsequent reads from it will return its default value.
    mutating func clearFarmType() {_uniqueStorage()._farmType = nil}

    var contractID: String {
      get {return _storage._contractID ?? String()}
      set {_uniqueStorage()._contractID = newValue}
    }
    /// Returns true if `contractID` has been explicitly set.
    var hasContractID: Bool {return _storage._contractID != nil}
    /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
    mutating func clearContractID() {_uniqueStorage()._contractID = nil}

    var cashEarned: Double {
      get {return _storage._cashEarned ?? 0}
      set {_uniqueStorage()._cashEarned = newValue}
    }
    /// Returns true if `cashEarned` has been explicitly set.
    var hasCashEarned: Bool {return _storage._cashEarned != nil}
    /// Clears the value of `cashEarned`. Subsequent reads from it will return its default value.
    mutating func clearCashEarned() {_uniqueStorage()._cashEarned = nil}

    var cashSpent: Double {
      get {return _storage._cashSpent ?? 0}
      set {_uniqueStorage()._cashSpent = newValue}
    }
    /// Returns true if `cashSpent` has been explicitly set.
    var hasCashSpent: Bool {return _storage._cashSpent != nil}
    /// Clears the value of `cashSpent`. Subsequent reads from it will return its default value.
    mutating func clearCashSpent() {_uniqueStorage()._cashSpent = nil}

    var unclaimedCash: Double {
      get {return _storage._unclaimedCash ?? 0}
      set {_uniqueStorage()._unclaimedCash = newValue}
    }
    /// Returns true if `unclaimedCash` has been explicitly set.
    var hasUnclaimedCash: Bool {return _storage._unclaimedCash != nil}
    /// Clears the value of `unclaimedCash`. Subsequent reads from it will return its default value.
    mutating func clearUnclaimedCash() {_uniqueStorage()._unclaimedCash = nil}

    var lastStepTime: Double {
      get {return _storage._lastStepTime ?? 0}
      set {_uniqueStorage()._lastStepTime = newValue}
    }
    /// Returns true if `lastStepTime` has been explicitly set.
    var hasLastStepTime: Bool {return _storage._lastStepTime != nil}
    /// Clears the value of `lastStepTime`. Subsequent reads from it will return its default value.
    mutating func clearLastStepTime() {_uniqueStorage()._lastStepTime = nil}

    var numChickens: UInt64 {
      get {return _storage._numChickens ?? 0}
      set {_uniqueStorage()._numChickens = newValue}
    }
    /// Returns true if `numChickens` has been explicitly set.
    var hasNumChickens: Bool {return _storage._numChickens != nil}
    /// Clears the value of `numChickens`. Subsequent reads from it will return its default value.
    mutating func clearNumChickens() {_uniqueStorage()._numChickens = nil}

    var numChickensUnsettled: UInt64 {
      get {return _storage._numChickensUnsettled ?? 0}
      set {_uniqueStorage()._numChickensUnsettled = newValue}
    }
    /// Returns true if `numChickensUnsettled` has been explicitly set.
    var hasNumChickensUnsettled: Bool {return _storage._numChickensUnsettled != nil}
    /// Clears the value of `numChickensUnsettled`. Subsequent reads from it will return its default value.
    mutating func clearNumChickensUnsettled() {_uniqueStorage()._numChickensUnsettled = nil}

    var numChickensRunning: UInt64 {
      get {return _storage._numChickensRunning ?? 0}
      set {_uniqueStorage()._numChickensRunning = newValue}
    }
    /// Returns true if `numChickensRunning` has been explicitly set.
    var hasNumChickensRunning: Bool {return _storage._numChickensRunning != nil}
    /// Clears the value of `numChickensRunning`. Subsequent reads from it will return its default value.
    mutating func clearNumChickensRunning() {_uniqueStorage()._numChickensRunning = nil}

    var eggsLaid: Double {
      get {return _storage._eggsLaid ?? 0}
      set {_uniqueStorage()._eggsLaid = newValue}
    }
    /// Returns true if `eggsLaid` has been explicitly set.
    var hasEggsLaid: Bool {return _storage._eggsLaid != nil}
    /// Clears the value of `eggsLaid`. Subsequent reads from it will return its default value.
    mutating func clearEggsLaid() {_uniqueStorage()._eggsLaid = nil}

    var eggsShipped: Double {
      get {return _storage._eggsShipped ?? 0}
      set {_uniqueStorage()._eggsShipped = newValue}
    }
    /// Returns true if `eggsShipped` has been explicitly set.
    var hasEggsShipped: Bool {return _storage._eggsShipped != nil}
    /// Clears the value of `eggsShipped`. Subsequent reads from it will return its default value.
    mutating func clearEggsShipped() {_uniqueStorage()._eggsShipped = nil}

    var eggsPaidFor: Double {
      get {return _storage._eggsPaidFor ?? 0}
      set {_uniqueStorage()._eggsPaidFor = newValue}
    }
    /// Returns true if `eggsPaidFor` has been explicitly set.
    var hasEggsPaidFor: Bool {return _storage._eggsPaidFor != nil}
    /// Clears the value of `eggsPaidFor`. Subsequent reads from it will return its default value.
    mutating func clearEggsPaidFor() {_uniqueStorage()._eggsPaidFor = nil}

    var silosOwned: UInt32 {
      get {return _storage._silosOwned ?? 0}
      set {_uniqueStorage()._silosOwned = newValue}
    }
    /// Returns true if `silosOwned` has been explicitly set.
    var hasSilosOwned: Bool {return _storage._silosOwned != nil}
    /// Clears the value of `silosOwned`. Subsequent reads from it will return its default value.
    mutating func clearSilosOwned() {_uniqueStorage()._silosOwned = nil}

    var habs: [UInt32] {
      get {return _storage._habs}
      set {_uniqueStorage()._habs = newValue}
    }

    var habPopulation: [UInt64] {
      get {return _storage._habPopulation}
      set {_uniqueStorage()._habPopulation = newValue}
    }

    var habPopulationIndound: [UInt64] {
      get {return _storage._habPopulationIndound}
      set {_uniqueStorage()._habPopulationIndound = newValue}
    }

    var habIncubatorPopuplation: [Double] {
      get {return _storage._habIncubatorPopuplation}
      set {_uniqueStorage()._habIncubatorPopuplation = newValue}
    }

    var hatcheryPopulation: Double {
      get {return _storage._hatcheryPopulation ?? 0}
      set {_uniqueStorage()._hatcheryPopulation = newValue}
    }
    /// Returns true if `hatcheryPopulation` has been explicitly set.
    var hasHatcheryPopulation: Bool {return _storage._hatcheryPopulation != nil}
    /// Clears the value of `hatcheryPopulation`. Subsequent reads from it will return its default value.
    mutating func clearHatcheryPopulation() {_uniqueStorage()._hatcheryPopulation = nil}

    var vehicles: [UInt32] {
      get {return _storage._vehicles}
      set {_uniqueStorage()._vehicles = newValue}
    }

    var trainLength: [UInt32] {
      get {return _storage._trainLength}
      set {_uniqueStorage()._trainLength = newValue}
    }

    var commonResearch: [Ei_Backup.ResearchItem] {
      get {return _storage._commonResearch}
      set {_uniqueStorage()._commonResearch = newValue}
    }

    var activeBoosts: [Ei_Backup.ActiveBoost] {
      get {return _storage._activeBoosts}
      set {_uniqueStorage()._activeBoosts = newValue}
    }

    var lastCashBoostTime: Double {
      get {return _storage._lastCashBoostTime ?? 0}
      set {_uniqueStorage()._lastCashBoostTime = newValue}
    }
    /// Returns true if `lastCashBoostTime` has been explicitly set.
    var hasLastCashBoostTime: Bool {return _storage._lastCashBoostTime != nil}
    /// Clears the value of `lastCashBoostTime`. Subsequent reads from it will return its default value.
    mutating func clearLastCashBoostTime() {_uniqueStorage()._lastCashBoostTime = nil}

    var timeCheatsDetected: UInt32 {
      get {return _storage._timeCheatsDetected ?? 0}
      set {_uniqueStorage()._timeCheatsDetected = newValue}
    }
    /// Returns true if `timeCheatsDetected` has been explicitly set.
    var hasTimeCheatsDetected: Bool {return _storage._timeCheatsDetected != nil}
    /// Clears the value of `timeCheatsDetected`. Subsequent reads from it will return its default value.
    mutating func clearTimeCheatsDetected() {_uniqueStorage()._timeCheatsDetected = nil}

    var timeCheatDebtDep: Double {
      get {return _storage._timeCheatDebtDep ?? 0}
      set {_uniqueStorage()._timeCheatDebtDep = newValue}
    }
    /// Returns true if `timeCheatDebtDep` has been explicitly set.
    var hasTimeCheatDebtDep: Bool {return _storage._timeCheatDebtDep != nil}
    /// Clears the value of `timeCheatDebtDep`. Subsequent reads from it will return its default value.
    mutating func clearTimeCheatDebtDep() {_uniqueStorage()._timeCheatDebtDep = nil}

    var boostTokensReceived: UInt32 {
      get {return _storage._boostTokensReceived ?? 0}
      set {_uniqueStorage()._boostTokensReceived = newValue}
    }
    /// Returns true if `boostTokensReceived` has been explicitly set.
    var hasBoostTokensReceived: Bool {return _storage._boostTokensReceived != nil}
    /// Clears the value of `boostTokensReceived`. Subsequent reads from it will return its default value.
    mutating func clearBoostTokensReceived() {_uniqueStorage()._boostTokensReceived = nil}

    var boostTokensSpent: UInt32 {
      get {return _storage._boostTokensSpent ?? 0}
      set {_uniqueStorage()._boostTokensSpent = newValue}
    }
    /// Returns true if `boostTokensSpent` has been explicitly set.
    var hasBoostTokensSpent: Bool {return _storage._boostTokensSpent != nil}
    /// Clears the value of `boostTokensSpent`. Subsequent reads from it will return its default value.
    mutating func clearBoostTokensSpent() {_uniqueStorage()._boostTokensSpent = nil}

    var boostTokensGiven: UInt32 {
      get {return _storage._boostTokensGiven ?? 0}
      set {_uniqueStorage()._boostTokensGiven = newValue}
    }
    /// Returns true if `boostTokensGiven` has been explicitly set.
    var hasBoostTokensGiven: Bool {return _storage._boostTokensGiven != nil}
    /// Clears the value of `boostTokensGiven`. Subsequent reads from it will return its default value.
    mutating func clearBoostTokensGiven() {_uniqueStorage()._boostTokensGiven = nil}

    var unclaimedBoostTokens: UInt32 {
      get {return _storage._unclaimedBoostTokens ?? 0}
      set {_uniqueStorage()._unclaimedBoostTokens = newValue}
    }
    /// Returns true if `unclaimedBoostTokens` has been explicitly set.
    var hasUnclaimedBoostTokens: Bool {return _storage._unclaimedBoostTokens != nil}
    /// Clears the value of `unclaimedBoostTokens`. Subsequent reads from it will return its default value.
    mutating func clearUnclaimedBoostTokens() {_uniqueStorage()._unclaimedBoostTokens = nil}

    var gametimeUntilNextBoostToken: Double {
      get {return _storage._gametimeUntilNextBoostToken ?? 0}
      set {_uniqueStorage()._gametimeUntilNextBoostToken = newValue}
    }
    /// Returns true if `gametimeUntilNextBoostToken` has been explicitly set.
    var hasGametimeUntilNextBoostToken: Bool {return _storage._gametimeUntilNextBoostToken != nil}
    /// Clears the value of `gametimeUntilNextBoostToken`. Subsequent reads from it will return its default value.
    mutating func clearGametimeUntilNextBoostToken() {_uniqueStorage()._gametimeUntilNextBoostToken = nil}

    var totalStepTime: Double {
      get {return _storage._totalStepTime ?? 0}
      set {_uniqueStorage()._totalStepTime = newValue}
    }
    /// Returns true if `totalStepTime` has been explicitly set.
    var hasTotalStepTime: Bool {return _storage._totalStepTime != nil}
    /// Clears the value of `totalStepTime`. Subsequent reads from it will return its default value.
    mutating func clearTotalStepTime() {_uniqueStorage()._totalStepTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct Mission: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var currentMission: String {
      get {return _currentMission ?? String()}
      set {_currentMission = newValue}
    }
    /// Returns true if `currentMission` has been explicitly set.
    var hasCurrentMission: Bool {return self._currentMission != nil}
    /// Clears the value of `currentMission`. Subsequent reads from it will return its default value.
    mutating func clearCurrentMission() {self._currentMission = nil}

    var referenceValue: Double {
      get {return _referenceValue ?? 0}
      set {_referenceValue = newValue}
    }
    /// Returns true if `referenceValue` has been explicitly set.
    var hasReferenceValue: Bool {return self._referenceValue != nil}
    /// Clears the value of `referenceValue`. Subsequent reads from it will return its default value.
    mutating func clearReferenceValue() {self._referenceValue = nil}

    var currentMissions: [String] = []

    var missions: [Ei_Backup.MissionInfo] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _currentMission: String? = nil
    fileprivate var _referenceValue: Double? = nil
  }

  struct Misc: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var chickenBtnPrefBig: Bool {
      get {return _storage._chickenBtnPrefBig ?? false}
      set {_uniqueStorage()._chickenBtnPrefBig = newValue}
    }
    /// Returns true if `chickenBtnPrefBig` has been explicitly set.
    var hasChickenBtnPrefBig: Bool {return _storage._chickenBtnPrefBig != nil}
    /// Clears the value of `chickenBtnPrefBig`. Subsequent reads from it will return its default value.
    mutating func clearChickenBtnPrefBig() {_uniqueStorage()._chickenBtnPrefBig = nil}

    var freeHatcheryRefillGiven: Bool {
      get {return _storage._freeHatcheryRefillGiven ?? false}
      set {_uniqueStorage()._freeHatcheryRefillGiven = newValue}
    }
    /// Returns true if `freeHatcheryRefillGiven` has been explicitly set.
    var hasFreeHatcheryRefillGiven: Bool {return _storage._freeHatcheryRefillGiven != nil}
    /// Clears the value of `freeHatcheryRefillGiven`. Subsequent reads from it will return its default value.
    mutating func clearFreeHatcheryRefillGiven() {_uniqueStorage()._freeHatcheryRefillGiven = nil}

    var lastShareFarmValue: Double {
      get {return _storage._lastShareFarmValue ?? 10000000}
      set {_uniqueStorage()._lastShareFarmValue = newValue}
    }
    /// Returns true if `lastShareFarmValue` has been explicitly set.
    var hasLastShareFarmValue: Bool {return _storage._lastShareFarmValue != nil}
    /// Clears the value of `lastShareFarmValue`. Subsequent reads from it will return its default value.
    mutating func clearLastShareFarmValue() {_uniqueStorage()._lastShareFarmValue = nil}

    var lastShareSwarmFarmValue: Double {
      get {return _storage._lastShareSwarmFarmValue ?? 10000000}
      set {_uniqueStorage()._lastShareSwarmFarmValue = newValue}
    }
    /// Returns true if `lastShareSwarmFarmValue` has been explicitly set.
    var hasLastShareSwarmFarmValue: Bool {return _storage._lastShareSwarmFarmValue != nil}
    /// Clears the value of `lastShareSwarmFarmValue`. Subsequent reads from it will return its default value.
    mutating func clearLastShareSwarmFarmValue() {_uniqueStorage()._lastShareSwarmFarmValue = nil}

    var lastShareSwarmSize: Double {
      get {return _storage._lastShareSwarmSize ?? 140}
      set {_uniqueStorage()._lastShareSwarmSize = newValue}
    }
    /// Returns true if `lastShareSwarmSize` has been explicitly set.
    var hasLastShareSwarmSize: Bool {return _storage._lastShareSwarmSize != nil}
    /// Clears the value of `lastShareSwarmSize`. Subsequent reads from it will return its default value.
    mutating func clearLastShareSwarmSize() {_uniqueStorage()._lastShareSwarmSize = nil}

    var lastPrestigeAlertSoulEggsDeprecated: UInt64 {
      get {return _storage._lastPrestigeAlertSoulEggsDeprecated ?? 45}
      set {_uniqueStorage()._lastPrestigeAlertSoulEggsDeprecated = newValue}
    }
    /// Returns true if `lastPrestigeAlertSoulEggsDeprecated` has been explicitly set.
    var hasLastPrestigeAlertSoulEggsDeprecated: Bool {return _storage._lastPrestigeAlertSoulEggsDeprecated != nil}
    /// Clears the value of `lastPrestigeAlertSoulEggsDeprecated`. Subsequent reads from it will return its default value.
    mutating func clearLastPrestigeAlertSoulEggsDeprecated() {_uniqueStorage()._lastPrestigeAlertSoulEggsDeprecated = nil}

    var friendRank: UInt64 {
      get {return _storage._friendRank ?? 0}
      set {_uniqueStorage()._friendRank = newValue}
    }
    /// Returns true if `friendRank` has been explicitly set.
    var hasFriendRank: Bool {return _storage._friendRank != nil}
    /// Clears the value of `friendRank`. Subsequent reads from it will return its default value.
    mutating func clearFriendRank() {_uniqueStorage()._friendRank = nil}

    var friendRankPop: UInt64 {
      get {return _storage._friendRankPop ?? 0}
      set {_uniqueStorage()._friendRankPop = newValue}
    }
    /// Returns true if `friendRankPop` has been explicitly set.
    var hasFriendRankPop: Bool {return _storage._friendRankPop != nil}
    /// Clears the value of `friendRankPop`. Subsequent reads from it will return its default value.
    mutating func clearFriendRankPop() {_uniqueStorage()._friendRankPop = nil}

    var globalRank: UInt64 {
      get {return _storage._globalRank ?? 0}
      set {_uniqueStorage()._globalRank = newValue}
    }
    /// Returns true if `globalRank` has been explicitly set.
    var hasGlobalRank: Bool {return _storage._globalRank != nil}
    /// Clears the value of `globalRank`. Subsequent reads from it will return its default value.
    mutating func clearGlobalRank() {_uniqueStorage()._globalRank = nil}

    var globalRankPop: UInt64 {
      get {return _storage._globalRankPop ?? 0}
      set {_uniqueStorage()._globalRankPop = newValue}
    }
    /// Returns true if `globalRankPop` has been explicitly set.
    var hasGlobalRankPop: Bool {return _storage._globalRankPop != nil}
    /// Clears the value of `globalRankPop`. Subsequent reads from it will return its default value.
    mutating func clearGlobalRankPop() {_uniqueStorage()._globalRankPop = nil}

    var challengesAlert: Bool {
      get {return _storage._challengesAlert ?? false}
      set {_uniqueStorage()._challengesAlert = newValue}
    }
    /// Returns true if `challengesAlert` has been explicitly set.
    var hasChallengesAlert: Bool {return _storage._challengesAlert != nil}
    /// Clears the value of `challengesAlert`. Subsequent reads from it will return its default value.
    mutating func clearChallengesAlert() {_uniqueStorage()._challengesAlert = nil}

    var trophyAlert: Bool {
      get {return _storage._trophyAlert ?? false}
      set {_uniqueStorage()._trophyAlert = newValue}
    }
    /// Returns true if `trophyAlert` has been explicitly set.
    var hasTrophyAlert: Bool {return _storage._trophyAlert != nil}
    /// Clears the value of `trophyAlert`. Subsequent reads from it will return its default value.
    mutating func clearTrophyAlert() {_uniqueStorage()._trophyAlert = nil}

    var arAlert: Bool {
      get {return _storage._arAlert ?? false}
      set {_uniqueStorage()._arAlert = newValue}
    }
    /// Returns true if `arAlert` has been explicitly set.
    var hasArAlert: Bool {return _storage._arAlert != nil}
    /// Clears the value of `arAlert`. Subsequent reads from it will return its default value.
    mutating func clearArAlert() {_uniqueStorage()._arAlert = nil}

    var contractsAlert: Bool {
      get {return _storage._contractsAlert ?? false}
      set {_uniqueStorage()._contractsAlert = newValue}
    }
    /// Returns true if `contractsAlert` has been explicitly set.
    var hasContractsAlert: Bool {return _storage._contractsAlert != nil}
    /// Clears the value of `contractsAlert`. Subsequent reads from it will return its default value.
    mutating func clearContractsAlert() {_uniqueStorage()._contractsAlert = nil}

    var contractsAlertV2: Bool {
      get {return _storage._contractsAlertV2 ?? false}
      set {_uniqueStorage()._contractsAlertV2 = newValue}
    }
    /// Returns true if `contractsAlertV2` has been explicitly set.
    var hasContractsAlertV2: Bool {return _storage._contractsAlertV2 != nil}
    /// Clears the value of `contractsAlertV2`. Subsequent reads from it will return its default value.
    mutating func clearContractsAlertV2() {_uniqueStorage()._contractsAlertV2 = nil}

    var coopAlert: Bool {
      get {return _storage._coopAlert ?? false}
      set {_uniqueStorage()._coopAlert = newValue}
    }
    /// Returns true if `coopAlert` has been explicitly set.
    var hasCoopAlert: Bool {return _storage._coopAlert != nil}
    /// Clears the value of `coopAlert`. Subsequent reads from it will return its default value.
    mutating func clearCoopAlert() {_uniqueStorage()._coopAlert = nil}

    var coopAlertV2: Bool {
      get {return _storage._coopAlertV2 ?? false}
      set {_uniqueStorage()._coopAlertV2 = newValue}
    }
    /// Returns true if `coopAlertV2` has been explicitly set.
    var hasCoopAlertV2: Bool {return _storage._coopAlertV2 != nil}
    /// Clears the value of `coopAlertV2`. Subsequent reads from it will return its default value.
    mutating func clearCoopAlertV2() {_uniqueStorage()._coopAlertV2 = nil}

    var switchAlert: Bool {
      get {return _storage._switchAlert ?? false}
      set {_uniqueStorage()._switchAlert = newValue}
    }
    /// Returns true if `switchAlert` has been explicitly set.
    var hasSwitchAlert: Bool {return _storage._switchAlert != nil}
    /// Clears the value of `switchAlert`. Subsequent reads from it will return its default value.
    mutating func clearSwitchAlert() {_uniqueStorage()._switchAlert = nil}

    var eggOfProphecyAlert: Bool {
      get {return _storage._eggOfProphecyAlert ?? false}
      set {_uniqueStorage()._eggOfProphecyAlert = newValue}
    }
    /// Returns true if `eggOfProphecyAlert` has been explicitly set.
    var hasEggOfProphecyAlert: Bool {return _storage._eggOfProphecyAlert != nil}
    /// Clears the value of `eggOfProphecyAlert`. Subsequent reads from it will return its default value.
    mutating func clearEggOfProphecyAlert() {_uniqueStorage()._eggOfProphecyAlert = nil}

    var boostTokenAlert: Bool {
      get {return _storage._boostTokenAlert ?? false}
      set {_uniqueStorage()._boostTokenAlert = newValue}
    }
    /// Returns true if `boostTokenAlert` has been explicitly set.
    var hasBoostTokenAlert: Bool {return _storage._boostTokenAlert != nil}
    /// Clears the value of `boostTokenAlert`. Subsequent reads from it will return its default value.
    mutating func clearBoostTokenAlert() {_uniqueStorage()._boostTokenAlert = nil}

    var soulEggAlert: Bool {
      get {return _storage._soulEggAlert ?? false}
      set {_uniqueStorage()._soulEggAlert = newValue}
    }
    /// Returns true if `soulEggAlert` has been explicitly set.
    var hasSoulEggAlert: Bool {return _storage._soulEggAlert != nil}
    /// Clears the value of `soulEggAlert`. Subsequent reads from it will return its default value.
    mutating func clearSoulEggAlert() {_uniqueStorage()._soulEggAlert = nil}

    var backupReminderAlert: Bool {
      get {return _storage._backupReminderAlert ?? false}
      set {_uniqueStorage()._backupReminderAlert = newValue}
    }
    /// Returns true if `backupReminderAlert` has been explicitly set.
    var hasBackupReminderAlert: Bool {return _storage._backupReminderAlert != nil}
    /// Clears the value of `backupReminderAlert`. Subsequent reads from it will return its default value.
    mutating func clearBackupReminderAlert() {_uniqueStorage()._backupReminderAlert = nil}

    var maxButtonAlert: Bool {
      get {return _storage._maxButtonAlert ?? false}
      set {_uniqueStorage()._maxButtonAlert = newValue}
    }
    /// Returns true if `maxButtonAlert` has been explicitly set.
    var hasMaxButtonAlert: Bool {return _storage._maxButtonAlert != nil}
    /// Clears the value of `maxButtonAlert`. Subsequent reads from it will return its default value.
    mutating func clearMaxButtonAlert() {_uniqueStorage()._maxButtonAlert = nil}

    var missionTargetAlert: Bool {
      get {return _storage._missionTargetAlert ?? false}
      set {_uniqueStorage()._missionTargetAlert = newValue}
    }
    /// Returns true if `missionTargetAlert` has been explicitly set.
    var hasMissionTargetAlert: Bool {return _storage._missionTargetAlert != nil}
    /// Clears the value of `missionTargetAlert`. Subsequent reads from it will return its default value.
    mutating func clearMissionTargetAlert() {_uniqueStorage()._missionTargetAlert = nil}

    var colleggtiblesAlert: Bool {
      get {return _storage._colleggtiblesAlert ?? false}
      set {_uniqueStorage()._colleggtiblesAlert = newValue}
    }
    /// Returns true if `colleggtiblesAlert` has been explicitly set.
    var hasColleggtiblesAlert: Bool {return _storage._colleggtiblesAlert != nil}
    /// Clears the value of `colleggtiblesAlert`. Subsequent reads from it will return its default value.
    mutating func clearColleggtiblesAlert() {_uniqueStorage()._colleggtiblesAlert = nil}

    var eovAlert: Bool {
      get {return _storage._eovAlert ?? false}
      set {_uniqueStorage()._eovAlert = newValue}
    }
    /// Returns true if `eovAlert` has been explicitly set.
    var hasEovAlert: Bool {return _storage._eovAlert != nil}
    /// Clears the value of `eovAlert`. Subsequent reads from it will return its default value.
    mutating func clearEovAlert() {_uniqueStorage()._eovAlert = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct ResearchItem: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var level: UInt32 {
      get {return _level ?? 0}
      set {_level = newValue}
    }
    /// Returns true if `level` has been explicitly set.
    var hasLevel: Bool {return self._level != nil}
    /// Clears the value of `level`. Subsequent reads from it will return its default value.
    mutating func clearLevel() {self._level = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _level: UInt32? = nil
  }

  struct NewsHeadline: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var read: Bool {
      get {return _read ?? false}
      set {_read = newValue}
    }
    /// Returns true if `read` has been explicitly set.
    var hasRead: Bool {return self._read != nil}
    /// Clears the value of `read`. Subsequent reads from it will return its default value.
    mutating func clearRead() {self._read = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _read: Bool? = nil
  }

  struct AchievementInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var achieved: Bool {
      get {return _achieved ?? false}
      set {_achieved = newValue}
    }
    /// Returns true if `achieved` has been explicitly set.
    var hasAchieved: Bool {return self._achieved != nil}
    /// Clears the value of `achieved`. Subsequent reads from it will return its default value.
    mutating func clearAchieved() {self._achieved = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _achieved: Bool? = nil
  }

  struct ActiveBoost: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var boostID: String {
      get {return _boostID ?? String()}
      set {_boostID = newValue}
    }
    /// Returns true if `boostID` has been explicitly set.
    var hasBoostID: Bool {return self._boostID != nil}
    /// Clears the value of `boostID`. Subsequent reads from it will return its default value.
    mutating func clearBoostID() {self._boostID = nil}

    var timeRemaining: Double {
      get {return _timeRemaining ?? 0}
      set {_timeRemaining = newValue}
    }
    /// Returns true if `timeRemaining` has been explicitly set.
    var hasTimeRemaining: Bool {return self._timeRemaining != nil}
    /// Clears the value of `timeRemaining`. Subsequent reads from it will return its default value.
    mutating func clearTimeRemaining() {self._timeRemaining = nil}

    var referenceValue: Double {
      get {return _referenceValue ?? 0}
      set {_referenceValue = newValue}
    }
    /// Returns true if `referenceValue` has been explicitly set.
    var hasReferenceValue: Bool {return self._referenceValue != nil}
    /// Clears the value of `referenceValue`. Subsequent reads from it will return its default value.
    mutating func clearReferenceValue() {self._referenceValue = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _boostID: String? = nil
    fileprivate var _timeRemaining: Double? = nil
    fileprivate var _referenceValue: Double? = nil
  }

  struct OwnedBoost: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var boostID: String {
      get {return _boostID ?? String()}
      set {_boostID = newValue}
    }
    /// Returns true if `boostID` has been explicitly set.
    var hasBoostID: Bool {return self._boostID != nil}
    /// Clears the value of `boostID`. Subsequent reads from it will return its default value.
    mutating func clearBoostID() {self._boostID = nil}

    var count: UInt32 {
      get {return _count ?? 0}
      set {_count = newValue}
    }
    /// Returns true if `count` has been explicitly set.
    var hasCount: Bool {return self._count != nil}
    /// Clears the value of `count`. Subsequent reads from it will return its default value.
    mutating func clearCount() {self._count = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _boostID: String? = nil
    fileprivate var _count: UInt32? = nil
  }

  struct MissionInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var completed: Bool {
      get {return _completed ?? false}
      set {_completed = newValue}
    }
    /// Returns true if `completed` has been explicitly set.
    var hasCompleted: Bool {return self._completed != nil}
    /// Clears the value of `completed`. Subsequent reads from it will return its default value.
    mutating func clearCompleted() {self._completed = nil}

    var referenceValue: Double {
      get {return _referenceValue ?? 0}
      set {_referenceValue = newValue}
    }
    /// Returns true if `referenceValue` has been explicitly set.
    var hasReferenceValue: Bool {return self._referenceValue != nil}
    /// Clears the value of `referenceValue`. Subsequent reads from it will return its default value.
    mutating func clearReferenceValue() {self._referenceValue = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _completed: Bool? = nil
    fileprivate var _referenceValue: Double? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_EggIncFirstContactRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var gameServicesID: String {
    get {return _gameServicesID ?? String()}
    set {_gameServicesID = newValue}
  }
  /// Returns true if `gameServicesID` has been explicitly set.
  var hasGameServicesID: Bool {return self._gameServicesID != nil}
  /// Clears the value of `gameServicesID`. Subsequent reads from it will return its default value.
  mutating func clearGameServicesID() {self._gameServicesID = nil}

  var deviceID: String {
    get {return _deviceID ?? String()}
    set {_deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {self._deviceID = nil}

  var username: String {
    get {return _username ?? String()}
    set {_username = newValue}
  }
  /// Returns true if `username` has been explicitly set.
  var hasUsername: Bool {return self._username != nil}
  /// Clears the value of `username`. Subsequent reads from it will return its default value.
  mutating func clearUsername() {self._username = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var platform: Ei_Platform {
    get {return _platform ?? .unknownPlatform}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _eiUserID: String? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _gameServicesID: String? = nil
  fileprivate var _deviceID: String? = nil
  fileprivate var _username: String? = nil
  fileprivate var _clientVersion: UInt32? = nil
  fileprivate var _platform: Ei_Platform? = nil
}

struct Ei_EggIncFirstContactResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var idsTransferred: [String] = []

  var errorCode: UInt32 {
    get {return _errorCode ?? 0}
    set {_errorCode = newValue}
  }
  /// Returns true if `errorCode` has been explicitly set.
  var hasErrorCode: Bool {return self._errorCode != nil}
  /// Clears the value of `errorCode`. Subsequent reads from it will return its default value.
  mutating func clearErrorCode() {self._errorCode = nil}

  var errorMessage: String {
    get {return _errorMessage ?? String()}
    set {_errorMessage = newValue}
  }
  /// Returns true if `errorMessage` has been explicitly set.
  var hasErrorMessage: Bool {return self._errorMessage != nil}
  /// Clears the value of `errorMessage`. Subsequent reads from it will return its default value.
  mutating func clearErrorMessage() {self._errorMessage = nil}

  var backup: Ei_Backup {
    get {return _backup ?? Ei_Backup()}
    set {_backup = newValue}
  }
  /// Returns true if `backup` has been explicitly set.
  var hasBackup: Bool {return self._backup != nil}
  /// Clears the value of `backup`. Subsequent reads from it will return its default value.
  mutating func clearBackup() {self._backup = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ErrorCodes: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case noError = 0
    case existingUserWGamerID = 1
    case userNotFound = 2
    case backupConflict = 3

    init() {
      self = .noError
    }

  }

  init() {}

  fileprivate var _eiUserID: String? = nil
  fileprivate var _errorCode: UInt32? = nil
  fileprivate var _errorMessage: String? = nil
  fileprivate var _backup: Ei_Backup? = nil
}

struct Ei_EggIncAdConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var networkPriority: [Ei_AdNetwork] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_DailyGiftInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currentDay: UInt32 {
    get {return _currentDay ?? 0}
    set {_currentDay = newValue}
  }
  /// Returns true if `currentDay` has been explicitly set.
  var hasCurrentDay: Bool {return self._currentDay != nil}
  /// Clears the value of `currentDay`. Subsequent reads from it will return its default value.
  mutating func clearCurrentDay() {self._currentDay = nil}

  var secondsToNextDay: Double {
    get {return _secondsToNextDay ?? 0}
    set {_secondsToNextDay = newValue}
  }
  /// Returns true if `secondsToNextDay` has been explicitly set.
  var hasSecondsToNextDay: Bool {return self._secondsToNextDay != nil}
  /// Clears the value of `secondsToNextDay`. Subsequent reads from it will return its default value.
  mutating func clearSecondsToNextDay() {self._secondsToNextDay = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _currentDay: UInt32? = nil
  fileprivate var _secondsToNextDay: Double? = nil
}

struct Ei_SalesInfoRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var piggyFull: Bool {
    get {return _piggyFull ?? false}
    set {_piggyFull = newValue}
  }
  /// Returns true if `piggyFull` has been explicitly set.
  var hasPiggyFull: Bool {return self._piggyFull != nil}
  /// Clears the value of `piggyFull`. Subsequent reads from it will return its default value.
  mutating func clearPiggyFull() {self._piggyFull = nil}

  var piggyFoundFull: Bool {
    get {return _piggyFoundFull ?? false}
    set {_piggyFoundFull = newValue}
  }
  /// Returns true if `piggyFoundFull` has been explicitly set.
  var hasPiggyFoundFull: Bool {return self._piggyFoundFull != nil}
  /// Clears the value of `piggyFoundFull`. Subsequent reads from it will return its default value.
  mutating func clearPiggyFoundFull() {self._piggyFoundFull = nil}

  var secondsFullRealtime: Double {
    get {return _secondsFullRealtime ?? 0}
    set {_secondsFullRealtime = newValue}
  }
  /// Returns true if `secondsFullRealtime` has been explicitly set.
  var hasSecondsFullRealtime: Bool {return self._secondsFullRealtime != nil}
  /// Clears the value of `secondsFullRealtime`. Subsequent reads from it will return its default value.
  mutating func clearSecondsFullRealtime() {self._secondsFullRealtime = nil}

  var secondsFullGametime: Double {
    get {return _secondsFullGametime ?? 0}
    set {_secondsFullGametime = newValue}
  }
  /// Returns true if `secondsFullGametime` has been explicitly set.
  var hasSecondsFullGametime: Bool {return self._secondsFullGametime != nil}
  /// Clears the value of `secondsFullGametime`. Subsequent reads from it will return its default value.
  mutating func clearSecondsFullGametime() {self._secondsFullGametime = nil}

  var lostIncrements: UInt32 {
    get {return _lostIncrements ?? 0}
    set {_lostIncrements = newValue}
  }
  /// Returns true if `lostIncrements` has been explicitly set.
  var hasLostIncrements: Bool {return self._lostIncrements != nil}
  /// Clears the value of `lostIncrements`. Subsequent reads from it will return its default value.
  mutating func clearLostIncrements() {self._lostIncrements = nil}

  var currentClientVersion: UInt32 {
    get {return _currentClientVersion ?? 0}
    set {_currentClientVersion = newValue}
  }
  /// Returns true if `currentClientVersion` has been explicitly set.
  var hasCurrentClientVersion: Bool {return self._currentClientVersion != nil}
  /// Clears the value of `currentClientVersion`. Subsequent reads from it will return its default value.
  mutating func clearCurrentClientVersion() {self._currentClientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: String? = nil
  fileprivate var _piggyFull: Bool? = nil
  fileprivate var _piggyFoundFull: Bool? = nil
  fileprivate var _secondsFullRealtime: Double? = nil
  fileprivate var _secondsFullGametime: Double? = nil
  fileprivate var _lostIncrements: UInt32? = nil
  fileprivate var _currentClientVersion: UInt32? = nil
}

struct Ei_IAPSaleEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var productID: String {
    get {return _productID ?? String()}
    set {_productID = newValue}
  }
  /// Returns true if `productID` has been explicitly set.
  var hasProductID: Bool {return self._productID != nil}
  /// Clears the value of `productID`. Subsequent reads from it will return its default value.
  mutating func clearProductID() {self._productID = nil}

  var secondsRemaining: Double {
    get {return _secondsRemaining ?? 0}
    set {_secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return self._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {self._secondsRemaining = nil}

  var discountString: String {
    get {return _discountString ?? String()}
    set {_discountString = newValue}
  }
  /// Returns true if `discountString` has been explicitly set.
  var hasDiscountString: Bool {return self._discountString != nil}
  /// Clears the value of `discountString`. Subsequent reads from it will return its default value.
  mutating func clearDiscountString() {self._discountString = nil}

  var saleID: String {
    get {return _saleID ?? String()}
    set {_saleID = newValue}
  }
  /// Returns true if `saleID` has been explicitly set.
  var hasSaleID: Bool {return self._saleID != nil}
  /// Clears the value of `saleID`. Subsequent reads from it will return its default value.
  mutating func clearSaleID() {self._saleID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _productID: String? = nil
  fileprivate var _secondsRemaining: Double? = nil
  fileprivate var _discountString: String? = nil
  fileprivate var _saleID: String? = nil
}

struct Ei_SalesInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sales: [Ei_IAPSaleEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_EggIncEvent: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var secondsRemaining: Double {
    get {return _secondsRemaining ?? 0}
    set {_secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return self._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {self._secondsRemaining = nil}

  var type: String {
    get {return _type ?? String()}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var multiplier: Double {
    get {return _multiplier ?? 0}
    set {_multiplier = newValue}
  }
  /// Returns true if `multiplier` has been explicitly set.
  var hasMultiplier: Bool {return self._multiplier != nil}
  /// Clears the value of `multiplier`. Subsequent reads from it will return its default value.
  mutating func clearMultiplier() {self._multiplier = nil}

  var subtitle: String {
    get {return _subtitle ?? String()}
    set {_subtitle = newValue}
  }
  /// Returns true if `subtitle` has been explicitly set.
  var hasSubtitle: Bool {return self._subtitle != nil}
  /// Clears the value of `subtitle`. Subsequent reads from it will return its default value.
  mutating func clearSubtitle() {self._subtitle = nil}

  var startTime: Double {
    get {return _startTime ?? 0}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var duration: Double {
    get {return _duration ?? 0}
    set {_duration = newValue}
  }
  /// Returns true if `duration` has been explicitly set.
  var hasDuration: Bool {return self._duration != nil}
  /// Clears the value of `duration`. Subsequent reads from it will return its default value.
  mutating func clearDuration() {self._duration = nil}

  var ccOnly: Bool {
    get {return _ccOnly ?? false}
    set {_ccOnly = newValue}
  }
  /// Returns true if `ccOnly` has been explicitly set.
  var hasCcOnly: Bool {return self._ccOnly != nil}
  /// Clears the value of `ccOnly`. Subsequent reads from it will return its default value.
  mutating func clearCcOnly() {self._ccOnly = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identifier: String? = nil
  fileprivate var _secondsRemaining: Double? = nil
  fileprivate var _type: String? = nil
  fileprivate var _multiplier: Double? = nil
  fileprivate var _subtitle: String? = nil
  fileprivate var _startTime: Double? = nil
  fileprivate var _duration: Double? = nil
  fileprivate var _ccOnly: Bool? = nil
}

struct Ei_EggIncCurrentEvents: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var events: [Ei_EggIncEvent] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_DeviceInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceID: String {
    get {return _deviceID ?? String()}
    set {_deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {self._deviceID = nil}

  var advertisingID: String {
    get {return _advertisingID ?? String()}
    set {_advertisingID = newValue}
  }
  /// Returns true if `advertisingID` has been explicitly set.
  var hasAdvertisingID: Bool {return self._advertisingID != nil}
  /// Clears the value of `advertisingID`. Subsequent reads from it will return its default value.
  mutating func clearAdvertisingID() {self._advertisingID = nil}

  var platform: String {
    get {return _platform ?? String()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  var formFactor: String {
    get {return _formFactor ?? String()}
    set {_formFactor = newValue}
  }
  /// Returns true if `formFactor` has been explicitly set.
  var hasFormFactor: Bool {return self._formFactor != nil}
  /// Clears the value of `formFactor`. Subsequent reads from it will return its default value.
  mutating func clearFormFactor() {self._formFactor = nil}

  var deviceName: String {
    get {return _deviceName ?? String()}
    set {_deviceName = newValue}
  }
  /// Returns true if `deviceName` has been explicitly set.
  var hasDeviceName: Bool {return self._deviceName != nil}
  /// Clears the value of `deviceName`. Subsequent reads from it will return its default value.
  mutating func clearDeviceName() {self._deviceName = nil}

  var platformVersion: String {
    get {return _platformVersion ?? String()}
    set {_platformVersion = newValue}
  }
  /// Returns true if `platformVersion` has been explicitly set.
  var hasPlatformVersion: Bool {return self._platformVersion != nil}
  /// Clears the value of `platformVersion`. Subsequent reads from it will return its default value.
  mutating func clearPlatformVersion() {self._platformVersion = nil}

  var localeCountry: String {
    get {return _localeCountry ?? String()}
    set {_localeCountry = newValue}
  }
  /// Returns true if `localeCountry` has been explicitly set.
  var hasLocaleCountry: Bool {return self._localeCountry != nil}
  /// Clears the value of `localeCountry`. Subsequent reads from it will return its default value.
  mutating func clearLocaleCountry() {self._localeCountry = nil}

  var localeLanguage: String {
    get {return _localeLanguage ?? String()}
    set {_localeLanguage = newValue}
  }
  /// Returns true if `localeLanguage` has been explicitly set.
  var hasLocaleLanguage: Bool {return self._localeLanguage != nil}
  /// Clears the value of `localeLanguage`. Subsequent reads from it will return its default value.
  mutating func clearLocaleLanguage() {self._localeLanguage = nil}

  var gpuVendor: String {
    get {return _gpuVendor ?? String()}
    set {_gpuVendor = newValue}
  }
  /// Returns true if `gpuVendor` has been explicitly set.
  var hasGpuVendor: Bool {return self._gpuVendor != nil}
  /// Clears the value of `gpuVendor`. Subsequent reads from it will return its default value.
  mutating func clearGpuVendor() {self._gpuVendor = nil}

  var gpuModel: String {
    get {return _gpuModel ?? String()}
    set {_gpuModel = newValue}
  }
  /// Returns true if `gpuModel` has been explicitly set.
  var hasGpuModel: Bool {return self._gpuModel != nil}
  /// Clears the value of `gpuModel`. Subsequent reads from it will return its default value.
  mutating func clearGpuModel() {self._gpuModel = nil}

  var deviceBucket: String {
    get {return _deviceBucket ?? String()}
    set {_deviceBucket = newValue}
  }
  /// Returns true if `deviceBucket` has been explicitly set.
  var hasDeviceBucket: Bool {return self._deviceBucket != nil}
  /// Clears the value of `deviceBucket`. Subsequent reads from it will return its default value.
  mutating func clearDeviceBucket() {self._deviceBucket = nil}

  var screenWidth: UInt32 {
    get {return _screenWidth ?? 0}
    set {_screenWidth = newValue}
  }
  /// Returns true if `screenWidth` has been explicitly set.
  var hasScreenWidth: Bool {return self._screenWidth != nil}
  /// Clears the value of `screenWidth`. Subsequent reads from it will return its default value.
  mutating func clearScreenWidth() {self._screenWidth = nil}

  var screenHeight: UInt32 {
    get {return _screenHeight ?? 0}
    set {_screenHeight = newValue}
  }
  /// Returns true if `screenHeight` has been explicitly set.
  var hasScreenHeight: Bool {return self._screenHeight != nil}
  /// Clears the value of `screenHeight`. Subsequent reads from it will return its default value.
  mutating func clearScreenHeight() {self._screenHeight = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deviceID: String? = nil
  fileprivate var _advertisingID: String? = nil
  fileprivate var _platform: String? = nil
  fileprivate var _formFactor: String? = nil
  fileprivate var _deviceName: String? = nil
  fileprivate var _platformVersion: String? = nil
  fileprivate var _localeCountry: String? = nil
  fileprivate var _localeLanguage: String? = nil
  fileprivate var _gpuVendor: String? = nil
  fileprivate var _gpuModel: String? = nil
  fileprivate var _deviceBucket: String? = nil
  fileprivate var _screenWidth: UInt32? = nil
  fileprivate var _screenHeight: UInt32? = nil
}

struct Ei_AppInfo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var versionStr: String {
    get {return _storage._versionStr ?? String()}
    set {_uniqueStorage()._versionStr = newValue}
  }
  /// Returns true if `versionStr` has been explicitly set.
  var hasVersionStr: Bool {return _storage._versionStr != nil}
  /// Clears the value of `versionStr`. Subsequent reads from it will return its default value.
  mutating func clearVersionStr() {_uniqueStorage()._versionStr = nil}

  var sessions: UInt32 {
    get {return _storage._sessions ?? 0}
    set {_uniqueStorage()._sessions = newValue}
  }
  /// Returns true if `sessions` has been explicitly set.
  var hasSessions: Bool {return _storage._sessions != nil}
  /// Clears the value of `sessions`. Subsequent reads from it will return its default value.
  mutating func clearSessions() {_uniqueStorage()._sessions = nil}

  var numPrestiges: UInt32 {
    get {return _storage._numPrestiges ?? 0}
    set {_uniqueStorage()._numPrestiges = newValue}
  }
  /// Returns true if `numPrestiges` has been explicitly set.
  var hasNumPrestiges: Bool {return _storage._numPrestiges != nil}
  /// Clears the value of `numPrestiges`. Subsequent reads from it will return its default value.
  mutating func clearNumPrestiges() {_uniqueStorage()._numPrestiges = nil}

  var soulEggs: UInt64 {
    get {return _storage._soulEggs ?? 0}
    set {_uniqueStorage()._soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return _storage._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {_uniqueStorage()._soulEggs = nil}

  var currentEgg: UInt32 {
    get {return _storage._currentEgg ?? 0}
    set {_uniqueStorage()._currentEgg = newValue}
  }
  /// Returns true if `currentEgg` has been explicitly set.
  var hasCurrentEgg: Bool {return _storage._currentEgg != nil}
  /// Clears the value of `currentEgg`. Subsequent reads from it will return its default value.
  mutating func clearCurrentEgg() {_uniqueStorage()._currentEgg = nil}

  var goldEarned: UInt64 {
    get {return _storage._goldEarned ?? 0}
    set {_uniqueStorage()._goldEarned = newValue}
  }
  /// Returns true if `goldEarned` has been explicitly set.
  var hasGoldEarned: Bool {return _storage._goldEarned != nil}
  /// Clears the value of `goldEarned`. Subsequent reads from it will return its default value.
  mutating func clearGoldEarned() {_uniqueStorage()._goldEarned = nil}

  var goldSpent: UInt64 {
    get {return _storage._goldSpent ?? 0}
    set {_uniqueStorage()._goldSpent = newValue}
  }
  /// Returns true if `goldSpent` has been explicitly set.
  var hasGoldSpent: Bool {return _storage._goldSpent != nil}
  /// Clears the value of `goldSpent`. Subsequent reads from it will return its default value.
  mutating func clearGoldSpent() {_uniqueStorage()._goldSpent = nil}

  var currentMission: UInt32 {
    get {return _storage._currentMission ?? 0}
    set {_uniqueStorage()._currentMission = newValue}
  }
  /// Returns true if `currentMission` has been explicitly set.
  var hasCurrentMission: Bool {return _storage._currentMission != nil}
  /// Clears the value of `currentMission`. Subsequent reads from it will return its default value.
  mutating func clearCurrentMission() {_uniqueStorage()._currentMission = nil}

  var piggySize: UInt32 {
    get {return _storage._piggySize ?? 0}
    set {_uniqueStorage()._piggySize = newValue}
  }
  /// Returns true if `piggySize` has been explicitly set.
  var hasPiggySize: Bool {return _storage._piggySize != nil}
  /// Clears the value of `piggySize`. Subsequent reads from it will return its default value.
  mutating func clearPiggySize() {_uniqueStorage()._piggySize = nil}

  var numPiggyBreaks: UInt64 {
    get {return _storage._numPiggyBreaks ?? 0}
    set {_uniqueStorage()._numPiggyBreaks = newValue}
  }
  /// Returns true if `numPiggyBreaks` has been explicitly set.
  var hasNumPiggyBreaks: Bool {return _storage._numPiggyBreaks != nil}
  /// Clears the value of `numPiggyBreaks`. Subsequent reads from it will return its default value.
  mutating func clearNumPiggyBreaks() {_uniqueStorage()._numPiggyBreaks = nil}

  var verifiedPiggyBreaks: UInt64 {
    get {return _storage._verifiedPiggyBreaks ?? 0}
    set {_uniqueStorage()._verifiedPiggyBreaks = newValue}
  }
  /// Returns true if `verifiedPiggyBreaks` has been explicitly set.
  var hasVerifiedPiggyBreaks: Bool {return _storage._verifiedPiggyBreaks != nil}
  /// Clears the value of `verifiedPiggyBreaks`. Subsequent reads from it will return its default value.
  mutating func clearVerifiedPiggyBreaks() {_uniqueStorage()._verifiedPiggyBreaks = nil}

  var iapPacksPurchased: UInt64 {
    get {return _storage._iapPacksPurchased ?? 0}
    set {_uniqueStorage()._iapPacksPurchased = newValue}
  }
  /// Returns true if `iapPacksPurchased` has been explicitly set.
  var hasIapPacksPurchased: Bool {return _storage._iapPacksPurchased != nil}
  /// Clears the value of `iapPacksPurchased`. Subsequent reads from it will return its default value.
  mutating func clearIapPacksPurchased() {_uniqueStorage()._iapPacksPurchased = nil}

  var permitLevel: UInt32 {
    get {return _storage._permitLevel ?? 0}
    set {_uniqueStorage()._permitLevel = newValue}
  }
  /// Returns true if `permitLevel` has been explicitly set.
  var hasPermitLevel: Bool {return _storage._permitLevel != nil}
  /// Clears the value of `permitLevel`. Subsequent reads from it will return its default value.
  mutating func clearPermitLevel() {_uniqueStorage()._permitLevel = nil}

  var videoDoublerUses: UInt64 {
    get {return _storage._videoDoublerUses ?? 0}
    set {_uniqueStorage()._videoDoublerUses = newValue}
  }
  /// Returns true if `videoDoublerUses` has been explicitly set.
  var hasVideoDoublerUses: Bool {return _storage._videoDoublerUses != nil}
  /// Clears the value of `videoDoublerUses`. Subsequent reads from it will return its default value.
  mutating func clearVideoDoublerUses() {_uniqueStorage()._videoDoublerUses = nil}

  var droneTakedowns: UInt64 {
    get {return _storage._droneTakedowns ?? 0}
    set {_uniqueStorage()._droneTakedowns = newValue}
  }
  /// Returns true if `droneTakedowns` has been explicitly set.
  var hasDroneTakedowns: Bool {return _storage._droneTakedowns != nil}
  /// Clears the value of `droneTakedowns`. Subsequent reads from it will return its default value.
  mutating func clearDroneTakedowns() {_uniqueStorage()._droneTakedowns = nil}

  var droneTakedownsElite: UInt64 {
    get {return _storage._droneTakedownsElite ?? 0}
    set {_uniqueStorage()._droneTakedownsElite = newValue}
  }
  /// Returns true if `droneTakedownsElite` has been explicitly set.
  var hasDroneTakedownsElite: Bool {return _storage._droneTakedownsElite != nil}
  /// Clears the value of `droneTakedownsElite`. Subsequent reads from it will return its default value.
  mutating func clearDroneTakedownsElite() {_uniqueStorage()._droneTakedownsElite = nil}

  var trophiesUnlocked: Bool {
    get {return _storage._trophiesUnlocked ?? false}
    set {_uniqueStorage()._trophiesUnlocked = newValue}
  }
  /// Returns true if `trophiesUnlocked` has been explicitly set.
  var hasTrophiesUnlocked: Bool {return _storage._trophiesUnlocked != nil}
  /// Clears the value of `trophiesUnlocked`. Subsequent reads from it will return its default value.
  mutating func clearTrophiesUnlocked() {_uniqueStorage()._trophiesUnlocked = nil}

  var eggLevel: Float {
    get {return _storage._eggLevel ?? 0}
    set {_uniqueStorage()._eggLevel = newValue}
  }
  /// Returns true if `eggLevel` has been explicitly set.
  var hasEggLevel: Bool {return _storage._eggLevel != nil}
  /// Clears the value of `eggLevel`. Subsequent reads from it will return its default value.
  mutating func clearEggLevel() {_uniqueStorage()._eggLevel = nil}

  var struggleFactor: Float {
    get {return _storage._struggleFactor ?? 0}
    set {_uniqueStorage()._struggleFactor = newValue}
  }
  /// Returns true if `struggleFactor` has been explicitly set.
  var hasStruggleFactor: Bool {return _storage._struggleFactor != nil}
  /// Clears the value of `struggleFactor`. Subsequent reads from it will return its default value.
  mutating func clearStruggleFactor() {_uniqueStorage()._struggleFactor = nil}

  var piggyFull: Bool {
    get {return _storage._piggyFull ?? false}
    set {_uniqueStorage()._piggyFull = newValue}
  }
  /// Returns true if `piggyFull` has been explicitly set.
  var hasPiggyFull: Bool {return _storage._piggyFull != nil}
  /// Clears the value of `piggyFull`. Subsequent reads from it will return its default value.
  mutating func clearPiggyFull() {_uniqueStorage()._piggyFull = nil}

  var piggyFoundFull: Bool {
    get {return _storage._piggyFoundFull ?? false}
    set {_uniqueStorage()._piggyFoundFull = newValue}
  }
  /// Returns true if `piggyFoundFull` has been explicitly set.
  var hasPiggyFoundFull: Bool {return _storage._piggyFoundFull != nil}
  /// Clears the value of `piggyFoundFull`. Subsequent reads from it will return its default value.
  mutating func clearPiggyFoundFull() {_uniqueStorage()._piggyFoundFull = nil}

  var timePiggyFullRealtime: Double {
    get {return _storage._timePiggyFullRealtime ?? 0}
    set {_uniqueStorage()._timePiggyFullRealtime = newValue}
  }
  /// Returns true if `timePiggyFullRealtime` has been explicitly set.
  var hasTimePiggyFullRealtime: Bool {return _storage._timePiggyFullRealtime != nil}
  /// Clears the value of `timePiggyFullRealtime`. Subsequent reads from it will return its default value.
  mutating func clearTimePiggyFullRealtime() {_uniqueStorage()._timePiggyFullRealtime = nil}

  var timePiggyFullGametime: Double {
    get {return _storage._timePiggyFullGametime ?? 0}
    set {_uniqueStorage()._timePiggyFullGametime = newValue}
  }
  /// Returns true if `timePiggyFullGametime` has been explicitly set.
  var hasTimePiggyFullGametime: Bool {return _storage._timePiggyFullGametime != nil}
  /// Clears the value of `timePiggyFullGametime`. Subsequent reads from it will return its default value.
  mutating func clearTimePiggyFullGametime() {_uniqueStorage()._timePiggyFullGametime = nil}

  var lostPiggyIncrements: UInt64 {
    get {return _storage._lostPiggyIncrements ?? 0}
    set {_uniqueStorage()._lostPiggyIncrements = newValue}
  }
  /// Returns true if `lostPiggyIncrements` has been explicitly set.
  var hasLostPiggyIncrements: Bool {return _storage._lostPiggyIncrements != nil}
  /// Clears the value of `lostPiggyIncrements`. Subsequent reads from it will return its default value.
  mutating func clearLostPiggyIncrements() {_uniqueStorage()._lostPiggyIncrements = nil}

  var saleID: String {
    get {return _storage._saleID ?? String()}
    set {_uniqueStorage()._saleID = newValue}
  }
  /// Returns true if `saleID` has been explicitly set.
  var hasSaleID: Bool {return _storage._saleID != nil}
  /// Clears the value of `saleID`. Subsequent reads from it will return its default value.
  mutating func clearSaleID() {_uniqueStorage()._saleID = nil}

  var unlimitedChickensUses: UInt64 {
    get {return _storage._unlimitedChickensUses ?? 0}
    set {_uniqueStorage()._unlimitedChickensUses = newValue}
  }
  /// Returns true if `unlimitedChickensUses` has been explicitly set.
  var hasUnlimitedChickensUses: Bool {return _storage._unlimitedChickensUses != nil}
  /// Clears the value of `unlimitedChickensUses`. Subsequent reads from it will return its default value.
  mutating func clearUnlimitedChickensUses() {_uniqueStorage()._unlimitedChickensUses = nil}

  var refillUses: UInt64 {
    get {return _storage._refillUses ?? 0}
    set {_uniqueStorage()._refillUses = newValue}
  }
  /// Returns true if `refillUses` has been explicitly set.
  var hasRefillUses: Bool {return _storage._refillUses != nil}
  /// Clears the value of `refillUses`. Subsequent reads from it will return its default value.
  mutating func clearRefillUses() {_uniqueStorage()._refillUses = nil}

  var shortWarpUses: UInt64 {
    get {return _storage._shortWarpUses ?? 0}
    set {_uniqueStorage()._shortWarpUses = newValue}
  }
  /// Returns true if `shortWarpUses` has been explicitly set.
  var hasShortWarpUses: Bool {return _storage._shortWarpUses != nil}
  /// Clears the value of `shortWarpUses`. Subsequent reads from it will return its default value.
  mutating func clearShortWarpUses() {_uniqueStorage()._shortWarpUses = nil}

  var longWarpUses: UInt64 {
    get {return _storage._longWarpUses ?? 0}
    set {_uniqueStorage()._longWarpUses = newValue}
  }
  /// Returns true if `longWarpUses` has been explicitly set.
  var hasLongWarpUses: Bool {return _storage._longWarpUses != nil}
  /// Clears the value of `longWarpUses`. Subsequent reads from it will return its default value.
  mutating func clearLongWarpUses() {_uniqueStorage()._longWarpUses = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ActionKeyValuePair: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var key: String {
    get {return _key ?? String()}
    set {_key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return self._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {self._key = nil}

  var value: String {
    get {return _value ?? String()}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _key: String? = nil
  fileprivate var _value: String? = nil
}

struct Ei_GenericAction: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var ccUser: Bool {
    get {return _storage._ccUser ?? false}
    set {_uniqueStorage()._ccUser = newValue}
  }
  /// Returns true if `ccUser` has been explicitly set.
  var hasCcUser: Bool {return _storage._ccUser != nil}
  /// Clears the value of `ccUser`. Subsequent reads from it will return its default value.
  mutating func clearCcUser() {_uniqueStorage()._ccUser = nil}

  var advertisingID: String {
    get {return _storage._advertisingID ?? String()}
    set {_uniqueStorage()._advertisingID = newValue}
  }
  /// Returns true if `advertisingID` has been explicitly set.
  var hasAdvertisingID: Bool {return _storage._advertisingID != nil}
  /// Clears the value of `advertisingID`. Subsequent reads from it will return its default value.
  mutating func clearAdvertisingID() {_uniqueStorage()._advertisingID = nil}

  var approxTimeDep: Float {
    get {return _storage._approxTimeDep ?? 0}
    set {_uniqueStorage()._approxTimeDep = newValue}
  }
  /// Returns true if `approxTimeDep` has been explicitly set.
  var hasApproxTimeDep: Bool {return _storage._approxTimeDep != nil}
  /// Clears the value of `approxTimeDep`. Subsequent reads from it will return its default value.
  mutating func clearApproxTimeDep() {_uniqueStorage()._approxTimeDep = nil}

  var approxTime: Double {
    get {return _storage._approxTime ?? 0}
    set {_uniqueStorage()._approxTime = newValue}
  }
  /// Returns true if `approxTime` has been explicitly set.
  var hasApproxTime: Bool {return _storage._approxTime != nil}
  /// Clears the value of `approxTime`. Subsequent reads from it will return its default value.
  mutating func clearApproxTime() {_uniqueStorage()._approxTime = nil}

  var actionName: String {
    get {return _storage._actionName ?? String()}
    set {_uniqueStorage()._actionName = newValue}
  }
  /// Returns true if `actionName` has been explicitly set.
  var hasActionName: Bool {return _storage._actionName != nil}
  /// Clears the value of `actionName`. Subsequent reads from it will return its default value.
  mutating func clearActionName() {_uniqueStorage()._actionName = nil}

  var data: [Ei_ActionKeyValuePair] {
    get {return _storage._data}
    set {_uniqueStorage()._data = newValue}
  }

  var app: Ei_AppInfo {
    get {return _storage._app ?? Ei_AppInfo()}
    set {_uniqueStorage()._app = newValue}
  }
  /// Returns true if `app` has been explicitly set.
  var hasApp: Bool {return _storage._app != nil}
  /// Clears the value of `app`. Subsequent reads from it will return its default value.
  mutating func clearApp() {_uniqueStorage()._app = nil}

  var device: Ei_DeviceInfo {
    get {return _storage._device ?? Ei_DeviceInfo()}
    set {_uniqueStorage()._device = newValue}
  }
  /// Returns true if `device` has been explicitly set.
  var hasDevice: Bool {return _storage._device != nil}
  /// Clears the value of `device`. Subsequent reads from it will return its default value.
  mutating func clearDevice() {_uniqueStorage()._device = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_GenericActionBatchRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var actions: [Ei_GenericAction] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
}

struct Ei_VerifyPurchaseRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var sku: String {
    get {return _sku ?? String()}
    set {_sku = newValue}
  }
  /// Returns true if `sku` has been explicitly set.
  var hasSku: Bool {return self._sku != nil}
  /// Clears the value of `sku`. Subsequent reads from it will return its default value.
  mutating func clearSku() {self._sku = nil}

  var transactionID: String {
    get {return _transactionID ?? String()}
    set {_transactionID = newValue}
  }
  /// Returns true if `transactionID` has been explicitly set.
  var hasTransactionID: Bool {return self._transactionID != nil}
  /// Clears the value of `transactionID`. Subsequent reads from it will return its default value.
  mutating func clearTransactionID() {self._transactionID = nil}

  var originalTransactionID: String {
    get {return _originalTransactionID ?? String()}
    set {_originalTransactionID = newValue}
  }
  /// Returns true if `originalTransactionID` has been explicitly set.
  var hasOriginalTransactionID: Bool {return self._originalTransactionID != nil}
  /// Clears the value of `originalTransactionID`. Subsequent reads from it will return its default value.
  mutating func clearOriginalTransactionID() {self._originalTransactionID = nil}

  var receipt: String {
    get {return _receipt ?? String()}
    set {_receipt = newValue}
  }
  /// Returns true if `receipt` has been explicitly set.
  var hasReceipt: Bool {return self._receipt != nil}
  /// Clears the value of `receipt`. Subsequent reads from it will return its default value.
  mutating func clearReceipt() {self._receipt = nil}

  var platform: String {
    get {return _platform ?? String()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  var sandbox: Bool {
    get {return _sandbox ?? false}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  mutating func clearSandbox() {self._sandbox = nil}

  var log: Ei_GenericAction {
    get {return _log ?? Ei_GenericAction()}
    set {_log = newValue}
  }
  /// Returns true if `log` has been explicitly set.
  var hasLog: Bool {return self._log != nil}
  /// Clears the value of `log`. Subsequent reads from it will return its default value.
  mutating func clearLog() {self._log = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _sku: String? = nil
  fileprivate var _transactionID: String? = nil
  fileprivate var _originalTransactionID: String? = nil
  fileprivate var _receipt: String? = nil
  fileprivate var _platform: String? = nil
  fileprivate var _sandbox: Bool? = nil
  fileprivate var _log: Ei_GenericAction? = nil
}

struct Ei_VerifyPurchaseResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var verified: Bool {
    get {return _verified ?? false}
    set {_verified = newValue}
  }
  /// Returns true if `verified` has been explicitly set.
  var hasVerified: Bool {return self._verified != nil}
  /// Clears the value of `verified`. Subsequent reads from it will return its default value.
  mutating func clearVerified() {self._verified = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _verified: Bool? = nil
  fileprivate var _message: String? = nil
}

struct Ei_CurrencyFlowLog: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var approxTime: Double {
    get {return _approxTime ?? 0}
    set {_approxTime = newValue}
  }
  /// Returns true if `approxTime` has been explicitly set.
  var hasApproxTime: Bool {return self._approxTime != nil}
  /// Clears the value of `approxTime`. Subsequent reads from it will return its default value.
  mutating func clearApproxTime() {self._approxTime = nil}

  var currency: Ei_RewardType {
    get {return _currency ?? .cash}
    set {_currency = newValue}
  }
  /// Returns true if `currency` has been explicitly set.
  var hasCurrency: Bool {return self._currency != nil}
  /// Clears the value of `currency`. Subsequent reads from it will return its default value.
  mutating func clearCurrency() {self._currency = nil}

  var amount: Int64 {
    get {return _amount ?? 0}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var location: String {
    get {return _location ?? String()}
    set {_location = newValue}
  }
  /// Returns true if `location` has been explicitly set.
  var hasLocation: Bool {return self._location != nil}
  /// Clears the value of `location`. Subsequent reads from it will return its default value.
  mutating func clearLocation() {self._location = nil}

  var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var platform: String {
    get {return _platform ?? String()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  var soulEggs: Double {
    get {return _soulEggs ?? 0}
    set {_soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return self._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {self._soulEggs = nil}

  var ticketsSpent: UInt64 {
    get {return _ticketsSpent ?? 0}
    set {_ticketsSpent = newValue}
  }
  /// Returns true if `ticketsSpent` has been explicitly set.
  var hasTicketsSpent: Bool {return self._ticketsSpent != nil}
  /// Clears the value of `ticketsSpent`. Subsequent reads from it will return its default value.
  mutating func clearTicketsSpent() {self._ticketsSpent = nil}

  var goldSpent: UInt64 {
    get {return _goldSpent ?? 0}
    set {_goldSpent = newValue}
  }
  /// Returns true if `goldSpent` has been explicitly set.
  var hasGoldSpent: Bool {return self._goldSpent != nil}
  /// Clears the value of `goldSpent`. Subsequent reads from it will return its default value.
  mutating func clearGoldSpent() {self._goldSpent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: String? = nil
  fileprivate var _approxTime: Double? = nil
  fileprivate var _currency: Ei_RewardType? = nil
  fileprivate var _amount: Int64? = nil
  fileprivate var _location: String? = nil
  fileprivate var _version: String? = nil
  fileprivate var _platform: String? = nil
  fileprivate var _soulEggs: Double? = nil
  fileprivate var _ticketsSpent: UInt64? = nil
  fileprivate var _goldSpent: UInt64? = nil
}

struct Ei_CurrencyFlowBatchRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var logs: [Ei_CurrencyFlowLog] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
}

struct Ei_Reward: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rewardType: Ei_RewardType {
    get {return _rewardType ?? .cash}
    set {_rewardType = newValue}
  }
  /// Returns true if `rewardType` has been explicitly set.
  var hasRewardType: Bool {return self._rewardType != nil}
  /// Clears the value of `rewardType`. Subsequent reads from it will return its default value.
  mutating func clearRewardType() {self._rewardType = nil}

  var rewardSubType: String {
    get {return _rewardSubType ?? String()}
    set {_rewardSubType = newValue}
  }
  /// Returns true if `rewardSubType` has been explicitly set.
  var hasRewardSubType: Bool {return self._rewardSubType != nil}
  /// Clears the value of `rewardSubType`. Subsequent reads from it will return its default value.
  mutating func clearRewardSubType() {self._rewardSubType = nil}

  var rewardAmount: Double {
    get {return _rewardAmount ?? 0}
    set {_rewardAmount = newValue}
  }
  /// Returns true if `rewardAmount` has been explicitly set.
  var hasRewardAmount: Bool {return self._rewardAmount != nil}
  /// Clears the value of `rewardAmount`. Subsequent reads from it will return its default value.
  mutating func clearRewardAmount() {self._rewardAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rewardType: Ei_RewardType? = nil
  fileprivate var _rewardSubType: String? = nil
  fileprivate var _rewardAmount: Double? = nil
}

struct Ei_GameModifier: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var dimension: Ei_GameModifier.GameDimension {
    get {return _dimension ?? .invalid}
    set {_dimension = newValue}
  }
  /// Returns true if `dimension` has been explicitly set.
  var hasDimension: Bool {return self._dimension != nil}
  /// Clears the value of `dimension`. Subsequent reads from it will return its default value.
  mutating func clearDimension() {self._dimension = nil}

  var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum GameDimension: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case invalid = 0
    case earnings = 1
    case awayEarnings = 2
    case internalHatcheryRate = 3
    case eggLayingRate = 4
    case shippingCapacity = 5
    case habCapacity = 6
    case vehicleCost = 7
    case habCost = 8
    case researchCost = 9

    init() {
      self = .invalid
    }

  }

  init() {}

  fileprivate var _dimension: Ei_GameModifier.GameDimension? = nil
  fileprivate var _value: Double? = nil
  fileprivate var _description_p: String? = nil
}

struct Ei_CustomEgg: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var description_p: String {
    get {return _description_p ?? String()}
    set {_description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return self._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {self._description_p = nil}

  var value: Double {
    get {return _value ?? 0}
    set {_value = newValue}
  }
  /// Returns true if `value` has been explicitly set.
  var hasValue: Bool {return self._value != nil}
  /// Clears the value of `value`. Subsequent reads from it will return its default value.
  mutating func clearValue() {self._value = nil}

  var hatcheryID: String {
    get {return _hatcheryID ?? String()}
    set {_hatcheryID = newValue}
  }
  /// Returns true if `hatcheryID` has been explicitly set.
  var hasHatcheryID: Bool {return self._hatcheryID != nil}
  /// Clears the value of `hatcheryID`. Subsequent reads from it will return its default value.
  mutating func clearHatcheryID() {self._hatcheryID = nil}

  var hatcheryMaxX: Double {
    get {return _hatcheryMaxX ?? 0}
    set {_hatcheryMaxX = newValue}
  }
  /// Returns true if `hatcheryMaxX` has been explicitly set.
  var hasHatcheryMaxX: Bool {return self._hatcheryMaxX != nil}
  /// Clears the value of `hatcheryMaxX`. Subsequent reads from it will return its default value.
  mutating func clearHatcheryMaxX() {self._hatcheryMaxX = nil}

  var icon: Ei_DLCItem {
    get {return _icon ?? Ei_DLCItem()}
    set {_icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return self._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {self._icon = nil}

  var iconWidth: Double {
    get {return _iconWidth ?? 0}
    set {_iconWidth = newValue}
  }
  /// Returns true if `iconWidth` has been explicitly set.
  var hasIconWidth: Bool {return self._iconWidth != nil}
  /// Clears the value of `iconWidth`. Subsequent reads from it will return its default value.
  mutating func clearIconWidth() {self._iconWidth = nil}

  var iconHeight: Double {
    get {return _iconHeight ?? 0}
    set {_iconHeight = newValue}
  }
  /// Returns true if `iconHeight` has been explicitly set.
  var hasIconHeight: Bool {return self._iconHeight != nil}
  /// Clears the value of `iconHeight`. Subsequent reads from it will return its default value.
  mutating func clearIconHeight() {self._iconHeight = nil}

  var buffs: [Ei_GameModifier] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identifier: String? = nil
  fileprivate var _name: String? = nil
  fileprivate var _description_p: String? = nil
  fileprivate var _value: Double? = nil
  fileprivate var _hatcheryID: String? = nil
  fileprivate var _hatcheryMaxX: Double? = nil
  fileprivate var _icon: Ei_DLCItem? = nil
  fileprivate var _iconWidth: Double? = nil
  fileprivate var _iconHeight: Double? = nil
}

struct Ei_Contract: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _storage._identifier ?? String()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  var egg: Ei_Egg {
    get {return _storage._egg ?? .edible}
    set {_uniqueStorage()._egg = newValue}
  }
  /// Returns true if `egg` has been explicitly set.
  var hasEgg: Bool {return _storage._egg != nil}
  /// Clears the value of `egg`. Subsequent reads from it will return its default value.
  mutating func clearEgg() {_uniqueStorage()._egg = nil}

  var customEggID: String {
    get {return _storage._customEggID ?? String()}
    set {_uniqueStorage()._customEggID = newValue}
  }
  /// Returns true if `customEggID` has been explicitly set.
  var hasCustomEggID: Bool {return _storage._customEggID != nil}
  /// Clears the value of `customEggID`. Subsequent reads from it will return its default value.
  mutating func clearCustomEggID() {_uniqueStorage()._customEggID = nil}

  var goals: [Ei_Contract.Goal] {
    get {return _storage._goals}
    set {_uniqueStorage()._goals = newValue}
  }

  var goalSets: [Ei_Contract.GoalSet] {
    get {return _storage._goalSets}
    set {_uniqueStorage()._goalSets = newValue}
  }

  var gradeSpecs: [Ei_Contract.GradeSpec] {
    get {return _storage._gradeSpecs}
    set {_uniqueStorage()._gradeSpecs = newValue}
  }

  var seasonID: String {
    get {return _storage._seasonID ?? String()}
    set {_uniqueStorage()._seasonID = newValue}
  }
  /// Returns true if `seasonID` has been explicitly set.
  var hasSeasonID: Bool {return _storage._seasonID != nil}
  /// Clears the value of `seasonID`. Subsequent reads from it will return its default value.
  mutating func clearSeasonID() {_uniqueStorage()._seasonID = nil}

  var coopAllowed: Bool {
    get {return _storage._coopAllowed ?? false}
    set {_uniqueStorage()._coopAllowed = newValue}
  }
  /// Returns true if `coopAllowed` has been explicitly set.
  var hasCoopAllowed: Bool {return _storage._coopAllowed != nil}
  /// Clears the value of `coopAllowed`. Subsequent reads from it will return its default value.
  mutating func clearCoopAllowed() {_uniqueStorage()._coopAllowed = nil}

  var maxCoopSize: UInt32 {
    get {return _storage._maxCoopSize ?? 0}
    set {_uniqueStorage()._maxCoopSize = newValue}
  }
  /// Returns true if `maxCoopSize` has been explicitly set.
  var hasMaxCoopSize: Bool {return _storage._maxCoopSize != nil}
  /// Clears the value of `maxCoopSize`. Subsequent reads from it will return its default value.
  mutating func clearMaxCoopSize() {_uniqueStorage()._maxCoopSize = nil}

  var maxBoosts: UInt32 {
    get {return _storage._maxBoosts ?? 0}
    set {_uniqueStorage()._maxBoosts = newValue}
  }
  /// Returns true if `maxBoosts` has been explicitly set.
  var hasMaxBoosts: Bool {return _storage._maxBoosts != nil}
  /// Clears the value of `maxBoosts`. Subsequent reads from it will return its default value.
  mutating func clearMaxBoosts() {_uniqueStorage()._maxBoosts = nil}

  var minutesPerToken: Double {
    get {return _storage._minutesPerToken ?? 60}
    set {_uniqueStorage()._minutesPerToken = newValue}
  }
  /// Returns true if `minutesPerToken` has been explicitly set.
  var hasMinutesPerToken: Bool {return _storage._minutesPerToken != nil}
  /// Clears the value of `minutesPerToken`. Subsequent reads from it will return its default value.
  mutating func clearMinutesPerToken() {_uniqueStorage()._minutesPerToken = nil}

  var chickenRunCooldownMinutes: Double {
    get {return _storage._chickenRunCooldownMinutes ?? 180}
    set {_uniqueStorage()._chickenRunCooldownMinutes = newValue}
  }
  /// Returns true if `chickenRunCooldownMinutes` has been explicitly set.
  var hasChickenRunCooldownMinutes: Bool {return _storage._chickenRunCooldownMinutes != nil}
  /// Clears the value of `chickenRunCooldownMinutes`. Subsequent reads from it will return its default value.
  mutating func clearChickenRunCooldownMinutes() {_uniqueStorage()._chickenRunCooldownMinutes = nil}

  var startTime: Double {
    get {return _storage._startTime ?? 0}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  var expirationTime: Double {
    get {return _storage._expirationTime ?? 0}
    set {_uniqueStorage()._expirationTime = newValue}
  }
  /// Returns true if `expirationTime` has been explicitly set.
  var hasExpirationTime: Bool {return _storage._expirationTime != nil}
  /// Clears the value of `expirationTime`. Subsequent reads from it will return its default value.
  mutating func clearExpirationTime() {_uniqueStorage()._expirationTime = nil}

  var lengthSeconds: Double {
    get {return _storage._lengthSeconds ?? 0}
    set {_uniqueStorage()._lengthSeconds = newValue}
  }
  /// Returns true if `lengthSeconds` has been explicitly set.
  var hasLengthSeconds: Bool {return _storage._lengthSeconds != nil}
  /// Clears the value of `lengthSeconds`. Subsequent reads from it will return its default value.
  mutating func clearLengthSeconds() {_uniqueStorage()._lengthSeconds = nil}

  var maxSoulEggs: Double {
    get {return _storage._maxSoulEggs ?? 0}
    set {_uniqueStorage()._maxSoulEggs = newValue}
  }
  /// Returns true if `maxSoulEggs` has been explicitly set.
  var hasMaxSoulEggs: Bool {return _storage._maxSoulEggs != nil}
  /// Clears the value of `maxSoulEggs`. Subsequent reads from it will return its default value.
  mutating func clearMaxSoulEggs() {_uniqueStorage()._maxSoulEggs = nil}

  var minClientVersion: UInt32 {
    get {return _storage._minClientVersion ?? 0}
    set {_uniqueStorage()._minClientVersion = newValue}
  }
  /// Returns true if `minClientVersion` has been explicitly set.
  var hasMinClientVersion: Bool {return _storage._minClientVersion != nil}
  /// Clears the value of `minClientVersion`. Subsequent reads from it will return its default value.
  mutating func clearMinClientVersion() {_uniqueStorage()._minClientVersion = nil}

  var leggacy: Bool {
    get {return _storage._leggacy ?? false}
    set {_uniqueStorage()._leggacy = newValue}
  }
  /// Returns true if `leggacy` has been explicitly set.
  var hasLeggacy: Bool {return _storage._leggacy != nil}
  /// Clears the value of `leggacy`. Subsequent reads from it will return its default value.
  mutating func clearLeggacy() {_uniqueStorage()._leggacy = nil}

  var ccOnly: Bool {
    get {return _storage._ccOnly ?? false}
    set {_uniqueStorage()._ccOnly = newValue}
  }
  /// Returns true if `ccOnly` has been explicitly set.
  var hasCcOnly: Bool {return _storage._ccOnly != nil}
  /// Clears the value of `ccOnly`. Subsequent reads from it will return its default value.
  mutating func clearCcOnly() {_uniqueStorage()._ccOnly = nil}

  var defaultShellIds: [String] {
    get {return _storage._defaultShellIds}
    set {_uniqueStorage()._defaultShellIds = newValue}
  }

  var debug: Bool {
    get {return _storage._debug ?? false}
    set {_uniqueStorage()._debug = newValue}
  }
  /// Returns true if `debug` has been explicitly set.
  var hasDebug: Bool {return _storage._debug != nil}
  /// Clears the value of `debug`. Subsequent reads from it will return its default value.
  mutating func clearDebug() {_uniqueStorage()._debug = nil}

  var key: String {
    get {return _storage._key ?? String()}
    set {_uniqueStorage()._key = newValue}
  }
  /// Returns true if `key` has been explicitly set.
  var hasKey: Bool {return _storage._key != nil}
  /// Clears the value of `key`. Subsequent reads from it will return its default value.
  mutating func clearKey() {_uniqueStorage()._key = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PlayerGrade: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case gradeUnset = 0
    case gradeC = 1
    case gradeB = 2
    case gradeA = 3
    case gradeAa = 4
    case gradeAaa = 5

    init() {
      self = .gradeUnset
    }

  }

  struct Goal: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var type: Ei_GoalType {
      get {return _type ?? .eggsLaid}
      set {_type = newValue}
    }
    /// Returns true if `type` has been explicitly set.
    var hasType: Bool {return self._type != nil}
    /// Clears the value of `type`. Subsequent reads from it will return its default value.
    mutating func clearType() {self._type = nil}

    var targetAmount: Double {
      get {return _targetAmount ?? 0}
      set {_targetAmount = newValue}
    }
    /// Returns true if `targetAmount` has been explicitly set.
    var hasTargetAmount: Bool {return self._targetAmount != nil}
    /// Clears the value of `targetAmount`. Subsequent reads from it will return its default value.
    mutating func clearTargetAmount() {self._targetAmount = nil}

    var rewardType: Ei_RewardType {
      get {return _rewardType ?? .cash}
      set {_rewardType = newValue}
    }
    /// Returns true if `rewardType` has been explicitly set.
    var hasRewardType: Bool {return self._rewardType != nil}
    /// Clears the value of `rewardType`. Subsequent reads from it will return its default value.
    mutating func clearRewardType() {self._rewardType = nil}

    var rewardSubType: String {
      get {return _rewardSubType ?? String()}
      set {_rewardSubType = newValue}
    }
    /// Returns true if `rewardSubType` has been explicitly set.
    var hasRewardSubType: Bool {return self._rewardSubType != nil}
    /// Clears the value of `rewardSubType`. Subsequent reads from it will return its default value.
    mutating func clearRewardSubType() {self._rewardSubType = nil}

    var rewardAmount: Double {
      get {return _rewardAmount ?? 0}
      set {_rewardAmount = newValue}
    }
    /// Returns true if `rewardAmount` has been explicitly set.
    var hasRewardAmount: Bool {return self._rewardAmount != nil}
    /// Clears the value of `rewardAmount`. Subsequent reads from it will return its default value.
    mutating func clearRewardAmount() {self._rewardAmount = nil}

    var targetSoulEggs: Double {
      get {return _targetSoulEggs ?? 0}
      set {_targetSoulEggs = newValue}
    }
    /// Returns true if `targetSoulEggs` has been explicitly set.
    var hasTargetSoulEggs: Bool {return self._targetSoulEggs != nil}
    /// Clears the value of `targetSoulEggs`. Subsequent reads from it will return its default value.
    mutating func clearTargetSoulEggs() {self._targetSoulEggs = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _type: Ei_GoalType? = nil
    fileprivate var _targetAmount: Double? = nil
    fileprivate var _rewardType: Ei_RewardType? = nil
    fileprivate var _rewardSubType: String? = nil
    fileprivate var _rewardAmount: Double? = nil
    fileprivate var _targetSoulEggs: Double? = nil
  }

  struct GoalSet: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var goals: [Ei_Contract.Goal] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}
  }

  struct GradeSpec: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var grade: Ei_Contract.PlayerGrade {
      get {return _grade ?? .gradeUnset}
      set {_grade = newValue}
    }
    /// Returns true if `grade` has been explicitly set.
    var hasGrade: Bool {return self._grade != nil}
    /// Clears the value of `grade`. Subsequent reads from it will return its default value.
    mutating func clearGrade() {self._grade = nil}

    var goals: [Ei_Contract.Goal] = []

    var modifiers: [Ei_GameModifier] = []

    var lengthSeconds: Double {
      get {return _lengthSeconds ?? 0}
      set {_lengthSeconds = newValue}
    }
    /// Returns true if `lengthSeconds` has been explicitly set.
    var hasLengthSeconds: Bool {return self._lengthSeconds != nil}
    /// Clears the value of `lengthSeconds`. Subsequent reads from it will return its default value.
    mutating func clearLengthSeconds() {self._lengthSeconds = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
    fileprivate var _lengthSeconds: Double? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ContractSeasonGoal: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var cxp: Double {
    get {return _cxp ?? 0}
    set {_cxp = newValue}
  }
  /// Returns true if `cxp` has been explicitly set.
  var hasCxp: Bool {return self._cxp != nil}
  /// Clears the value of `cxp`. Subsequent reads from it will return its default value.
  mutating func clearCxp() {self._cxp = nil}

  var rewardType: Ei_RewardType {
    get {return _rewardType ?? .cash}
    set {_rewardType = newValue}
  }
  /// Returns true if `rewardType` has been explicitly set.
  var hasRewardType: Bool {return self._rewardType != nil}
  /// Clears the value of `rewardType`. Subsequent reads from it will return its default value.
  mutating func clearRewardType() {self._rewardType = nil}

  var rewardSubType: String {
    get {return _rewardSubType ?? String()}
    set {_rewardSubType = newValue}
  }
  /// Returns true if `rewardSubType` has been explicitly set.
  var hasRewardSubType: Bool {return self._rewardSubType != nil}
  /// Clears the value of `rewardSubType`. Subsequent reads from it will return its default value.
  mutating func clearRewardSubType() {self._rewardSubType = nil}

  var rewardAmount: Double {
    get {return _rewardAmount ?? 0}
    set {_rewardAmount = newValue}
  }
  /// Returns true if `rewardAmount` has been explicitly set.
  var hasRewardAmount: Bool {return self._rewardAmount != nil}
  /// Clears the value of `rewardAmount`. Subsequent reads from it will return its default value.
  mutating func clearRewardAmount() {self._rewardAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _cxp: Double? = nil
  fileprivate var _rewardType: Ei_RewardType? = nil
  fileprivate var _rewardSubType: String? = nil
  fileprivate var _rewardAmount: Double? = nil
}

struct Ei_ContractSeasonRewardConfirmationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var seasonID: String {
    get {return _seasonID ?? String()}
    set {_seasonID = newValue}
  }
  /// Returns true if `seasonID` has been explicitly set.
  var hasSeasonID: Bool {return self._seasonID != nil}
  /// Clears the value of `seasonID`. Subsequent reads from it will return its default value.
  mutating func clearSeasonID() {self._seasonID = nil}

  var goal: Ei_ContractSeasonGoal {
    get {return _goal ?? Ei_ContractSeasonGoal()}
    set {_goal = newValue}
  }
  /// Returns true if `goal` has been explicitly set.
  var hasGoal: Bool {return self._goal != nil}
  /// Clears the value of `goal`. Subsequent reads from it will return its default value.
  mutating func clearGoal() {self._goal = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _seasonID: String? = nil
  fileprivate var _goal: Ei_ContractSeasonGoal? = nil
}

struct Ei_ContractSeasonInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _id ?? String()}
    set {_id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return self._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {self._id = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var startTime: Double {
    get {return _startTime ?? 0}
    set {_startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return self._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {self._startTime = nil}

  var gradeGoals: [Ei_ContractSeasonInfo.GoalSet] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct GoalSet: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var grade: Ei_Contract.PlayerGrade {
      get {return _grade ?? .gradeUnset}
      set {_grade = newValue}
    }
    /// Returns true if `grade` has been explicitly set.
    var hasGrade: Bool {return self._grade != nil}
    /// Clears the value of `grade`. Subsequent reads from it will return its default value.
    mutating func clearGrade() {self._grade = nil}

    var goals: [Ei_ContractSeasonGoal] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
  }

  init() {}

  fileprivate var _id: String? = nil
  fileprivate var _name: String? = nil
  fileprivate var _startTime: Double? = nil
}

struct Ei_ContractSeasonInfos: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var infos: [Ei_ContractSeasonInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_ContractPlayerInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var grade: Ei_Contract.PlayerGrade {
    get {return _grade ?? .gradeUnset}
    set {_grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return self._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {self._grade = nil}

  var totalCxp: Double {
    get {return _totalCxp ?? 0}
    set {_totalCxp = newValue}
  }
  /// Returns true if `totalCxp` has been explicitly set.
  var hasTotalCxp: Bool {return self._totalCxp != nil}
  /// Clears the value of `totalCxp`. Subsequent reads from it will return its default value.
  mutating func clearTotalCxp() {self._totalCxp = nil}

  var seasonCxp: Double {
    get {return _seasonCxp ?? 0}
    set {_seasonCxp = newValue}
  }
  /// Returns true if `seasonCxp` has been explicitly set.
  var hasSeasonCxp: Bool {return self._seasonCxp != nil}
  /// Clears the value of `seasonCxp`. Subsequent reads from it will return its default value.
  mutating func clearSeasonCxp() {self._seasonCxp = nil}

  var gradeScore: Double {
    get {return _gradeScore ?? 0}
    set {_gradeScore = newValue}
  }
  /// Returns true if `gradeScore` has been explicitly set.
  var hasGradeScore: Bool {return self._gradeScore != nil}
  /// Clears the value of `gradeScore`. Subsequent reads from it will return its default value.
  mutating func clearGradeScore() {self._gradeScore = nil}

  var targetGradeScore: Double {
    get {return _targetGradeScore ?? 0}
    set {_targetGradeScore = newValue}
  }
  /// Returns true if `targetGradeScore` has been explicitly set.
  var hasTargetGradeScore: Bool {return self._targetGradeScore != nil}
  /// Clears the value of `targetGradeScore`. Subsequent reads from it will return its default value.
  mutating func clearTargetGradeScore() {self._targetGradeScore = nil}

  var soulPower: Double {
    get {return _soulPower ?? 0}
    set {_soulPower = newValue}
  }
  /// Returns true if `soulPower` has been explicitly set.
  var hasSoulPower: Bool {return self._soulPower != nil}
  /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
  mutating func clearSoulPower() {self._soulPower = nil}

  var targetSoulPower: Double {
    get {return _targetSoulPower ?? 0}
    set {_targetSoulPower = newValue}
  }
  /// Returns true if `targetSoulPower` has been explicitly set.
  var hasTargetSoulPower: Bool {return self._targetSoulPower != nil}
  /// Clears the value of `targetSoulPower`. Subsequent reads from it will return its default value.
  mutating func clearTargetSoulPower() {self._targetSoulPower = nil}

  var gradeProgress: Double {
    get {return _gradeProgress ?? 0}
    set {_gradeProgress = newValue}
  }
  /// Returns true if `gradeProgress` has been explicitly set.
  var hasGradeProgress: Bool {return self._gradeProgress != nil}
  /// Clears the value of `gradeProgress`. Subsequent reads from it will return its default value.
  mutating func clearGradeProgress() {self._gradeProgress = nil}

  var issues: [Ei_ContractEvaluation.PoorBehavior] = []

  var issueScore: Double {
    get {return _issueScore ?? 0}
    set {_issueScore = newValue}
  }
  /// Returns true if `issueScore` has been explicitly set.
  var hasIssueScore: Bool {return self._issueScore != nil}
  /// Clears the value of `issueScore`. Subsequent reads from it will return its default value.
  mutating func clearIssueScore() {self._issueScore = nil}

  var status: Ei_ContractPlayerInfo.Status {
    get {return _status ?? .unknown}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var lastEvaluationTime: Double {
    get {return _lastEvaluationTime ?? 0}
    set {_lastEvaluationTime = newValue}
  }
  /// Returns true if `lastEvaluationTime` has been explicitly set.
  var hasLastEvaluationTime: Bool {return self._lastEvaluationTime != nil}
  /// Clears the value of `lastEvaluationTime`. Subsequent reads from it will return its default value.
  mutating func clearLastEvaluationTime() {self._lastEvaluationTime = nil}

  var lastEvaluationVersion: String {
    get {return _lastEvaluationVersion ?? String()}
    set {_lastEvaluationVersion = newValue}
  }
  /// Returns true if `lastEvaluationVersion` has been explicitly set.
  var hasLastEvaluationVersion: Bool {return self._lastEvaluationVersion != nil}
  /// Clears the value of `lastEvaluationVersion`. Subsequent reads from it will return its default value.
  mutating func clearLastEvaluationVersion() {self._lastEvaluationVersion = nil}

  var unreadEvaluations: [Ei_ContractEvaluation] = []

  var seasonProgress: [Ei_ContractPlayerInfo.SeasonProgress] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unknown = 0
    case calculating = 1
    case outOfDate = 2
    case incomplete = 4
    case complete = 3

    init() {
      self = .unknown
    }

  }

  struct SeasonProgress: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var seasonID: String {
      get {return _seasonID ?? String()}
      set {_seasonID = newValue}
    }
    /// Returns true if `seasonID` has been explicitly set.
    var hasSeasonID: Bool {return self._seasonID != nil}
    /// Clears the value of `seasonID`. Subsequent reads from it will return its default value.
    mutating func clearSeasonID() {self._seasonID = nil}

    var activeDep: Bool {
      get {return _activeDep ?? false}
      set {_activeDep = newValue}
    }
    /// Returns true if `activeDep` has been explicitly set.
    var hasActiveDep: Bool {return self._activeDep != nil}
    /// Clears the value of `activeDep`. Subsequent reads from it will return its default value.
    mutating func clearActiveDep() {self._activeDep = nil}

    var startingGrade: Ei_Contract.PlayerGrade {
      get {return _startingGrade ?? .gradeUnset}
      set {_startingGrade = newValue}
    }
    /// Returns true if `startingGrade` has been explicitly set.
    var hasStartingGrade: Bool {return self._startingGrade != nil}
    /// Clears the value of `startingGrade`. Subsequent reads from it will return its default value.
    mutating func clearStartingGrade() {self._startingGrade = nil}

    var totalCxp: Double {
      get {return _totalCxp ?? 0}
      set {_totalCxp = newValue}
    }
    /// Returns true if `totalCxp` has been explicitly set.
    var hasTotalCxp: Bool {return self._totalCxp != nil}
    /// Clears the value of `totalCxp`. Subsequent reads from it will return its default value.
    mutating func clearTotalCxp() {self._totalCxp = nil}

    var cxpLastRewardGiven: Double {
      get {return _cxpLastRewardGiven ?? 0}
      set {_cxpLastRewardGiven = newValue}
    }
    /// Returns true if `cxpLastRewardGiven` has been explicitly set.
    var hasCxpLastRewardGiven: Bool {return self._cxpLastRewardGiven != nil}
    /// Clears the value of `cxpLastRewardGiven`. Subsequent reads from it will return its default value.
    mutating func clearCxpLastRewardGiven() {self._cxpLastRewardGiven = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _seasonID: String? = nil
    fileprivate var _activeDep: Bool? = nil
    fileprivate var _startingGrade: Ei_Contract.PlayerGrade? = nil
    fileprivate var _totalCxp: Double? = nil
    fileprivate var _cxpLastRewardGiven: Double? = nil
  }

  init() {}

  fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
  fileprivate var _totalCxp: Double? = nil
  fileprivate var _seasonCxp: Double? = nil
  fileprivate var _gradeScore: Double? = nil
  fileprivate var _targetGradeScore: Double? = nil
  fileprivate var _soulPower: Double? = nil
  fileprivate var _targetSoulPower: Double? = nil
  fileprivate var _gradeProgress: Double? = nil
  fileprivate var _issueScore: Double? = nil
  fileprivate var _status: Ei_ContractPlayerInfo.Status? = nil
  fileprivate var _lastEvaluationTime: Double? = nil
  fileprivate var _lastEvaluationVersion: String? = nil
}

struct Ei_ContractEvaluation: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractIdentifier: String {
    get {return _storage._contractIdentifier ?? String()}
    set {_uniqueStorage()._contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return _storage._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {_uniqueStorage()._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _storage._coopIdentifier ?? String()}
    set {_uniqueStorage()._coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return _storage._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {_uniqueStorage()._coopIdentifier = nil}

  var cxp: Double {
    get {return _storage._cxp ?? 0}
    set {_uniqueStorage()._cxp = newValue}
  }
  /// Returns true if `cxp` has been explicitly set.
  var hasCxp: Bool {return _storage._cxp != nil}
  /// Clears the value of `cxp`. Subsequent reads from it will return its default value.
  mutating func clearCxp() {_uniqueStorage()._cxp = nil}

  var replay: Bool {
    get {return _storage._replay ?? false}
    set {_uniqueStorage()._replay = newValue}
  }
  /// Returns true if `replay` has been explicitly set.
  var hasReplay: Bool {return _storage._replay != nil}
  /// Clears the value of `replay`. Subsequent reads from it will return its default value.
  mutating func clearReplay() {_uniqueStorage()._replay = nil}

  var cxpChange: Double {
    get {return _storage._cxpChange ?? 0}
    set {_uniqueStorage()._cxpChange = newValue}
  }
  /// Returns true if `cxpChange` has been explicitly set.
  var hasCxpChange: Bool {return _storage._cxpChange != nil}
  /// Clears the value of `cxpChange`. Subsequent reads from it will return its default value.
  mutating func clearCxpChange() {_uniqueStorage()._cxpChange = nil}

  var gradePerformance: Int32 {
    get {return _storage._gradePerformance ?? 0}
    set {_uniqueStorage()._gradePerformance = newValue}
  }
  /// Returns true if `gradePerformance` has been explicitly set.
  var hasGradePerformance: Bool {return _storage._gradePerformance != nil}
  /// Clears the value of `gradePerformance`. Subsequent reads from it will return its default value.
  mutating func clearGradePerformance() {_uniqueStorage()._gradePerformance = nil}

  var oldLeague: Int32 {
    get {return _storage._oldLeague ?? 0}
    set {_uniqueStorage()._oldLeague = newValue}
  }
  /// Returns true if `oldLeague` has been explicitly set.
  var hasOldLeague: Bool {return _storage._oldLeague != nil}
  /// Clears the value of `oldLeague`. Subsequent reads from it will return its default value.
  mutating func clearOldLeague() {_uniqueStorage()._oldLeague = nil}

  var oldGoals: Bool {
    get {return _storage._oldGoals ?? false}
    set {_uniqueStorage()._oldGoals = newValue}
  }
  /// Returns true if `oldGoals` has been explicitly set.
  var hasOldGoals: Bool {return _storage._oldGoals != nil}
  /// Clears the value of `oldGoals`. Subsequent reads from it will return its default value.
  mutating func clearOldGoals() {_uniqueStorage()._oldGoals = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _storage._grade ?? .gradeUnset}
    set {_uniqueStorage()._grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return _storage._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {_uniqueStorage()._grade = nil}

  var contributionRatio: Double {
    get {return _storage._contributionRatio ?? 0}
    set {_uniqueStorage()._contributionRatio = newValue}
  }
  /// Returns true if `contributionRatio` has been explicitly set.
  var hasContributionRatio: Bool {return _storage._contributionRatio != nil}
  /// Clears the value of `contributionRatio`. Subsequent reads from it will return its default value.
  mutating func clearContributionRatio() {_uniqueStorage()._contributionRatio = nil}

  var completionPercent: Double {
    get {return _storage._completionPercent ?? 0}
    set {_uniqueStorage()._completionPercent = newValue}
  }
  /// Returns true if `completionPercent` has been explicitly set.
  var hasCompletionPercent: Bool {return _storage._completionPercent != nil}
  /// Clears the value of `completionPercent`. Subsequent reads from it will return its default value.
  mutating func clearCompletionPercent() {_uniqueStorage()._completionPercent = nil}

  var originalLength: Double {
    get {return _storage._originalLength ?? 0}
    set {_uniqueStorage()._originalLength = newValue}
  }
  /// Returns true if `originalLength` has been explicitly set.
  var hasOriginalLength: Bool {return _storage._originalLength != nil}
  /// Clears the value of `originalLength`. Subsequent reads from it will return its default value.
  mutating func clearOriginalLength() {_uniqueStorage()._originalLength = nil}

  var coopSize: UInt32 {
    get {return _storage._coopSize ?? 0}
    set {_uniqueStorage()._coopSize = newValue}
  }
  /// Returns true if `coopSize` has been explicitly set.
  var hasCoopSize: Bool {return _storage._coopSize != nil}
  /// Clears the value of `coopSize`. Subsequent reads from it will return its default value.
  mutating func clearCoopSize() {_uniqueStorage()._coopSize = nil}

  var solo: Bool {
    get {return _storage._solo ?? false}
    set {_uniqueStorage()._solo = newValue}
  }
  /// Returns true if `solo` has been explicitly set.
  var hasSolo: Bool {return _storage._solo != nil}
  /// Clears the value of `solo`. Subsequent reads from it will return its default value.
  mutating func clearSolo() {_uniqueStorage()._solo = nil}

  var soulPower: Double {
    get {return _storage._soulPower ?? 0}
    set {_uniqueStorage()._soulPower = newValue}
  }
  /// Returns true if `soulPower` has been explicitly set.
  var hasSoulPower: Bool {return _storage._soulPower != nil}
  /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
  mutating func clearSoulPower() {_uniqueStorage()._soulPower = nil}

  var lastContributionTime: Double {
    get {return _storage._lastContributionTime ?? 0}
    set {_uniqueStorage()._lastContributionTime = newValue}
  }
  /// Returns true if `lastContributionTime` has been explicitly set.
  var hasLastContributionTime: Bool {return _storage._lastContributionTime != nil}
  /// Clears the value of `lastContributionTime`. Subsequent reads from it will return its default value.
  mutating func clearLastContributionTime() {_uniqueStorage()._lastContributionTime = nil}

  var completionTime: Double {
    get {return _storage._completionTime ?? 0}
    set {_uniqueStorage()._completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return _storage._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {_uniqueStorage()._completionTime = nil}

  var chickenRunsSent: UInt32 {
    get {return _storage._chickenRunsSent ?? 0}
    set {_uniqueStorage()._chickenRunsSent = newValue}
  }
  /// Returns true if `chickenRunsSent` has been explicitly set.
  var hasChickenRunsSent: Bool {return _storage._chickenRunsSent != nil}
  /// Clears the value of `chickenRunsSent`. Subsequent reads from it will return its default value.
  mutating func clearChickenRunsSent() {_uniqueStorage()._chickenRunsSent = nil}

  var giftTokensSent: UInt32 {
    get {return _storage._giftTokensSent ?? 0}
    set {_uniqueStorage()._giftTokensSent = newValue}
  }
  /// Returns true if `giftTokensSent` has been explicitly set.
  var hasGiftTokensSent: Bool {return _storage._giftTokensSent != nil}
  /// Clears the value of `giftTokensSent`. Subsequent reads from it will return its default value.
  mutating func clearGiftTokensSent() {_uniqueStorage()._giftTokensSent = nil}

  var giftTokensReceived: UInt32 {
    get {return _storage._giftTokensReceived ?? 0}
    set {_uniqueStorage()._giftTokensReceived = newValue}
  }
  /// Returns true if `giftTokensReceived` has been explicitly set.
  var hasGiftTokensReceived: Bool {return _storage._giftTokensReceived != nil}
  /// Clears the value of `giftTokensReceived`. Subsequent reads from it will return its default value.
  mutating func clearGiftTokensReceived() {_uniqueStorage()._giftTokensReceived = nil}

  var giftTokenValueSent: Double {
    get {return _storage._giftTokenValueSent ?? 0}
    set {_uniqueStorage()._giftTokenValueSent = newValue}
  }
  /// Returns true if `giftTokenValueSent` has been explicitly set.
  var hasGiftTokenValueSent: Bool {return _storage._giftTokenValueSent != nil}
  /// Clears the value of `giftTokenValueSent`. Subsequent reads from it will return its default value.
  mutating func clearGiftTokenValueSent() {_uniqueStorage()._giftTokenValueSent = nil}

  var giftTokenValueReceived: Double {
    get {return _storage._giftTokenValueReceived ?? 0}
    set {_uniqueStorage()._giftTokenValueReceived = newValue}
  }
  /// Returns true if `giftTokenValueReceived` has been explicitly set.
  var hasGiftTokenValueReceived: Bool {return _storage._giftTokenValueReceived != nil}
  /// Clears the value of `giftTokenValueReceived`. Subsequent reads from it will return its default value.
  mutating func clearGiftTokenValueReceived() {_uniqueStorage()._giftTokenValueReceived = nil}

  var boostTokenAllotment: UInt32 {
    get {return _storage._boostTokenAllotment ?? 0}
    set {_uniqueStorage()._boostTokenAllotment = newValue}
  }
  /// Returns true if `boostTokenAllotment` has been explicitly set.
  var hasBoostTokenAllotment: Bool {return _storage._boostTokenAllotment != nil}
  /// Clears the value of `boostTokenAllotment`. Subsequent reads from it will return its default value.
  mutating func clearBoostTokenAllotment() {_uniqueStorage()._boostTokenAllotment = nil}

  var buffTimeValue: Double {
    get {return _storage._buffTimeValue ?? 0}
    set {_uniqueStorage()._buffTimeValue = newValue}
  }
  /// Returns true if `buffTimeValue` has been explicitly set.
  var hasBuffTimeValue: Bool {return _storage._buffTimeValue != nil}
  /// Clears the value of `buffTimeValue`. Subsequent reads from it will return its default value.
  mutating func clearBuffTimeValue() {_uniqueStorage()._buffTimeValue = nil}

  var teamworkScore: Double {
    get {return _storage._teamworkScore ?? 0}
    set {_uniqueStorage()._teamworkScore = newValue}
  }
  /// Returns true if `teamworkScore` has been explicitly set.
  var hasTeamworkScore: Bool {return _storage._teamworkScore != nil}
  /// Clears the value of `teamworkScore`. Subsequent reads from it will return its default value.
  mutating func clearTeamworkScore() {_uniqueStorage()._teamworkScore = nil}

  var otherBonuses: Double {
    get {return _storage._otherBonuses ?? 0}
    set {_uniqueStorage()._otherBonuses = newValue}
  }
  /// Returns true if `otherBonuses` has been explicitly set.
  var hasOtherBonuses: Bool {return _storage._otherBonuses != nil}
  /// Clears the value of `otherBonuses`. Subsequent reads from it will return its default value.
  mutating func clearOtherBonuses() {_uniqueStorage()._otherBonuses = nil}

  var countedInSeason: Bool {
    get {return _storage._countedInSeason ?? false}
    set {_uniqueStorage()._countedInSeason = newValue}
  }
  /// Returns true if `countedInSeason` has been explicitly set.
  var hasCountedInSeason: Bool {return _storage._countedInSeason != nil}
  /// Clears the value of `countedInSeason`. Subsequent reads from it will return its default value.
  mutating func clearCountedInSeason() {_uniqueStorage()._countedInSeason = nil}

  var seasonID: String {
    get {return _storage._seasonID ?? String()}
    set {_uniqueStorage()._seasonID = newValue}
  }
  /// Returns true if `seasonID` has been explicitly set.
  var hasSeasonID: Bool {return _storage._seasonID != nil}
  /// Clears the value of `seasonID`. Subsequent reads from it will return its default value.
  mutating func clearSeasonID() {_uniqueStorage()._seasonID = nil}

  var timeCheats: UInt32 {
    get {return _storage._timeCheats ?? 0}
    set {_uniqueStorage()._timeCheats = newValue}
  }
  /// Returns true if `timeCheats` has been explicitly set.
  var hasTimeCheats: Bool {return _storage._timeCheats != nil}
  /// Clears the value of `timeCheats`. Subsequent reads from it will return its default value.
  mutating func clearTimeCheats() {_uniqueStorage()._timeCheats = nil}

  var extraPlayers: UInt32 {
    get {return _storage._extraPlayers ?? 0}
    set {_uniqueStorage()._extraPlayers = newValue}
  }
  /// Returns true if `extraPlayers` has been explicitly set.
  var hasExtraPlayers: Bool {return _storage._extraPlayers != nil}
  /// Clears the value of `extraPlayers`. Subsequent reads from it will return its default value.
  mutating func clearExtraPlayers() {_uniqueStorage()._extraPlayers = nil}

  var issues: [Ei_ContractEvaluation.PoorBehavior] {
    get {return _storage._issues}
    set {_uniqueStorage()._issues = newValue}
  }

  var notes: [String] {
    get {return _storage._notes}
    set {_uniqueStorage()._notes = newValue}
  }

  var version: String {
    get {return _storage._version ?? String()}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {_uniqueStorage()._version = nil}

  var evaluationStartTime: Double {
    get {return _storage._evaluationStartTime ?? 0}
    set {_uniqueStorage()._evaluationStartTime = newValue}
  }
  /// Returns true if `evaluationStartTime` has been explicitly set.
  var hasEvaluationStartTime: Bool {return _storage._evaluationStartTime != nil}
  /// Clears the value of `evaluationStartTime`. Subsequent reads from it will return its default value.
  mutating func clearEvaluationStartTime() {_uniqueStorage()._evaluationStartTime = nil}

  var status: Ei_ContractEvaluation.Status {
    get {return _storage._status ?? .unknown}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum PoorBehavior: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case none = 0
    case lowContribution = 1
    case badContribution = 2
    case dishonorablyDischarged = 3
    case poorTeamwork = 4
    case abandonedCoop = 5
    case timeCheat = 6

    init() {
      self = .none
    }

  }

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unknown = 0
    case pending = 1
    case evaluating = 2
    case complete = 3

    init() {
      self = .unknown
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ContractCitation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var issue: Ei_ContractEvaluation.PoorBehavior {
    get {return _issue ?? .none}
    set {_issue = newValue}
  }
  /// Returns true if `issue` has been explicitly set.
  var hasIssue: Bool {return self._issue != nil}
  /// Clears the value of `issue`. Subsequent reads from it will return its default value.
  mutating func clearIssue() {self._issue = nil}

  var timestamp: Double {
    get {return _timestamp ?? 0}
    set {_timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return self._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {self._timestamp = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _grade ?? .gradeUnset}
    set {_grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return self._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {self._grade = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _issue: Ei_ContractEvaluation.PoorBehavior? = nil
  fileprivate var _timestamp: Double? = nil
  fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
}

struct Ei_ContractEvaluationBatch: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var evals: [Ei_ContractEvaluationBatch.Pair] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Pair: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: String {
      get {return _userID ?? String()}
      set {_userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
    var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    mutating func clearUserID() {self._userID = nil}

    var cev: Ei_ContractEvaluation {
      get {return _cev ?? Ei_ContractEvaluation()}
      set {_cev = newValue}
    }
    /// Returns true if `cev` has been explicitly set.
    var hasCev: Bool {return self._cev != nil}
    /// Clears the value of `cev`. Subsequent reads from it will return its default value.
    mutating func clearCev() {self._cev = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _userID: String? = nil
    fileprivate var _cev: Ei_ContractEvaluation? = nil
  }

  init() {}
}

struct Ei_CoopCompletionSnapshot: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contributors: [Ei_CoopCompletionSnapshot.ContributorSnapshot] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ContributorSnapshot: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var contribution: Double {
      get {return _contribution ?? 0}
      set {_contribution = newValue}
    }
    /// Returns true if `contribution` has been explicitly set.
    var hasContribution: Bool {return self._contribution != nil}
    /// Clears the value of `contribution`. Subsequent reads from it will return its default value.
    mutating func clearContribution() {self._contribution = nil}

    var totalStepTime: Double {
      get {return _totalStepTime ?? 0}
      set {_totalStepTime = newValue}
    }
    /// Returns true if `totalStepTime` has been explicitly set.
    var hasTotalStepTime: Bool {return self._totalStepTime != nil}
    /// Clears the value of `totalStepTime`. Subsequent reads from it will return its default value.
    mutating func clearTotalStepTime() {self._totalStepTime = nil}

    var lastContributionTime: Double {
      get {return _lastContributionTime ?? 0}
      set {_lastContributionTime = newValue}
    }
    /// Returns true if `lastContributionTime` has been explicitly set.
    var hasLastContributionTime: Bool {return self._lastContributionTime != nil}
    /// Clears the value of `lastContributionTime`. Subsequent reads from it will return its default value.
    mutating func clearLastContributionTime() {self._lastContributionTime = nil}

    var finalized: Bool {
      get {return _finalized ?? false}
      set {_finalized = newValue}
    }
    /// Returns true if `finalized` has been explicitly set.
    var hasFinalized: Bool {return self._finalized != nil}
    /// Clears the value of `finalized`. Subsequent reads from it will return its default value.
    mutating func clearFinalized() {self._finalized = nil}

    var soulPower: Double {
      get {return _soulPower ?? 0}
      set {_soulPower = newValue}
    }
    /// Returns true if `soulPower` has been explicitly set.
    var hasSoulPower: Bool {return self._soulPower != nil}
    /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
    mutating func clearSoulPower() {self._soulPower = nil}

    var userID: String {
      get {return _userID ?? String()}
      set {_userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
    var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    mutating func clearUserID() {self._userID = nil}

    var tokens: UInt32 {
      get {return _tokens ?? 0}
      set {_tokens = newValue}
    }
    /// Returns true if `tokens` has been explicitly set.
    var hasTokens: Bool {return self._tokens != nil}
    /// Clears the value of `tokens`. Subsequent reads from it will return its default value.
    mutating func clearTokens() {self._tokens = nil}

    var tokensSpent: UInt32 {
      get {return _tokensSpent ?? 0}
      set {_tokensSpent = newValue}
    }
    /// Returns true if `tokensSpent` has been explicitly set.
    var hasTokensSpent: Bool {return self._tokensSpent != nil}
    /// Clears the value of `tokensSpent`. Subsequent reads from it will return its default value.
    mutating func clearTokensSpent() {self._tokensSpent = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _contribution: Double? = nil
    fileprivate var _totalStepTime: Double? = nil
    fileprivate var _lastContributionTime: Double? = nil
    fileprivate var _finalized: Bool? = nil
    fileprivate var _soulPower: Double? = nil
    fileprivate var _userID: String? = nil
    fileprivate var _tokens: UInt32? = nil
    fileprivate var _tokensSpent: UInt32? = nil
  }

  init() {}
}

struct Ei_BasicRequestInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var version: String {
    get {return _version ?? String()}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var build: String {
    get {return _build ?? String()}
    set {_build = newValue}
  }
  /// Returns true if `build` has been explicitly set.
  var hasBuild: Bool {return self._build != nil}
  /// Clears the value of `build`. Subsequent reads from it will return its default value.
  mutating func clearBuild() {self._build = nil}

  var platform: String {
    get {return _platform ?? String()}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  var country: String {
    get {return _country ?? String()}
    set {_country = newValue}
  }
  /// Returns true if `country` has been explicitly set.
  var hasCountry: Bool {return self._country != nil}
  /// Clears the value of `country`. Subsequent reads from it will return its default value.
  mutating func clearCountry() {self._country = nil}

  var language: String {
    get {return _language ?? String()}
    set {_language = newValue}
  }
  /// Returns true if `language` has been explicitly set.
  var hasLanguage: Bool {return self._language != nil}
  /// Clears the value of `language`. Subsequent reads from it will return its default value.
  mutating func clearLanguage() {self._language = nil}

  var debug: Bool {
    get {return _debug ?? false}
    set {_debug = newValue}
  }
  /// Returns true if `debug` has been explicitly set.
  var hasDebug: Bool {return self._debug != nil}
  /// Clears the value of `debug`. Subsequent reads from it will return its default value.
  mutating func clearDebug() {self._debug = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _eiUserID: String? = nil
  fileprivate var _clientVersion: UInt32? = nil
  fileprivate var _version: String? = nil
  fileprivate var _build: String? = nil
  fileprivate var _platform: String? = nil
  fileprivate var _country: String? = nil
  fileprivate var _language: String? = nil
  fileprivate var _debug: Bool? = nil
}

struct Ei_ContractSimConfig: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var gradeConfigs: [Ei_ContractSimConfig.ContractGradeSimConfig] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ContractGradeSimConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var grade: Ei_Contract.PlayerGrade {
      get {return _grade ?? .gradeUnset}
      set {_grade = newValue}
    }
    /// Returns true if `grade` has been explicitly set.
    var hasGrade: Bool {return self._grade != nil}
    /// Clears the value of `grade`. Subsequent reads from it will return its default value.
    mutating func clearGrade() {self._grade = nil}

    var goalParams: [Ei_ContractSimConfig.ContractGradeSimConfig.GoalParams] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct GoalParams: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var targetSe: Double {
        get {return _targetSe ?? 0}
        set {_targetSe = newValue}
      }
      /// Returns true if `targetSe` has been explicitly set.
      var hasTargetSe: Bool {return self._targetSe != nil}
      /// Clears the value of `targetSe`. Subsequent reads from it will return its default value.
      mutating func clearTargetSe() {self._targetSe = nil}

      var cpsMult: Double {
        get {return _cpsMult ?? 0}
        set {_cpsMult = newValue}
      }
      /// Returns true if `cpsMult` has been explicitly set.
      var hasCpsMult: Bool {return self._cpsMult != nil}
      /// Clears the value of `cpsMult`. Subsequent reads from it will return its default value.
      mutating func clearCpsMult() {self._cpsMult = nil}

      var elrMult: Double {
        get {return _elrMult ?? 0}
        set {_elrMult = newValue}
      }
      /// Returns true if `elrMult` has been explicitly set.
      var hasElrMult: Bool {return self._elrMult != nil}
      /// Clears the value of `elrMult`. Subsequent reads from it will return its default value.
      mutating func clearElrMult() {self._elrMult = nil}

      var earningsMult: Double {
        get {return _earningsMult ?? 0}
        set {_earningsMult = newValue}
      }
      /// Returns true if `earningsMult` has been explicitly set.
      var hasEarningsMult: Bool {return self._earningsMult != nil}
      /// Clears the value of `earningsMult`. Subsequent reads from it will return its default value.
      mutating func clearEarningsMult() {self._earningsMult = nil}

      var timeEfficacy: Double {
        get {return _timeEfficacy ?? 0}
        set {_timeEfficacy = newValue}
      }
      /// Returns true if `timeEfficacy` has been explicitly set.
      var hasTimeEfficacy: Bool {return self._timeEfficacy != nil}
      /// Clears the value of `timeEfficacy`. Subsequent reads from it will return its default value.
      mutating func clearTimeEfficacy() {self._timeEfficacy = nil}

      var habCapacityMult: Double {
        get {return _habCapacityMult ?? 0}
        set {_habCapacityMult = newValue}
      }
      /// Returns true if `habCapacityMult` has been explicitly set.
      var hasHabCapacityMult: Bool {return self._habCapacityMult != nil}
      /// Clears the value of `habCapacityMult`. Subsequent reads from it will return its default value.
      mutating func clearHabCapacityMult() {self._habCapacityMult = nil}

      var epicResearchBudget: Double {
        get {return _epicResearchBudget ?? 0}
        set {_epicResearchBudget = newValue}
      }
      /// Returns true if `epicResearchBudget` has been explicitly set.
      var hasEpicResearchBudget: Bool {return self._epicResearchBudget != nil}
      /// Clears the value of `epicResearchBudget`. Subsequent reads from it will return its default value.
      mutating func clearEpicResearchBudget() {self._epicResearchBudget = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _targetSe: Double? = nil
      fileprivate var _cpsMult: Double? = nil
      fileprivate var _elrMult: Double? = nil
      fileprivate var _earningsMult: Double? = nil
      fileprivate var _timeEfficacy: Double? = nil
      fileprivate var _habCapacityMult: Double? = nil
      fileprivate var _epicResearchBudget: Double? = nil
    }

    init() {}

    fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
  }

  init() {}
}

struct Ei_ContractSimPoll: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_ContractSimPollResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractToSimulate: Ei_Contract {
    get {return _contractToSimulate ?? Ei_Contract()}
    set {_contractToSimulate = newValue}
  }
  /// Returns true if `contractToSimulate` has been explicitly set.
  var hasContractToSimulate: Bool {return self._contractToSimulate != nil}
  /// Clears the value of `contractToSimulate`. Subsequent reads from it will return its default value.
  mutating func clearContractToSimulate() {self._contractToSimulate = nil}

  var simConfig: Ei_ContractSimConfig {
    get {return _simConfig ?? Ei_ContractSimConfig()}
    set {_simConfig = newValue}
  }
  /// Returns true if `simConfig` has been explicitly set.
  var hasSimConfig: Bool {return self._simConfig != nil}
  /// Clears the value of `simConfig`. Subsequent reads from it will return its default value.
  mutating func clearSimConfig() {self._simConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _contractToSimulate: Ei_Contract? = nil
  fileprivate var _simConfig: Ei_ContractSimConfig? = nil
}

struct Ei_ContractSimResultUpdate: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractID: String {
    get {return _contractID ?? String()}
    set {_contractID = newValue}
  }
  /// Returns true if `contractID` has been explicitly set.
  var hasContractID: Bool {return self._contractID != nil}
  /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
  mutating func clearContractID() {self._contractID = nil}

  var goalInfos: [Ei_ContractSimResultUpdate.GoalInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct GoalInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var grade: Ei_Contract.PlayerGrade {
      get {return _grade ?? .gradeUnset}
      set {_grade = newValue}
    }
    /// Returns true if `grade` has been explicitly set.
    var hasGrade: Bool {return self._grade != nil}
    /// Clears the value of `grade`. Subsequent reads from it will return its default value.
    mutating func clearGrade() {self._grade = nil}

    var goalIndex: UInt32 {
      get {return _goalIndex ?? 0}
      set {_goalIndex = newValue}
    }
    /// Returns true if `goalIndex` has been explicitly set.
    var hasGoalIndex: Bool {return self._goalIndex != nil}
    /// Clears the value of `goalIndex`. Subsequent reads from it will return its default value.
    mutating func clearGoalIndex() {self._goalIndex = nil}

    var projectedEggsLaid: Double {
      get {return _projectedEggsLaid ?? 0}
      set {_projectedEggsLaid = newValue}
    }
    /// Returns true if `projectedEggsLaid` has been explicitly set.
    var hasProjectedEggsLaid: Bool {return self._projectedEggsLaid != nil}
    /// Clears the value of `projectedEggsLaid`. Subsequent reads from it will return its default value.
    mutating func clearProjectedEggsLaid() {self._projectedEggsLaid = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
    fileprivate var _goalIndex: UInt32? = nil
    fileprivate var _projectedEggsLaid: Double? = nil
  }

  init() {}

  fileprivate var _contractID: String? = nil
}

struct Ei_ContractsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var soulEggs: Double {
    get {return _soulEggs ?? 0}
    set {_soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return self._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {self._soulEggs = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _soulEggs: Double? = nil
  fileprivate var _clientVersion: UInt32? = nil
  fileprivate var _userID: String? = nil
}

struct Ei_ContractsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contracts: [Ei_Contract] = []

  var customEggs: [Ei_CustomEgg] = []

  var warningMessage: String {
    get {return _warningMessage ?? String()}
    set {_warningMessage = newValue}
  }
  /// Returns true if `warningMessage` has been explicitly set.
  var hasWarningMessage: Bool {return self._warningMessage != nil}
  /// Clears the value of `warningMessage`. Subsequent reads from it will return its default value.
  mutating func clearWarningMessage() {self._warningMessage = nil}

  var totalEop: Double {
    get {return _totalEop ?? 0}
    set {_totalEop = newValue}
  }
  /// Returns true if `totalEop` has been explicitly set.
  var hasTotalEop: Bool {return self._totalEop != nil}
  /// Clears the value of `totalEop`. Subsequent reads from it will return its default value.
  mutating func clearTotalEop() {self._totalEop = nil}

  var serverTime: Double {
    get {return _serverTime ?? 0}
    set {_serverTime = newValue}
  }
  /// Returns true if `serverTime` has been explicitly set.
  var hasServerTime: Bool {return self._serverTime != nil}
  /// Clears the value of `serverTime`. Subsequent reads from it will return its default value.
  mutating func clearServerTime() {self._serverTime = nil}

  var maxEop: UInt32 {
    get {return _maxEop ?? 1000}
    set {_maxEop = newValue}
  }
  /// Returns true if `maxEop` has been explicitly set.
  var hasMaxEop: Bool {return self._maxEop != nil}
  /// Clears the value of `maxEop`. Subsequent reads from it will return its default value.
  mutating func clearMaxEop() {self._maxEop = nil}

  var currentSeason: Ei_ContractSeasonInfo {
    get {return _currentSeason ?? Ei_ContractSeasonInfo()}
    set {_currentSeason = newValue}
  }
  /// Returns true if `currentSeason` has been explicitly set.
  var hasCurrentSeason: Bool {return self._currentSeason != nil}
  /// Clears the value of `currentSeason`. Subsequent reads from it will return its default value.
  mutating func clearCurrentSeason() {self._currentSeason = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _warningMessage: String? = nil
  fileprivate var _totalEop: Double? = nil
  fileprivate var _serverTime: Double? = nil
  fileprivate var _maxEop: UInt32? = nil
  fileprivate var _currentSeason: Ei_ContractSeasonInfo? = nil
}

struct Ei_ContractCoopStatusRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var clientTimestamp: Double {
    get {return _clientTimestamp ?? 0}
    set {_clientTimestamp = newValue}
  }
  /// Returns true if `clientTimestamp` has been explicitly set.
  var hasClientTimestamp: Bool {return self._clientTimestamp != nil}
  /// Clears the value of `clientTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearClientTimestamp() {self._clientTimestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _clientVersion: UInt32? = nil
  fileprivate var _clientTimestamp: Double? = nil
}

struct Ei_FarmProductionParams: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var farmPopulation: Double {
    get {return _farmPopulation ?? 0}
    set {_farmPopulation = newValue}
  }
  /// Returns true if `farmPopulation` has been explicitly set.
  var hasFarmPopulation: Bool {return self._farmPopulation != nil}
  /// Clears the value of `farmPopulation`. Subsequent reads from it will return its default value.
  mutating func clearFarmPopulation() {self._farmPopulation = nil}

  var farmCapacity: Double {
    get {return _farmCapacity ?? 0}
    set {_farmCapacity = newValue}
  }
  /// Returns true if `farmCapacity` has been explicitly set.
  var hasFarmCapacity: Bool {return self._farmCapacity != nil}
  /// Clears the value of `farmCapacity`. Subsequent reads from it will return its default value.
  mutating func clearFarmCapacity() {self._farmCapacity = nil}

  var elr: Double {
    get {return _elr ?? 0}
    set {_elr = newValue}
  }
  /// Returns true if `elr` has been explicitly set.
  var hasElr: Bool {return self._elr != nil}
  /// Clears the value of `elr`. Subsequent reads from it will return its default value.
  mutating func clearElr() {self._elr = nil}

  var ihr: Double {
    get {return _ihr ?? 0}
    set {_ihr = newValue}
  }
  /// Returns true if `ihr` has been explicitly set.
  var hasIhr: Bool {return self._ihr != nil}
  /// Clears the value of `ihr`. Subsequent reads from it will return its default value.
  mutating func clearIhr() {self._ihr = nil}

  var sr: Double {
    get {return _sr ?? 0}
    set {_sr = newValue}
  }
  /// Returns true if `sr` has been explicitly set.
  var hasSr: Bool {return self._sr != nil}
  /// Clears the value of `sr`. Subsequent reads from it will return its default value.
  mutating func clearSr() {self._sr = nil}

  var delivered: Double {
    get {return _delivered ?? 0}
    set {_delivered = newValue}
  }
  /// Returns true if `delivered` has been explicitly set.
  var hasDelivered: Bool {return self._delivered != nil}
  /// Clears the value of `delivered`. Subsequent reads from it will return its default value.
  mutating func clearDelivered() {self._delivered = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _farmPopulation: Double? = nil
  fileprivate var _farmCapacity: Double? = nil
  fileprivate var _elr: Double? = nil
  fileprivate var _ihr: Double? = nil
  fileprivate var _sr: Double? = nil
  fileprivate var _delivered: Double? = nil
}

struct Ei_PlayerFarmInfo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var clientVersion: UInt32 {
    get {return _storage._clientVersion ?? 0}
    set {_uniqueStorage()._clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return _storage._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {_uniqueStorage()._clientVersion = nil}

  var soulEggs: Double {
    get {return _storage._soulEggs ?? 0}
    set {_uniqueStorage()._soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return _storage._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {_uniqueStorage()._soulEggs = nil}

  var eggsOfProphecy: UInt64 {
    get {return _storage._eggsOfProphecy ?? 0}
    set {_uniqueStorage()._eggsOfProphecy = newValue}
  }
  /// Returns true if `eggsOfProphecy` has been explicitly set.
  var hasEggsOfProphecy: Bool {return _storage._eggsOfProphecy != nil}
  /// Clears the value of `eggsOfProphecy`. Subsequent reads from it will return its default value.
  mutating func clearEggsOfProphecy() {_uniqueStorage()._eggsOfProphecy = nil}

  var permitLevel: UInt32 {
    get {return _storage._permitLevel ?? 0}
    set {_uniqueStorage()._permitLevel = newValue}
  }
  /// Returns true if `permitLevel` has been explicitly set.
  var hasPermitLevel: Bool {return _storage._permitLevel != nil}
  /// Clears the value of `permitLevel`. Subsequent reads from it will return its default value.
  mutating func clearPermitLevel() {_uniqueStorage()._permitLevel = nil}

  var hyperloopStation: Bool {
    get {return _storage._hyperloopStation ?? false}
    set {_uniqueStorage()._hyperloopStation = newValue}
  }
  /// Returns true if `hyperloopStation` has been explicitly set.
  var hasHyperloopStation: Bool {return _storage._hyperloopStation != nil}
  /// Clears the value of `hyperloopStation`. Subsequent reads from it will return its default value.
  mutating func clearHyperloopStation() {_uniqueStorage()._hyperloopStation = nil}

  var eggMedalLevel: [UInt32] {
    get {return _storage._eggMedalLevel}
    set {_uniqueStorage()._eggMedalLevel = newValue}
  }

  var epicResearch: [Ei_Backup.ResearchItem] {
    get {return _storage._epicResearch}
    set {_uniqueStorage()._epicResearch = newValue}
  }

  var eggType: Ei_Egg {
    get {return _storage._eggType ?? .edible}
    set {_uniqueStorage()._eggType = newValue}
  }
  /// Returns true if `eggType` has been explicitly set.
  var hasEggType: Bool {return _storage._eggType != nil}
  /// Clears the value of `eggType`. Subsequent reads from it will return its default value.
  mutating func clearEggType() {_uniqueStorage()._eggType = nil}

  var cashOnHand: Double {
    get {return _storage._cashOnHand ?? 0}
    set {_uniqueStorage()._cashOnHand = newValue}
  }
  /// Returns true if `cashOnHand` has been explicitly set.
  var hasCashOnHand: Bool {return _storage._cashOnHand != nil}
  /// Clears the value of `cashOnHand`. Subsequent reads from it will return its default value.
  mutating func clearCashOnHand() {_uniqueStorage()._cashOnHand = nil}

  var habs: [UInt32] {
    get {return _storage._habs}
    set {_uniqueStorage()._habs = newValue}
  }

  var habPopulation: [UInt64] {
    get {return _storage._habPopulation}
    set {_uniqueStorage()._habPopulation = newValue}
  }

  var habCapacity: [UInt64] {
    get {return _storage._habCapacity}
    set {_uniqueStorage()._habCapacity = newValue}
  }

  var vehicles: [UInt32] {
    get {return _storage._vehicles}
    set {_uniqueStorage()._vehicles = newValue}
  }

  var trainLength: [UInt32] {
    get {return _storage._trainLength}
    set {_uniqueStorage()._trainLength = newValue}
  }

  var silosOwned: UInt32 {
    get {return _storage._silosOwned ?? 0}
    set {_uniqueStorage()._silosOwned = newValue}
  }
  /// Returns true if `silosOwned` has been explicitly set.
  var hasSilosOwned: Bool {return _storage._silosOwned != nil}
  /// Clears the value of `silosOwned`. Subsequent reads from it will return its default value.
  mutating func clearSilosOwned() {_uniqueStorage()._silosOwned = nil}

  var commonResearch: [Ei_Backup.ResearchItem] {
    get {return _storage._commonResearch}
    set {_uniqueStorage()._commonResearch = newValue}
  }

  var activeBoosts: [Ei_Backup.ActiveBoost] {
    get {return _storage._activeBoosts}
    set {_uniqueStorage()._activeBoosts = newValue}
  }

  var boostTokensOnHand: UInt32 {
    get {return _storage._boostTokensOnHand ?? 0}
    set {_uniqueStorage()._boostTokensOnHand = newValue}
  }
  /// Returns true if `boostTokensOnHand` has been explicitly set.
  var hasBoostTokensOnHand: Bool {return _storage._boostTokensOnHand != nil}
  /// Clears the value of `boostTokensOnHand`. Subsequent reads from it will return its default value.
  mutating func clearBoostTokensOnHand() {_uniqueStorage()._boostTokensOnHand = nil}

  var equippedArtifacts: [Ei_CompleteArtifact] {
    get {return _storage._equippedArtifacts}
    set {_uniqueStorage()._equippedArtifacts = newValue}
  }

  var artifactInventoryScore: UInt64 {
    get {return _storage._artifactInventoryScore ?? 0}
    set {_uniqueStorage()._artifactInventoryScore = newValue}
  }
  /// Returns true if `artifactInventoryScore` has been explicitly set.
  var hasArtifactInventoryScore: Bool {return _storage._artifactInventoryScore != nil}
  /// Clears the value of `artifactInventoryScore`. Subsequent reads from it will return its default value.
  mutating func clearArtifactInventoryScore() {_uniqueStorage()._artifactInventoryScore = nil}

  var farmAppearance: Ei_ShellDB.FarmConfiguration {
    get {return _storage._farmAppearance ?? Ei_ShellDB.FarmConfiguration()}
    set {_uniqueStorage()._farmAppearance = newValue}
  }
  /// Returns true if `farmAppearance` has been explicitly set.
  var hasFarmAppearance: Bool {return _storage._farmAppearance != nil}
  /// Clears the value of `farmAppearance`. Subsequent reads from it will return its default value.
  mutating func clearFarmAppearance() {_uniqueStorage()._farmAppearance = nil}

  var timestamp: Double {
    get {return _storage._timestamp ?? 0}
    set {_uniqueStorage()._timestamp = newValue}
  }
  /// Returns true if `timestamp` has been explicitly set.
  var hasTimestamp: Bool {return _storage._timestamp != nil}
  /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
  mutating func clearTimestamp() {_uniqueStorage()._timestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ContractCoopStatusResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var responseStatus: Ei_ContractCoopStatusResponse.ResponseStatus {
    get {return _storage._responseStatus ?? .noError}
    set {_uniqueStorage()._responseStatus = newValue}
  }
  /// Returns true if `responseStatus` has been explicitly set.
  var hasResponseStatus: Bool {return _storage._responseStatus != nil}
  /// Clears the value of `responseStatus`. Subsequent reads from it will return its default value.
  mutating func clearResponseStatus() {_uniqueStorage()._responseStatus = nil}

  var contractIdentifier: String {
    get {return _storage._contractIdentifier ?? String()}
    set {_uniqueStorage()._contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return _storage._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {_uniqueStorage()._contractIdentifier = nil}

  var totalAmount: Double {
    get {return _storage._totalAmount ?? 0}
    set {_uniqueStorage()._totalAmount = newValue}
  }
  /// Returns true if `totalAmount` has been explicitly set.
  var hasTotalAmount: Bool {return _storage._totalAmount != nil}
  /// Clears the value of `totalAmount`. Subsequent reads from it will return its default value.
  mutating func clearTotalAmount() {_uniqueStorage()._totalAmount = nil}

  var coopIdentifier: String {
    get {return _storage._coopIdentifier ?? String()}
    set {_uniqueStorage()._coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return _storage._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {_uniqueStorage()._coopIdentifier = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _storage._grade ?? .gradeUnset}
    set {_uniqueStorage()._grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return _storage._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {_uniqueStorage()._grade = nil}

  var contributors: [Ei_ContractCoopStatusResponse.ContributionInfo] {
    get {return _storage._contributors}
    set {_uniqueStorage()._contributors = newValue}
  }

  var autoGenerated: Bool {
    get {return _storage._autoGenerated ?? false}
    set {_uniqueStorage()._autoGenerated = newValue}
  }
  /// Returns true if `autoGenerated` has been explicitly set.
  var hasAutoGenerated: Bool {return _storage._autoGenerated != nil}
  /// Clears the value of `autoGenerated`. Subsequent reads from it will return its default value.
  mutating func clearAutoGenerated() {_uniqueStorage()._autoGenerated = nil}

  var `public`: Bool {
    get {return _storage._public ?? false}
    set {_uniqueStorage()._public = newValue}
  }
  /// Returns true if ``public`` has been explicitly set.
  var hasPublic: Bool {return _storage._public != nil}
  /// Clears the value of ``public``. Subsequent reads from it will return its default value.
  mutating func clearPublic() {_uniqueStorage()._public = nil}

  var creatorID: String {
    get {return _storage._creatorID ?? String()}
    set {_uniqueStorage()._creatorID = newValue}
  }
  /// Returns true if `creatorID` has been explicitly set.
  var hasCreatorID: Bool {return _storage._creatorID != nil}
  /// Clears the value of `creatorID`. Subsequent reads from it will return its default value.
  mutating func clearCreatorID() {_uniqueStorage()._creatorID = nil}

  var secondsRemaining: Double {
    get {return _storage._secondsRemaining ?? 0}
    set {_uniqueStorage()._secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return _storage._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {_uniqueStorage()._secondsRemaining = nil}

  var secondsSinceAllGoalsAchieved: Double {
    get {return _storage._secondsSinceAllGoalsAchieved ?? 0}
    set {_uniqueStorage()._secondsSinceAllGoalsAchieved = newValue}
  }
  /// Returns true if `secondsSinceAllGoalsAchieved` has been explicitly set.
  var hasSecondsSinceAllGoalsAchieved: Bool {return _storage._secondsSinceAllGoalsAchieved != nil}
  /// Clears the value of `secondsSinceAllGoalsAchieved`. Subsequent reads from it will return its default value.
  mutating func clearSecondsSinceAllGoalsAchieved() {_uniqueStorage()._secondsSinceAllGoalsAchieved = nil}

  var allGoalsAchieved: Bool {
    get {return _storage._allGoalsAchieved ?? false}
    set {_uniqueStorage()._allGoalsAchieved = newValue}
  }
  /// Returns true if `allGoalsAchieved` has been explicitly set.
  var hasAllGoalsAchieved: Bool {return _storage._allGoalsAchieved != nil}
  /// Clears the value of `allGoalsAchieved`. Subsequent reads from it will return its default value.
  mutating func clearAllGoalsAchieved() {_uniqueStorage()._allGoalsAchieved = nil}

  var allMembersReporting: Bool {
    get {return _storage._allMembersReporting ?? false}
    set {_uniqueStorage()._allMembersReporting = newValue}
  }
  /// Returns true if `allMembersReporting` has been explicitly set.
  var hasAllMembersReporting: Bool {return _storage._allMembersReporting != nil}
  /// Clears the value of `allMembersReporting`. Subsequent reads from it will return its default value.
  mutating func clearAllMembersReporting() {_uniqueStorage()._allMembersReporting = nil}

  var gracePeriodSecondsRemaining: Double {
    get {return _storage._gracePeriodSecondsRemaining ?? 0}
    set {_uniqueStorage()._gracePeriodSecondsRemaining = newValue}
  }
  /// Returns true if `gracePeriodSecondsRemaining` has been explicitly set.
  var hasGracePeriodSecondsRemaining: Bool {return _storage._gracePeriodSecondsRemaining != nil}
  /// Clears the value of `gracePeriodSecondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearGracePeriodSecondsRemaining() {_uniqueStorage()._gracePeriodSecondsRemaining = nil}

  var clearedForExit: Bool {
    get {return _storage._clearedForExit ?? false}
    set {_uniqueStorage()._clearedForExit = newValue}
  }
  /// Returns true if `clearedForExit` has been explicitly set.
  var hasClearedForExit: Bool {return _storage._clearedForExit != nil}
  /// Clears the value of `clearedForExit`. Subsequent reads from it will return its default value.
  mutating func clearClearedForExit() {_uniqueStorage()._clearedForExit = nil}

  var gifts: [Ei_ContractCoopStatusResponse.CoopGift] {
    get {return _storage._gifts}
    set {_uniqueStorage()._gifts = newValue}
  }

  var chickenRuns: [Ei_ContractCoopStatusResponse.ChickenRun] {
    get {return _storage._chickenRuns}
    set {_uniqueStorage()._chickenRuns = newValue}
  }

  var clientTimestamp: Double {
    get {return _storage._clientTimestamp ?? 0}
    set {_uniqueStorage()._clientTimestamp = newValue}
  }
  /// Returns true if `clientTimestamp` has been explicitly set.
  var hasClientTimestamp: Bool {return _storage._clientTimestamp != nil}
  /// Clears the value of `clientTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearClientTimestamp() {_uniqueStorage()._clientTimestamp = nil}

  var backgroundSync: Bool {
    get {return _storage._backgroundSync ?? false}
    set {_uniqueStorage()._backgroundSync = newValue}
  }
  /// Returns true if `backgroundSync` has been explicitly set.
  var hasBackgroundSync: Bool {return _storage._backgroundSync != nil}
  /// Clears the value of `backgroundSync`. Subsequent reads from it will return its default value.
  mutating func clearBackgroundSync() {_uniqueStorage()._backgroundSync = nil}

  var lastSyncDep: Double {
    get {return _storage._lastSyncDep ?? 0}
    set {_uniqueStorage()._lastSyncDep = newValue}
  }
  /// Returns true if `lastSyncDep` has been explicitly set.
  var hasLastSyncDep: Bool {return _storage._lastSyncDep != nil}
  /// Clears the value of `lastSyncDep`. Subsequent reads from it will return its default value.
  mutating func clearLastSyncDep() {_uniqueStorage()._lastSyncDep = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ResponseStatus: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case noError = 0
    case missingUser = 1
    case missingCoopID = 2
    case missingContractID = 3
    case membershipNotFound = 4
    case coopNotFound = 5
    case contractNotFound = 6
    case invalidMembership = 7
    case noHTTPResponse = 500

    init() {
      self = .noError
    }

  }

  enum MemberStatus: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case valid = 0
    case kickedInactive = 1
    case kickedPrivate = 2
    case kickedCheats = 3
    case kickedLeech = 4

    init() {
      self = .valid
    }

  }

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unknown = 0
    case lobby = 1
    case active = 2
    case complete = 3
    case finalized = 4

    init() {
      self = .unknown
    }

  }

  struct ContributionInfo: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var uuid: String {
      get {return _storage._uuid ?? String()}
      set {_uniqueStorage()._uuid = newValue}
    }
    /// Returns true if `uuid` has been explicitly set.
    var hasUuid: Bool {return _storage._uuid != nil}
    /// Clears the value of `uuid`. Subsequent reads from it will return its default value.
    mutating func clearUuid() {_uniqueStorage()._uuid = nil}

    var userID: String {
      get {return _storage._userID ?? String()}
      set {_uniqueStorage()._userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
    var hasUserID: Bool {return _storage._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    mutating func clearUserID() {_uniqueStorage()._userID = nil}

    var userName: String {
      get {return _storage._userName ?? String()}
      set {_uniqueStorage()._userName = newValue}
    }
    /// Returns true if `userName` has been explicitly set.
    var hasUserName: Bool {return _storage._userName != nil}
    /// Clears the value of `userName`. Subsequent reads from it will return its default value.
    mutating func clearUserName() {_uniqueStorage()._userName = nil}

    var contractIdentifier: String {
      get {return _storage._contractIdentifier ?? String()}
      set {_uniqueStorage()._contractIdentifier = newValue}
    }
    /// Returns true if `contractIdentifier` has been explicitly set.
    var hasContractIdentifier: Bool {return _storage._contractIdentifier != nil}
    /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearContractIdentifier() {_uniqueStorage()._contractIdentifier = nil}

    var contributionAmount: Double {
      get {return _storage._contributionAmount ?? 0}
      set {_uniqueStorage()._contributionAmount = newValue}
    }
    /// Returns true if `contributionAmount` has been explicitly set.
    var hasContributionAmount: Bool {return _storage._contributionAmount != nil}
    /// Clears the value of `contributionAmount`. Subsequent reads from it will return its default value.
    mutating func clearContributionAmount() {_uniqueStorage()._contributionAmount = nil}

    var contributionRate: Double {
      get {return _storage._contributionRate ?? 0}
      set {_uniqueStorage()._contributionRate = newValue}
    }
    /// Returns true if `contributionRate` has been explicitly set.
    var hasContributionRate: Bool {return _storage._contributionRate != nil}
    /// Clears the value of `contributionRate`. Subsequent reads from it will return its default value.
    mutating func clearContributionRate() {_uniqueStorage()._contributionRate = nil}

    var soulPower: Double {
      get {return _storage._soulPower ?? 0}
      set {_uniqueStorage()._soulPower = newValue}
    }
    /// Returns true if `soulPower` has been explicitly set.
    var hasSoulPower: Bool {return _storage._soulPower != nil}
    /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
    mutating func clearSoulPower() {_uniqueStorage()._soulPower = nil}

    var productionParams: Ei_FarmProductionParams {
      get {return _storage._productionParams ?? Ei_FarmProductionParams()}
      set {_uniqueStorage()._productionParams = newValue}
    }
    /// Returns true if `productionParams` has been explicitly set.
    var hasProductionParams: Bool {return _storage._productionParams != nil}
    /// Clears the value of `productionParams`. Subsequent reads from it will return its default value.
    mutating func clearProductionParams() {_uniqueStorage()._productionParams = nil}

    var farmInfo: Ei_PlayerFarmInfo {
      get {return _storage._farmInfo ?? Ei_PlayerFarmInfo()}
      set {_uniqueStorage()._farmInfo = newValue}
    }
    /// Returns true if `farmInfo` has been explicitly set.
    var hasFarmInfo: Bool {return _storage._farmInfo != nil}
    /// Clears the value of `farmInfo`. Subsequent reads from it will return its default value.
    mutating func clearFarmInfo() {_uniqueStorage()._farmInfo = nil}

    var rankChange: Int32 {
      get {return _storage._rankChange ?? 0}
      set {_uniqueStorage()._rankChange = newValue}
    }
    /// Returns true if `rankChange` has been explicitly set.
    var hasRankChange: Bool {return _storage._rankChange != nil}
    /// Clears the value of `rankChange`. Subsequent reads from it will return its default value.
    mutating func clearRankChange() {_uniqueStorage()._rankChange = nil}

    var recentlyActive: Bool {
      get {return _storage._recentlyActive ?? false}
      set {_uniqueStorage()._recentlyActive = newValue}
    }
    /// Returns true if `recentlyActive` has been explicitly set.
    var hasRecentlyActive: Bool {return _storage._recentlyActive != nil}
    /// Clears the value of `recentlyActive`. Subsequent reads from it will return its default value.
    mutating func clearRecentlyActive() {_uniqueStorage()._recentlyActive = nil}

    var active: Bool {
      get {return _storage._active ?? false}
      set {_uniqueStorage()._active = newValue}
    }
    /// Returns true if `active` has been explicitly set.
    var hasActive: Bool {return _storage._active != nil}
    /// Clears the value of `active`. Subsequent reads from it will return its default value.
    mutating func clearActive() {_uniqueStorage()._active = nil}

    var ccMember: Bool {
      get {return _storage._ccMember ?? false}
      set {_uniqueStorage()._ccMember = newValue}
    }
    /// Returns true if `ccMember` has been explicitly set.
    var hasCcMember: Bool {return _storage._ccMember != nil}
    /// Clears the value of `ccMember`. Subsequent reads from it will return its default value.
    mutating func clearCcMember() {_uniqueStorage()._ccMember = nil}

    var leech: Bool {
      get {return _storage._leech ?? false}
      set {_uniqueStorage()._leech = newValue}
    }
    /// Returns true if `leech` has been explicitly set.
    var hasLeech: Bool {return _storage._leech != nil}
    /// Clears the value of `leech`. Subsequent reads from it will return its default value.
    mutating func clearLeech() {_uniqueStorage()._leech = nil}

    var finalized: Bool {
      get {return _storage._finalized ?? false}
      set {_uniqueStorage()._finalized = newValue}
    }
    /// Returns true if `finalized` has been explicitly set.
    var hasFinalized: Bool {return _storage._finalized != nil}
    /// Clears the value of `finalized`. Subsequent reads from it will return its default value.
    mutating func clearFinalized() {_uniqueStorage()._finalized = nil}

    var timeCheatDetected: Bool {
      get {return _storage._timeCheatDetected ?? false}
      set {_uniqueStorage()._timeCheatDetected = newValue}
    }
    /// Returns true if `timeCheatDetected` has been explicitly set.
    var hasTimeCheatDetected: Bool {return _storage._timeCheatDetected != nil}
    /// Clears the value of `timeCheatDetected`. Subsequent reads from it will return its default value.
    mutating func clearTimeCheatDetected() {_uniqueStorage()._timeCheatDetected = nil}

    var platform: Ei_Platform {
      get {return _storage._platform ?? .unknownPlatform}
      set {_uniqueStorage()._platform = newValue}
    }
    /// Returns true if `platform` has been explicitly set.
    var hasPlatform: Bool {return _storage._platform != nil}
    /// Clears the value of `platform`. Subsequent reads from it will return its default value.
    mutating func clearPlatform() {_uniqueStorage()._platform = nil}

    var pushID: String {
      get {return _storage._pushID ?? String()}
      set {_uniqueStorage()._pushID = newValue}
    }
    /// Returns true if `pushID` has been explicitly set.
    var hasPushID: Bool {return _storage._pushID != nil}
    /// Clears the value of `pushID`. Subsequent reads from it will return its default value.
    mutating func clearPushID() {_uniqueStorage()._pushID = nil}

    var banVotes: UInt32 {
      get {return _storage._banVotes ?? 0}
      set {_uniqueStorage()._banVotes = newValue}
    }
    /// Returns true if `banVotes` has been explicitly set.
    var hasBanVotes: Bool {return _storage._banVotes != nil}
    /// Clears the value of `banVotes`. Subsequent reads from it will return its default value.
    mutating func clearBanVotes() {_uniqueStorage()._banVotes = nil}

    var autojoined: Bool {
      get {return _storage._autojoined ?? false}
      set {_uniqueStorage()._autojoined = newValue}
    }
    /// Returns true if `autojoined` has been explicitly set.
    var hasAutojoined: Bool {return _storage._autojoined != nil}
    /// Clears the value of `autojoined`. Subsequent reads from it will return its default value.
    mutating func clearAutojoined() {_uniqueStorage()._autojoined = nil}

    var boostTokens: UInt32 {
      get {return _storage._boostTokens ?? 0}
      set {_uniqueStorage()._boostTokens = newValue}
    }
    /// Returns true if `boostTokens` has been explicitly set.
    var hasBoostTokens: Bool {return _storage._boostTokens != nil}
    /// Clears the value of `boostTokens`. Subsequent reads from it will return its default value.
    mutating func clearBoostTokens() {_uniqueStorage()._boostTokens = nil}

    var boostTokensSpent: UInt32 {
      get {return _storage._boostTokensSpent ?? 0}
      set {_uniqueStorage()._boostTokensSpent = newValue}
    }
    /// Returns true if `boostTokensSpent` has been explicitly set.
    var hasBoostTokensSpent: Bool {return _storage._boostTokensSpent != nil}
    /// Clears the value of `boostTokensSpent`. Subsequent reads from it will return its default value.
    mutating func clearBoostTokensSpent() {_uniqueStorage()._boostTokensSpent = nil}

    var buffHistory: [Ei_CoopBuffState] {
      get {return _storage._buffHistory}
      set {_uniqueStorage()._buffHistory = newValue}
    }

    var chickenRunCooldown: Double {
      get {return _storage._chickenRunCooldown ?? 0}
      set {_uniqueStorage()._chickenRunCooldown = newValue}
    }
    /// Returns true if `chickenRunCooldown` has been explicitly set.
    var hasChickenRunCooldown: Bool {return _storage._chickenRunCooldown != nil}
    /// Clears the value of `chickenRunCooldown`. Subsequent reads from it will return its default value.
    mutating func clearChickenRunCooldown() {_uniqueStorage()._chickenRunCooldown = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct CoopGift: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: String {
      get {return _userID ?? String()}
      set {_userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
    var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    mutating func clearUserID() {self._userID = nil}

    var userName: String {
      get {return _userName ?? String()}
      set {_userName = newValue}
    }
    /// Returns true if `userName` has been explicitly set.
    var hasUserName: Bool {return self._userName != nil}
    /// Clears the value of `userName`. Subsequent reads from it will return its default value.
    mutating func clearUserName() {self._userName = nil}

    var amount: UInt32 {
      get {return _amount ?? 0}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {self._amount = nil}

    var tracking: String {
      get {return _tracking ?? String()}
      set {_tracking = newValue}
    }
    /// Returns true if `tracking` has been explicitly set.
    var hasTracking: Bool {return self._tracking != nil}
    /// Clears the value of `tracking`. Subsequent reads from it will return its default value.
    mutating func clearTracking() {self._tracking = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _userID: String? = nil
    fileprivate var _userName: String? = nil
    fileprivate var _amount: UInt32? = nil
    fileprivate var _tracking: String? = nil
  }

  struct ChickenRun: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var userID: String {
      get {return _userID ?? String()}
      set {_userID = newValue}
    }
    /// Returns true if `userID` has been explicitly set.
    var hasUserID: Bool {return self._userID != nil}
    /// Clears the value of `userID`. Subsequent reads from it will return its default value.
    mutating func clearUserID() {self._userID = nil}

    var userName: String {
      get {return _userName ?? String()}
      set {_userName = newValue}
    }
    /// Returns true if `userName` has been explicitly set.
    var hasUserName: Bool {return self._userName != nil}
    /// Clears the value of `userName`. Subsequent reads from it will return its default value.
    mutating func clearUserName() {self._userName = nil}

    var amount: UInt64 {
      get {return _amount ?? 0}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {self._amount = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _userID: String? = nil
    fileprivate var _userName: String? = nil
    fileprivate var _amount: UInt64? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_LocalContract: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contract: Ei_Contract {
    get {return _storage._contract ?? Ei_Contract()}
    set {_uniqueStorage()._contract = newValue}
  }
  /// Returns true if `contract` has been explicitly set.
  var hasContract: Bool {return _storage._contract != nil}
  /// Clears the value of `contract`. Subsequent reads from it will return its default value.
  mutating func clearContract() {_uniqueStorage()._contract = nil}

  var coopIdentifier: String {
    get {return _storage._coopIdentifier ?? String()}
    set {_uniqueStorage()._coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return _storage._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {_uniqueStorage()._coopIdentifier = nil}

  var accepted: Bool {
    get {return _storage._accepted ?? false}
    set {_uniqueStorage()._accepted = newValue}
  }
  /// Returns true if `accepted` has been explicitly set.
  var hasAccepted: Bool {return _storage._accepted != nil}
  /// Clears the value of `accepted`. Subsequent reads from it will return its default value.
  mutating func clearAccepted() {_uniqueStorage()._accepted = nil}

  var timeAccepted: Double {
    get {return _storage._timeAccepted ?? 0}
    set {_uniqueStorage()._timeAccepted = newValue}
  }
  /// Returns true if `timeAccepted` has been explicitly set.
  var hasTimeAccepted: Bool {return _storage._timeAccepted != nil}
  /// Clears the value of `timeAccepted`. Subsequent reads from it will return its default value.
  mutating func clearTimeAccepted() {_uniqueStorage()._timeAccepted = nil}

  var cancelled: Bool {
    get {return _storage._cancelled ?? false}
    set {_uniqueStorage()._cancelled = newValue}
  }
  /// Returns true if `cancelled` has been explicitly set.
  var hasCancelled: Bool {return _storage._cancelled != nil}
  /// Clears the value of `cancelled`. Subsequent reads from it will return its default value.
  mutating func clearCancelled() {_uniqueStorage()._cancelled = nil}

  var new: Bool {
    get {return _storage._new ?? false}
    set {_uniqueStorage()._new = newValue}
  }
  /// Returns true if `new` has been explicitly set.
  var hasNew: Bool {return _storage._new != nil}
  /// Clears the value of `new`. Subsequent reads from it will return its default value.
  mutating func clearNew() {_uniqueStorage()._new = nil}

  var coopSharedEndTime: Double {
    get {return _storage._coopSharedEndTime ?? 0}
    set {_uniqueStorage()._coopSharedEndTime = newValue}
  }
  /// Returns true if `coopSharedEndTime` has been explicitly set.
  var hasCoopSharedEndTime: Bool {return _storage._coopSharedEndTime != nil}
  /// Clears the value of `coopSharedEndTime`. Subsequent reads from it will return its default value.
  mutating func clearCoopSharedEndTime() {_uniqueStorage()._coopSharedEndTime = nil}

  var coopSimulationEndTime: Double {
    get {return _storage._coopSimulationEndTime ?? 0}
    set {_uniqueStorage()._coopSimulationEndTime = newValue}
  }
  /// Returns true if `coopSimulationEndTime` has been explicitly set.
  var hasCoopSimulationEndTime: Bool {return _storage._coopSimulationEndTime != nil}
  /// Clears the value of `coopSimulationEndTime`. Subsequent reads from it will return its default value.
  mutating func clearCoopSimulationEndTime() {_uniqueStorage()._coopSimulationEndTime = nil}

  var coopGracePeriodEndTime: Double {
    get {return _storage._coopGracePeriodEndTime ?? 0}
    set {_uniqueStorage()._coopGracePeriodEndTime = newValue}
  }
  /// Returns true if `coopGracePeriodEndTime` has been explicitly set.
  var hasCoopGracePeriodEndTime: Bool {return _storage._coopGracePeriodEndTime != nil}
  /// Clears the value of `coopGracePeriodEndTime`. Subsequent reads from it will return its default value.
  mutating func clearCoopGracePeriodEndTime() {_uniqueStorage()._coopGracePeriodEndTime = nil}

  var coopContributionFinalized: Bool {
    get {return _storage._coopContributionFinalized ?? false}
    set {_uniqueStorage()._coopContributionFinalized = newValue}
  }
  /// Returns true if `coopContributionFinalized` has been explicitly set.
  var hasCoopContributionFinalized: Bool {return _storage._coopContributionFinalized != nil}
  /// Clears the value of `coopContributionFinalized`. Subsequent reads from it will return its default value.
  mutating func clearCoopContributionFinalized() {_uniqueStorage()._coopContributionFinalized = nil}

  var coopLastUploadedContribution: Double {
    get {return _storage._coopLastUploadedContribution ?? 0}
    set {_uniqueStorage()._coopLastUploadedContribution = newValue}
  }
  /// Returns true if `coopLastUploadedContribution` has been explicitly set.
  var hasCoopLastUploadedContribution: Bool {return _storage._coopLastUploadedContribution != nil}
  /// Clears the value of `coopLastUploadedContribution`. Subsequent reads from it will return its default value.
  mutating func clearCoopLastUploadedContribution() {_uniqueStorage()._coopLastUploadedContribution = nil}

  var coopUserID: String {
    get {return _storage._coopUserID ?? String()}
    set {_uniqueStorage()._coopUserID = newValue}
  }
  /// Returns true if `coopUserID` has been explicitly set.
  var hasCoopUserID: Bool {return _storage._coopUserID != nil}
  /// Clears the value of `coopUserID`. Subsequent reads from it will return its default value.
  mutating func clearCoopUserID() {_uniqueStorage()._coopUserID = nil}

  var coopShareFarm: Bool {
    get {return _storage._coopShareFarm ?? false}
    set {_uniqueStorage()._coopShareFarm = newValue}
  }
  /// Returns true if `coopShareFarm` has been explicitly set.
  var hasCoopShareFarm: Bool {return _storage._coopShareFarm != nil}
  /// Clears the value of `coopShareFarm`. Subsequent reads from it will return its default value.
  mutating func clearCoopShareFarm() {_uniqueStorage()._coopShareFarm = nil}

  var lastAmountWhenRewardGiven: Double {
    get {return _storage._lastAmountWhenRewardGiven ?? 0}
    set {_uniqueStorage()._lastAmountWhenRewardGiven = newValue}
  }
  /// Returns true if `lastAmountWhenRewardGiven` has been explicitly set.
  var hasLastAmountWhenRewardGiven: Bool {return _storage._lastAmountWhenRewardGiven != nil}
  /// Clears the value of `lastAmountWhenRewardGiven`. Subsequent reads from it will return its default value.
  mutating func clearLastAmountWhenRewardGiven() {_uniqueStorage()._lastAmountWhenRewardGiven = nil}

  var numGoalsAchieved: UInt32 {
    get {return _storage._numGoalsAchieved ?? 0}
    set {_uniqueStorage()._numGoalsAchieved = newValue}
  }
  /// Returns true if `numGoalsAchieved` has been explicitly set.
  var hasNumGoalsAchieved: Bool {return _storage._numGoalsAchieved != nil}
  /// Clears the value of `numGoalsAchieved`. Subsequent reads from it will return its default value.
  mutating func clearNumGoalsAchieved() {_uniqueStorage()._numGoalsAchieved = nil}

  var maxFarmSizeReached: Double {
    get {return _storage._maxFarmSizeReached ?? 0}
    set {_uniqueStorage()._maxFarmSizeReached = newValue}
  }
  /// Returns true if `maxFarmSizeReached` has been explicitly set.
  var hasMaxFarmSizeReached: Bool {return _storage._maxFarmSizeReached != nil}
  /// Clears the value of `maxFarmSizeReached`. Subsequent reads from it will return its default value.
  mutating func clearMaxFarmSizeReached() {_uniqueStorage()._maxFarmSizeReached = nil}

  var boostsUsed: UInt32 {
    get {return _storage._boostsUsed ?? 0}
    set {_uniqueStorage()._boostsUsed = newValue}
  }
  /// Returns true if `boostsUsed` has been explicitly set.
  var hasBoostsUsed: Bool {return _storage._boostsUsed != nil}
  /// Clears the value of `boostsUsed`. Subsequent reads from it will return its default value.
  mutating func clearBoostsUsed() {_uniqueStorage()._boostsUsed = nil}

  var pointsReplay: Bool {
    get {return _storage._pointsReplay ?? false}
    set {_uniqueStorage()._pointsReplay = newValue}
  }
  /// Returns true if `pointsReplay` has been explicitly set.
  var hasPointsReplay: Bool {return _storage._pointsReplay != nil}
  /// Clears the value of `pointsReplay`. Subsequent reads from it will return its default value.
  mutating func clearPointsReplay() {_uniqueStorage()._pointsReplay = nil}

  var league: UInt32 {
    get {return _storage._league ?? 0}
    set {_uniqueStorage()._league = newValue}
  }
  /// Returns true if `league` has been explicitly set.
  var hasLeague: Bool {return _storage._league != nil}
  /// Clears the value of `league`. Subsequent reads from it will return its default value.
  mutating func clearLeague() {_uniqueStorage()._league = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _storage._grade ?? .gradeUnset}
    set {_uniqueStorage()._grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return _storage._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {_uniqueStorage()._grade = nil}

  var lastNagTime: Double {
    get {return _storage._lastNagTime ?? 0}
    set {_uniqueStorage()._lastNagTime = newValue}
  }
  /// Returns true if `lastNagTime` has been explicitly set.
  var hasLastNagTime: Bool {return _storage._lastNagTime != nil}
  /// Clears the value of `lastNagTime`. Subsequent reads from it will return its default value.
  mutating func clearLastNagTime() {_uniqueStorage()._lastNagTime = nil}

  var evaluation: Ei_ContractEvaluation {
    get {return _storage._evaluation ?? Ei_ContractEvaluation()}
    set {_uniqueStorage()._evaluation = newValue}
  }
  /// Returns true if `evaluation` has been explicitly set.
  var hasEvaluation: Bool {return _storage._evaluation != nil}
  /// Clears the value of `evaluation`. Subsequent reads from it will return its default value.
  mutating func clearEvaluation() {_uniqueStorage()._evaluation = nil}

  var reportedUuids: [String] {
    get {return _storage._reportedUuids}
    set {_uniqueStorage()._reportedUuids = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_MyContracts: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var contractIdsSeen: [String] {
    get {return _storage._contractIdsSeen}
    set {_uniqueStorage()._contractIdsSeen = newValue}
  }

  var contracts: [Ei_LocalContract] {
    get {return _storage._contracts}
    set {_uniqueStorage()._contracts = newValue}
  }

  var archive: [Ei_LocalContract] {
    get {return _storage._archive}
    set {_uniqueStorage()._archive = newValue}
  }

  var currentCoopStatuses: [Ei_ContractCoopStatusResponse] {
    get {return _storage._currentCoopStatuses}
    set {_uniqueStorage()._currentCoopStatuses = newValue}
  }

  var lastCpi: Ei_ContractPlayerInfo {
    get {return _storage._lastCpi ?? Ei_ContractPlayerInfo()}
    set {_uniqueStorage()._lastCpi = newValue}
  }
  /// Returns true if `lastCpi` has been explicitly set.
  var hasLastCpi: Bool {return _storage._lastCpi != nil}
  /// Clears the value of `lastCpi`. Subsequent reads from it will return its default value.
  mutating func clearLastCpi() {_uniqueStorage()._lastCpi = nil}

  var initialGradeRevealed: Bool {
    get {return _storage._initialGradeRevealed ?? false}
    set {_uniqueStorage()._initialGradeRevealed = newValue}
  }
  /// Returns true if `initialGradeRevealed` has been explicitly set.
  var hasInitialGradeRevealed: Bool {return _storage._initialGradeRevealed != nil}
  /// Clears the value of `initialGradeRevealed`. Subsequent reads from it will return its default value.
  mutating func clearInitialGradeRevealed() {_uniqueStorage()._initialGradeRevealed = nil}

  var lastGradeProgressShown: Double {
    get {return _storage._lastGradeProgressShown ?? 0}
    set {_uniqueStorage()._lastGradeProgressShown = newValue}
  }
  /// Returns true if `lastGradeProgressShown` has been explicitly set.
  var hasLastGradeProgressShown: Bool {return _storage._lastGradeProgressShown != nil}
  /// Clears the value of `lastGradeProgressShown`. Subsequent reads from it will return its default value.
  mutating func clearLastGradeProgressShown() {_uniqueStorage()._lastGradeProgressShown = nil}

  var showAdvancedEvaluations: Bool {
    get {return _storage._showAdvancedEvaluations ?? false}
    set {_uniqueStorage()._showAdvancedEvaluations = newValue}
  }
  /// Returns true if `showAdvancedEvaluations` has been explicitly set.
  var hasShowAdvancedEvaluations: Bool {return _storage._showAdvancedEvaluations != nil}
  /// Clears the value of `showAdvancedEvaluations`. Subsequent reads from it will return its default value.
  mutating func clearShowAdvancedEvaluations() {_uniqueStorage()._showAdvancedEvaluations = nil}

  var customEggInfo: [Ei_CustomEgg] {
    get {return _storage._customEggInfo}
    set {_uniqueStorage()._customEggInfo = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_QueryCoopRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var league: UInt32 {
    get {return _league ?? 0}
    set {_league = newValue}
  }
  /// Returns true if `league` has been explicitly set.
  var hasLeague: Bool {return self._league != nil}
  /// Clears the value of `league`. Subsequent reads from it will return its default value.
  mutating func clearLeague() {self._league = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _grade ?? .gradeUnset}
    set {_grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return self._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {self._grade = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _league: UInt32? = nil
  fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_QueryCoopResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var exists: Bool {
    get {return _exists ?? false}
    set {_exists = newValue}
  }
  /// Returns true if `exists` has been explicitly set.
  var hasExists: Bool {return self._exists != nil}
  /// Clears the value of `exists`. Subsequent reads from it will return its default value.
  mutating func clearExists() {self._exists = nil}

  var full: Bool {
    get {return _full ?? false}
    set {_full = newValue}
  }
  /// Returns true if `full` has been explicitly set.
  var hasFull: Bool {return self._full != nil}
  /// Clears the value of `full`. Subsequent reads from it will return its default value.
  mutating func clearFull() {self._full = nil}

  var expired: Bool {
    get {return _expired ?? false}
    set {_expired = newValue}
  }
  /// Returns true if `expired` has been explicitly set.
  var hasExpired: Bool {return self._expired != nil}
  /// Clears the value of `expired`. Subsequent reads from it will return its default value.
  mutating func clearExpired() {self._expired = nil}

  var differentLeague: Bool {
    get {return _differentLeague ?? false}
    set {_differentLeague = newValue}
  }
  /// Returns true if `differentLeague` has been explicitly set.
  var hasDifferentLeague: Bool {return self._differentLeague != nil}
  /// Clears the value of `differentLeague`. Subsequent reads from it will return its default value.
  mutating func clearDifferentLeague() {self._differentLeague = nil}

  var differentGrade: Bool {
    get {return _differentGrade ?? false}
    set {_differentGrade = newValue}
  }
  /// Returns true if `differentGrade` has been explicitly set.
  var hasDifferentGrade: Bool {return self._differentGrade != nil}
  /// Clears the value of `differentGrade`. Subsequent reads from it will return its default value.
  mutating func clearDifferentGrade() {self._differentGrade = nil}

  var ccOnly: Bool {
    get {return _ccOnly ?? false}
    set {_ccOnly = newValue}
  }
  /// Returns true if `ccOnly` has been explicitly set.
  var hasCcOnly: Bool {return self._ccOnly != nil}
  /// Clears the value of `ccOnly`. Subsequent reads from it will return its default value.
  mutating func clearCcOnly() {self._ccOnly = nil}

  var banned: Bool {
    get {return _banned ?? false}
    set {_banned = newValue}
  }
  /// Returns true if `banned` has been explicitly set.
  var hasBanned: Bool {return self._banned != nil}
  /// Clears the value of `banned`. Subsequent reads from it will return its default value.
  mutating func clearBanned() {self._banned = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _exists: Bool? = nil
  fileprivate var _full: Bool? = nil
  fileprivate var _expired: Bool? = nil
  fileprivate var _differentLeague: Bool? = nil
  fileprivate var _differentGrade: Bool? = nil
  fileprivate var _ccOnly: Bool? = nil
  fileprivate var _banned: Bool? = nil
}

struct Ei_CreateCoopRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var contractIdentifier: String {
    get {return _storage._contractIdentifier ?? String()}
    set {_uniqueStorage()._contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return _storage._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {_uniqueStorage()._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _storage._coopIdentifier ?? String()}
    set {_uniqueStorage()._coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return _storage._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {_uniqueStorage()._coopIdentifier = nil}

  var `public`: Bool {
    get {return _storage._public ?? false}
    set {_uniqueStorage()._public = newValue}
  }
  /// Returns true if ``public`` has been explicitly set.
  var hasPublic: Bool {return _storage._public != nil}
  /// Clears the value of ``public``. Subsequent reads from it will return its default value.
  mutating func clearPublic() {_uniqueStorage()._public = nil}

  var ccOnly: Bool {
    get {return _storage._ccOnly ?? false}
    set {_uniqueStorage()._ccOnly = newValue}
  }
  /// Returns true if `ccOnly` has been explicitly set.
  var hasCcOnly: Bool {return _storage._ccOnly != nil}
  /// Clears the value of `ccOnly`. Subsequent reads from it will return its default value.
  mutating func clearCcOnly() {_uniqueStorage()._ccOnly = nil}

  var allowAllGrades: Bool {
    get {return _storage._allowAllGrades ?? false}
    set {_uniqueStorage()._allowAllGrades = newValue}
  }
  /// Returns true if `allowAllGrades` has been explicitly set.
  var hasAllowAllGrades: Bool {return _storage._allowAllGrades != nil}
  /// Clears the value of `allowAllGrades`. Subsequent reads from it will return its default value.
  mutating func clearAllowAllGrades() {_uniqueStorage()._allowAllGrades = nil}

  var secondsRemaining: Double {
    get {return _storage._secondsRemaining ?? 0}
    set {_uniqueStorage()._secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return _storage._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {_uniqueStorage()._secondsRemaining = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var userName: String {
    get {return _storage._userName ?? String()}
    set {_uniqueStorage()._userName = newValue}
  }
  /// Returns true if `userName` has been explicitly set.
  var hasUserName: Bool {return _storage._userName != nil}
  /// Clears the value of `userName`. Subsequent reads from it will return its default value.
  mutating func clearUserName() {_uniqueStorage()._userName = nil}

  var soulPower: Double {
    get {return _storage._soulPower ?? 0}
    set {_uniqueStorage()._soulPower = newValue}
  }
  /// Returns true if `soulPower` has been explicitly set.
  var hasSoulPower: Bool {return _storage._soulPower != nil}
  /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
  mutating func clearSoulPower() {_uniqueStorage()._soulPower = nil}

  var eop: Double {
    get {return _storage._eop ?? 0}
    set {_uniqueStorage()._eop = newValue}
  }
  /// Returns true if `eop` has been explicitly set.
  var hasEop: Bool {return _storage._eop != nil}
  /// Clears the value of `eop`. Subsequent reads from it will return its default value.
  mutating func clearEop() {_uniqueStorage()._eop = nil}

  var league: UInt32 {
    get {return _storage._league ?? 0}
    set {_uniqueStorage()._league = newValue}
  }
  /// Returns true if `league` has been explicitly set.
  var hasLeague: Bool {return _storage._league != nil}
  /// Clears the value of `league`. Subsequent reads from it will return its default value.
  mutating func clearLeague() {_uniqueStorage()._league = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _storage._grade ?? .gradeUnset}
    set {_uniqueStorage()._grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return _storage._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {_uniqueStorage()._grade = nil}

  var pointsReplay: Bool {
    get {return _storage._pointsReplay ?? false}
    set {_uniqueStorage()._pointsReplay = newValue}
  }
  /// Returns true if `pointsReplay` has been explicitly set.
  var hasPointsReplay: Bool {return _storage._pointsReplay != nil}
  /// Clears the value of `pointsReplay`. Subsequent reads from it will return its default value.
  mutating func clearPointsReplay() {_uniqueStorage()._pointsReplay = nil}

  var platform: Ei_Platform {
    get {return _storage._platform ?? .unknownPlatform}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  var clientVersion: UInt32 {
    get {return _storage._clientVersion ?? 0}
    set {_uniqueStorage()._clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return _storage._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {_uniqueStorage()._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_CreateCoopResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _message: String? = nil
}

struct Ei_JoinCoopRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var contractIdentifier: String {
    get {return _storage._contractIdentifier ?? String()}
    set {_uniqueStorage()._contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return _storage._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {_uniqueStorage()._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _storage._coopIdentifier ?? String()}
    set {_uniqueStorage()._coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return _storage._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {_uniqueStorage()._coopIdentifier = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var userName: String {
    get {return _storage._userName ?? String()}
    set {_uniqueStorage()._userName = newValue}
  }
  /// Returns true if `userName` has been explicitly set.
  var hasUserName: Bool {return _storage._userName != nil}
  /// Clears the value of `userName`. Subsequent reads from it will return its default value.
  mutating func clearUserName() {_uniqueStorage()._userName = nil}

  var soulPower: Double {
    get {return _storage._soulPower ?? 0}
    set {_uniqueStorage()._soulPower = newValue}
  }
  /// Returns true if `soulPower` has been explicitly set.
  var hasSoulPower: Bool {return _storage._soulPower != nil}
  /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
  mutating func clearSoulPower() {_uniqueStorage()._soulPower = nil}

  var eop: Double {
    get {return _storage._eop ?? 0}
    set {_uniqueStorage()._eop = newValue}
  }
  /// Returns true if `eop` has been explicitly set.
  var hasEop: Bool {return _storage._eop != nil}
  /// Clears the value of `eop`. Subsequent reads from it will return its default value.
  mutating func clearEop() {_uniqueStorage()._eop = nil}

  var league: UInt32 {
    get {return _storage._league ?? 0}
    set {_uniqueStorage()._league = newValue}
  }
  /// Returns true if `league` has been explicitly set.
  var hasLeague: Bool {return _storage._league != nil}
  /// Clears the value of `league`. Subsequent reads from it will return its default value.
  mutating func clearLeague() {_uniqueStorage()._league = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _storage._grade ?? .gradeUnset}
    set {_uniqueStorage()._grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return _storage._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {_uniqueStorage()._grade = nil}

  var pointsReplay: Bool {
    get {return _storage._pointsReplay ?? false}
    set {_uniqueStorage()._pointsReplay = newValue}
  }
  /// Returns true if `pointsReplay` has been explicitly set.
  var hasPointsReplay: Bool {return _storage._pointsReplay != nil}
  /// Clears the value of `pointsReplay`. Subsequent reads from it will return its default value.
  mutating func clearPointsReplay() {_uniqueStorage()._pointsReplay = nil}

  var platform: Ei_Platform {
    get {return _storage._platform ?? .unknownPlatform}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  var secondsRemaining: Double {
    get {return _storage._secondsRemaining ?? 0}
    set {_uniqueStorage()._secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return _storage._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {_uniqueStorage()._secondsRemaining = nil}

  var clientVersion: UInt32 {
    get {return _storage._clientVersion ?? 0}
    set {_uniqueStorage()._clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return _storage._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {_uniqueStorage()._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_JoinCoopResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var banned: Bool {
    get {return _banned ?? false}
    set {_banned = newValue}
  }
  /// Returns true if `banned` has been explicitly set.
  var hasBanned: Bool {return self._banned != nil}
  /// Clears the value of `banned`. Subsequent reads from it will return its default value.
  mutating func clearBanned() {self._banned = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var secondsRemaining: Double {
    get {return _secondsRemaining ?? 0}
    set {_secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return self._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {self._secondsRemaining = nil}

  var matchPercent: Double {
    get {return _matchPercent ?? 0}
    set {_matchPercent = newValue}
  }
  /// Returns true if `matchPercent` has been explicitly set.
  var hasMatchPercent: Bool {return self._matchPercent != nil}
  /// Clears the value of `matchPercent`. Subsequent reads from it will return its default value.
  mutating func clearMatchPercent() {self._matchPercent = nil}

  var numMembers: UInt32 {
    get {return _numMembers ?? 0}
    set {_numMembers = newValue}
  }
  /// Returns true if `numMembers` has been explicitly set.
  var hasNumMembers: Bool {return self._numMembers != nil}
  /// Clears the value of `numMembers`. Subsequent reads from it will return its default value.
  mutating func clearNumMembers() {self._numMembers = nil}

  var status: Ei_ContractCoopStatusResponse.Status {
    get {return _status ?? .unknown}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _grade ?? .gradeUnset}
    set {_grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return self._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {self._grade = nil}

  var canStart: Bool {
    get {return _canStart ?? false}
    set {_canStart = newValue}
  }
  /// Returns true if `canStart` has been explicitly set.
  var hasCanStart: Bool {return self._canStart != nil}
  /// Clears the value of `canStart`. Subsequent reads from it will return its default value.
  mutating func clearCanStart() {self._canStart = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _message: String? = nil
  fileprivate var _banned: Bool? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _secondsRemaining: Double? = nil
  fileprivate var _matchPercent: Double? = nil
  fileprivate var _numMembers: UInt32? = nil
  fileprivate var _status: Ei_ContractCoopStatusResponse.Status? = nil
  fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
  fileprivate var _canStart: Bool? = nil
}

struct Ei_AutoJoinCoopRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var contractIdentifier: String {
    get {return _storage._contractIdentifier ?? String()}
    set {_uniqueStorage()._contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return _storage._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {_uniqueStorage()._contractIdentifier = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var userName: String {
    get {return _storage._userName ?? String()}
    set {_uniqueStorage()._userName = newValue}
  }
  /// Returns true if `userName` has been explicitly set.
  var hasUserName: Bool {return _storage._userName != nil}
  /// Clears the value of `userName`. Subsequent reads from it will return its default value.
  mutating func clearUserName() {_uniqueStorage()._userName = nil}

  var soulPower: Double {
    get {return _storage._soulPower ?? 0}
    set {_uniqueStorage()._soulPower = newValue}
  }
  /// Returns true if `soulPower` has been explicitly set.
  var hasSoulPower: Bool {return _storage._soulPower != nil}
  /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
  mutating func clearSoulPower() {_uniqueStorage()._soulPower = nil}

  var eop: Double {
    get {return _storage._eop ?? 0}
    set {_uniqueStorage()._eop = newValue}
  }
  /// Returns true if `eop` has been explicitly set.
  var hasEop: Bool {return _storage._eop != nil}
  /// Clears the value of `eop`. Subsequent reads from it will return its default value.
  mutating func clearEop() {_uniqueStorage()._eop = nil}

  var league: UInt32 {
    get {return _storage._league ?? 0}
    set {_uniqueStorage()._league = newValue}
  }
  /// Returns true if `league` has been explicitly set.
  var hasLeague: Bool {return _storage._league != nil}
  /// Clears the value of `league`. Subsequent reads from it will return its default value.
  mutating func clearLeague() {_uniqueStorage()._league = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _storage._grade ?? .gradeUnset}
    set {_uniqueStorage()._grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return _storage._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {_uniqueStorage()._grade = nil}

  var pointsReplay: Bool {
    get {return _storage._pointsReplay ?? false}
    set {_uniqueStorage()._pointsReplay = newValue}
  }
  /// Returns true if `pointsReplay` has been explicitly set.
  var hasPointsReplay: Bool {return _storage._pointsReplay != nil}
  /// Clears the value of `pointsReplay`. Subsequent reads from it will return its default value.
  mutating func clearPointsReplay() {_uniqueStorage()._pointsReplay = nil}

  var secondsRemaining: Double {
    get {return _storage._secondsRemaining ?? 0}
    set {_uniqueStorage()._secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return _storage._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {_uniqueStorage()._secondsRemaining = nil}

  var platform: Ei_Platform {
    get {return _storage._platform ?? .unknownPlatform}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  var clientVersion: UInt32 {
    get {return _storage._clientVersion ?? 0}
    set {_uniqueStorage()._clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return _storage._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {_uniqueStorage()._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_UpdateCoopPermissionsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var requestingUserID: String {
    get {return _requestingUserID ?? String()}
    set {_requestingUserID = newValue}
  }
  /// Returns true if `requestingUserID` has been explicitly set.
  var hasRequestingUserID: Bool {return self._requestingUserID != nil}
  /// Clears the value of `requestingUserID`. Subsequent reads from it will return its default value.
  mutating func clearRequestingUserID() {self._requestingUserID = nil}

  var `public`: Bool {
    get {return _public ?? false}
    set {_public = newValue}
  }
  /// Returns true if ``public`` has been explicitly set.
  var hasPublic: Bool {return self._public != nil}
  /// Clears the value of ``public``. Subsequent reads from it will return its default value.
  mutating func clearPublic() {self._public = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _requestingUserID: String? = nil
  fileprivate var _public: Bool? = nil
  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_UpdateCoopPermissionsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _message: String? = nil
}

struct Ei_LeaveCoopRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var playerIdentifier: String {
    get {return _playerIdentifier ?? String()}
    set {_playerIdentifier = newValue}
  }
  /// Returns true if `playerIdentifier` has been explicitly set.
  var hasPlayerIdentifier: Bool {return self._playerIdentifier != nil}
  /// Clears the value of `playerIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearPlayerIdentifier() {self._playerIdentifier = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _playerIdentifier: String? = nil
  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_GiftPlayerCoopRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var playerIdentifier: String {
    get {return _playerIdentifier ?? String()}
    set {_playerIdentifier = newValue}
  }
  /// Returns true if `playerIdentifier` has been explicitly set.
  var hasPlayerIdentifier: Bool {return self._playerIdentifier != nil}
  /// Clears the value of `playerIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearPlayerIdentifier() {self._playerIdentifier = nil}

  var requestingUserID: String {
    get {return _requestingUserID ?? String()}
    set {_requestingUserID = newValue}
  }
  /// Returns true if `requestingUserID` has been explicitly set.
  var hasRequestingUserID: Bool {return self._requestingUserID != nil}
  /// Clears the value of `requestingUserID`. Subsequent reads from it will return its default value.
  mutating func clearRequestingUserID() {self._requestingUserID = nil}

  var requestingUserName: String {
    get {return _requestingUserName ?? String()}
    set {_requestingUserName = newValue}
  }
  /// Returns true if `requestingUserName` has been explicitly set.
  var hasRequestingUserName: Bool {return self._requestingUserName != nil}
  /// Clears the value of `requestingUserName`. Subsequent reads from it will return its default value.
  mutating func clearRequestingUserName() {self._requestingUserName = nil}

  var amount: UInt32 {
    get {return _amount ?? 0}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _playerIdentifier: String? = nil
  fileprivate var _requestingUserID: String? = nil
  fileprivate var _requestingUserName: String? = nil
  fileprivate var _amount: UInt32? = nil
  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_SendChickenRunCoopRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var playerIdentifier: String {
    get {return _playerIdentifier ?? String()}
    set {_playerIdentifier = newValue}
  }
  /// Returns true if `playerIdentifier` has been explicitly set.
  var hasPlayerIdentifier: Bool {return self._playerIdentifier != nil}
  /// Clears the value of `playerIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearPlayerIdentifier() {self._playerIdentifier = nil}

  var requestingUserID: String {
    get {return _requestingUserID ?? String()}
    set {_requestingUserID = newValue}
  }
  /// Returns true if `requestingUserID` has been explicitly set.
  var hasRequestingUserID: Bool {return self._requestingUserID != nil}
  /// Clears the value of `requestingUserID`. Subsequent reads from it will return its default value.
  mutating func clearRequestingUserID() {self._requestingUserID = nil}

  var requestingUserName: String {
    get {return _requestingUserName ?? String()}
    set {_requestingUserName = newValue}
  }
  /// Returns true if `requestingUserName` has been explicitly set.
  var hasRequestingUserName: Bool {return self._requestingUserName != nil}
  /// Clears the value of `requestingUserName`. Subsequent reads from it will return its default value.
  mutating func clearRequestingUserName() {self._requestingUserName = nil}

  var farmPop: UInt64 {
    get {return _farmPop ?? 0}
    set {_farmPop = newValue}
  }
  /// Returns true if `farmPop` has been explicitly set.
  var hasFarmPop: Bool {return self._farmPop != nil}
  /// Clears the value of `farmPop`. Subsequent reads from it will return its default value.
  mutating func clearFarmPop() {self._farmPop = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _playerIdentifier: String? = nil
  fileprivate var _requestingUserID: String? = nil
  fileprivate var _requestingUserName: String? = nil
  fileprivate var _farmPop: UInt64? = nil
  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_ReportPlayerCoopRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var reason: Ei_ReportPlayerCoopRequest.Reason {
    get {return _reason ?? .unknown}
    set {_reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {self._reason = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Reason: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unknown = 0
    case offensiveName = 1
    case cheating = 2
    case leeching = 3

    init() {
      self = .unknown
    }

  }

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _reason: Ei_ReportPlayerCoopRequest.Reason? = nil
}

struct Ei_KickPlayerCoopRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _coopIdentifier ?? String()}
    set {_coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return self._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {self._coopIdentifier = nil}

  var playerIdentifier: String {
    get {return _playerIdentifier ?? String()}
    set {_playerIdentifier = newValue}
  }
  /// Returns true if `playerIdentifier` has been explicitly set.
  var hasPlayerIdentifier: Bool {return self._playerIdentifier != nil}
  /// Clears the value of `playerIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearPlayerIdentifier() {self._playerIdentifier = nil}

  var requestingUserID: String {
    get {return _requestingUserID ?? String()}
    set {_requestingUserID = newValue}
  }
  /// Returns true if `requestingUserID` has been explicitly set.
  var hasRequestingUserID: Bool {return self._requestingUserID != nil}
  /// Clears the value of `requestingUserID`. Subsequent reads from it will return its default value.
  mutating func clearRequestingUserID() {self._requestingUserID = nil}

  var reason: Ei_KickPlayerCoopRequest.Reason {
    get {return _reason ?? .invalid}
    set {_reason = newValue}
  }
  /// Returns true if `reason` has been explicitly set.
  var hasReason: Bool {return self._reason != nil}
  /// Clears the value of `reason`. Subsequent reads from it will return its default value.
  mutating func clearReason() {self._reason = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Reason: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case invalid = 0
    case cheater = 1
    case idle = 2
    case leech = 3
    case `private` = 4

    init() {
      self = .invalid
    }

  }

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _coopIdentifier: String? = nil
  fileprivate var _playerIdentifier: String? = nil
  fileprivate var _requestingUserID: String? = nil
  fileprivate var _reason: Ei_KickPlayerCoopRequest.Reason? = nil
  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_IdleSessionSummary: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var timeAway: Double {
    get {return _timeAway ?? 0}
    set {_timeAway = newValue}
  }
  /// Returns true if `timeAway` has been explicitly set.
  var hasTimeAway: Bool {return self._timeAway != nil}
  /// Clears the value of `timeAway`. Subsequent reads from it will return its default value.
  mutating func clearTimeAway() {self._timeAway = nil}

  var timeSimulated: Double {
    get {return _timeSimulated ?? 0}
    set {_timeSimulated = newValue}
  }
  /// Returns true if `timeSimulated` has been explicitly set.
  var hasTimeSimulated: Bool {return self._timeSimulated != nil}
  /// Clears the value of `timeSimulated`. Subsequent reads from it will return its default value.
  mutating func clearTimeSimulated() {self._timeSimulated = nil}

  var silosOwned: UInt32 {
    get {return _silosOwned ?? 0}
    set {_silosOwned = newValue}
  }
  /// Returns true if `silosOwned` has been explicitly set.
  var hasSilosOwned: Bool {return self._silosOwned != nil}
  /// Clears the value of `silosOwned`. Subsequent reads from it will return its default value.
  mutating func clearSilosOwned() {self._silosOwned = nil}

  var averageElr: Double {
    get {return _averageElr ?? 0}
    set {_averageElr = newValue}
  }
  /// Returns true if `averageElr` has been explicitly set.
  var hasAverageElr: Bool {return self._averageElr != nil}
  /// Clears the value of `averageElr`. Subsequent reads from it will return its default value.
  mutating func clearAverageElr() {self._averageElr = nil}

  var averageMsr: Double {
    get {return _averageMsr ?? 0}
    set {_averageMsr = newValue}
  }
  /// Returns true if `averageMsr` has been explicitly set.
  var hasAverageMsr: Bool {return self._averageMsr != nil}
  /// Clears the value of `averageMsr`. Subsequent reads from it will return its default value.
  mutating func clearAverageMsr() {self._averageMsr = nil}

  var averageEggDeliveryRate: Double {
    get {return _averageEggDeliveryRate ?? 0}
    set {_averageEggDeliveryRate = newValue}
  }
  /// Returns true if `averageEggDeliveryRate` has been explicitly set.
  var hasAverageEggDeliveryRate: Bool {return self._averageEggDeliveryRate != nil}
  /// Clears the value of `averageEggDeliveryRate`. Subsequent reads from it will return its default value.
  mutating func clearAverageEggDeliveryRate() {self._averageEggDeliveryRate = nil}

  var lastEggDeliveryRate: Double {
    get {return _lastEggDeliveryRate ?? 0}
    set {_lastEggDeliveryRate = newValue}
  }
  /// Returns true if `lastEggDeliveryRate` has been explicitly set.
  var hasLastEggDeliveryRate: Bool {return self._lastEggDeliveryRate != nil}
  /// Clears the value of `lastEggDeliveryRate`. Subsequent reads from it will return its default value.
  mutating func clearLastEggDeliveryRate() {self._lastEggDeliveryRate = nil}

  var eggsDelivered: Double {
    get {return _eggsDelivered ?? 0}
    set {_eggsDelivered = newValue}
  }
  /// Returns true if `eggsDelivered` has been explicitly set.
  var hasEggsDelivered: Bool {return self._eggsDelivered != nil}
  /// Clears the value of `eggsDelivered`. Subsequent reads from it will return its default value.
  mutating func clearEggsDelivered() {self._eggsDelivered = nil}

  var stats: [Ei_IdleSessionSummary.Stat] = []

  var farmIndex: UInt32 {
    get {return _farmIndex ?? 0}
    set {_farmIndex = newValue}
  }
  /// Returns true if `farmIndex` has been explicitly set.
  var hasFarmIndex: Bool {return self._farmIndex != nil}
  /// Clears the value of `farmIndex`. Subsequent reads from it will return its default value.
  mutating func clearFarmIndex() {self._farmIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Stat: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {self._name = nil}

    var min: Double {
      get {return _min ?? 0}
      set {_min = newValue}
    }
    /// Returns true if `min` has been explicitly set.
    var hasMin: Bool {return self._min != nil}
    /// Clears the value of `min`. Subsequent reads from it will return its default value.
    mutating func clearMin() {self._min = nil}

    var max: Double {
      get {return _max ?? 0}
      set {_max = newValue}
    }
    /// Returns true if `max` has been explicitly set.
    var hasMax: Bool {return self._max != nil}
    /// Clears the value of `max`. Subsequent reads from it will return its default value.
    mutating func clearMax() {self._max = nil}

    var avg: Double {
      get {return _avg ?? 0}
      set {_avg = newValue}
    }
    /// Returns true if `avg` has been explicitly set.
    var hasAvg: Bool {return self._avg != nil}
    /// Clears the value of `avg`. Subsequent reads from it will return its default value.
    mutating func clearAvg() {self._avg = nil}

    var totalTime: Double {
      get {return _totalTime ?? 0}
      set {_totalTime = newValue}
    }
    /// Returns true if `totalTime` has been explicitly set.
    var hasTotalTime: Bool {return self._totalTime != nil}
    /// Clears the value of `totalTime`. Subsequent reads from it will return its default value.
    mutating func clearTotalTime() {self._totalTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _name: String? = nil
    fileprivate var _min: Double? = nil
    fileprivate var _max: Double? = nil
    fileprivate var _avg: Double? = nil
    fileprivate var _totalTime: Double? = nil
  }

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _timeAway: Double? = nil
  fileprivate var _timeSimulated: Double? = nil
  fileprivate var _silosOwned: UInt32? = nil
  fileprivate var _averageElr: Double? = nil
  fileprivate var _averageMsr: Double? = nil
  fileprivate var _averageEggDeliveryRate: Double? = nil
  fileprivate var _lastEggDeliveryRate: Double? = nil
  fileprivate var _eggsDelivered: Double? = nil
  fileprivate var _farmIndex: UInt32? = nil
}

struct Ei_ContractCoopStatusUpdateRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var contractIdentifier: String {
    get {return _storage._contractIdentifier ?? String()}
    set {_uniqueStorage()._contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return _storage._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {_uniqueStorage()._contractIdentifier = nil}

  var coopIdentifier: String {
    get {return _storage._coopIdentifier ?? String()}
    set {_uniqueStorage()._coopIdentifier = newValue}
  }
  /// Returns true if `coopIdentifier` has been explicitly set.
  var hasCoopIdentifier: Bool {return _storage._coopIdentifier != nil}
  /// Clears the value of `coopIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearCoopIdentifier() {_uniqueStorage()._coopIdentifier = nil}

  var pushUserID: String {
    get {return _storage._pushUserID ?? String()}
    set {_uniqueStorage()._pushUserID = newValue}
  }
  /// Returns true if `pushUserID` has been explicitly set.
  var hasPushUserID: Bool {return _storage._pushUserID != nil}
  /// Clears the value of `pushUserID`. Subsequent reads from it will return its default value.
  mutating func clearPushUserID() {_uniqueStorage()._pushUserID = nil}

  var amount: Double {
    get {return _storage._amount ?? 0}
    set {_uniqueStorage()._amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return _storage._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {_uniqueStorage()._amount = nil}

  var rate: Double {
    get {return _storage._rate ?? 0}
    set {_uniqueStorage()._rate = newValue}
  }
  /// Returns true if `rate` has been explicitly set.
  var hasRate: Bool {return _storage._rate != nil}
  /// Clears the value of `rate`. Subsequent reads from it will return its default value.
  mutating func clearRate() {_uniqueStorage()._rate = nil}

  var timeCheatsDetected: UInt32 {
    get {return _storage._timeCheatsDetected ?? 0}
    set {_uniqueStorage()._timeCheatsDetected = newValue}
  }
  /// Returns true if `timeCheatsDetected` has been explicitly set.
  var hasTimeCheatsDetected: Bool {return _storage._timeCheatsDetected != nil}
  /// Clears the value of `timeCheatsDetected`. Subsequent reads from it will return its default value.
  mutating func clearTimeCheatsDetected() {_uniqueStorage()._timeCheatsDetected = nil}

  var totalStepTime: Double {
    get {return _storage._totalStepTime ?? 0}
    set {_uniqueStorage()._totalStepTime = newValue}
  }
  /// Returns true if `totalStepTime` has been explicitly set.
  var hasTotalStepTime: Bool {return _storage._totalStepTime != nil}
  /// Clears the value of `totalStepTime`. Subsequent reads from it will return its default value.
  mutating func clearTotalStepTime() {_uniqueStorage()._totalStepTime = nil}

  var soulPower: Double {
    get {return _storage._soulPower ?? 0}
    set {_uniqueStorage()._soulPower = newValue}
  }
  /// Returns true if `soulPower` has been explicitly set.
  var hasSoulPower: Bool {return _storage._soulPower != nil}
  /// Clears the value of `soulPower`. Subsequent reads from it will return its default value.
  mutating func clearSoulPower() {_uniqueStorage()._soulPower = nil}

  var eop: UInt32 {
    get {return _storage._eop ?? 0}
    set {_uniqueStorage()._eop = newValue}
  }
  /// Returns true if `eop` has been explicitly set.
  var hasEop: Bool {return _storage._eop != nil}
  /// Clears the value of `eop`. Subsequent reads from it will return its default value.
  mutating func clearEop() {_uniqueStorage()._eop = nil}

  var boostTokens: UInt32 {
    get {return _storage._boostTokens ?? 0}
    set {_uniqueStorage()._boostTokens = newValue}
  }
  /// Returns true if `boostTokens` has been explicitly set.
  var hasBoostTokens: Bool {return _storage._boostTokens != nil}
  /// Clears the value of `boostTokens`. Subsequent reads from it will return its default value.
  mutating func clearBoostTokens() {_uniqueStorage()._boostTokens = nil}

  var boostTokensSpent: UInt32 {
    get {return _storage._boostTokensSpent ?? 0}
    set {_uniqueStorage()._boostTokensSpent = newValue}
  }
  /// Returns true if `boostTokensSpent` has been explicitly set.
  var hasBoostTokensSpent: Bool {return _storage._boostTokensSpent != nil}
  /// Clears the value of `boostTokensSpent`. Subsequent reads from it will return its default value.
  mutating func clearBoostTokensSpent() {_uniqueStorage()._boostTokensSpent = nil}

  var hideCcStatus: Bool {
    get {return _storage._hideCcStatus ?? false}
    set {_uniqueStorage()._hideCcStatus = newValue}
  }
  /// Returns true if `hideCcStatus` has been explicitly set.
  var hasHideCcStatus: Bool {return _storage._hideCcStatus != nil}
  /// Clears the value of `hideCcStatus`. Subsequent reads from it will return its default value.
  mutating func clearHideCcStatus() {_uniqueStorage()._hideCcStatus = nil}

  var productionParams: Ei_FarmProductionParams {
    get {return _storage._productionParams ?? Ei_FarmProductionParams()}
    set {_uniqueStorage()._productionParams = newValue}
  }
  /// Returns true if `productionParams` has been explicitly set.
  var hasProductionParams: Bool {return _storage._productionParams != nil}
  /// Clears the value of `productionParams`. Subsequent reads from it will return its default value.
  mutating func clearProductionParams() {_uniqueStorage()._productionParams = nil}

  var farmInfo: Ei_PlayerFarmInfo {
    get {return _storage._farmInfo ?? Ei_PlayerFarmInfo()}
    set {_uniqueStorage()._farmInfo = newValue}
  }
  /// Returns true if `farmInfo` has been explicitly set.
  var hasFarmInfo: Bool {return _storage._farmInfo != nil}
  /// Clears the value of `farmInfo`. Subsequent reads from it will return its default value.
  mutating func clearFarmInfo() {_uniqueStorage()._farmInfo = nil}

  var lastIdleSummary: Ei_IdleSessionSummary {
    get {return _storage._lastIdleSummary ?? Ei_IdleSessionSummary()}
    set {_uniqueStorage()._lastIdleSummary = newValue}
  }
  /// Returns true if `lastIdleSummary` has been explicitly set.
  var hasLastIdleSummary: Bool {return _storage._lastIdleSummary != nil}
  /// Clears the value of `lastIdleSummary`. Subsequent reads from it will return its default value.
  mutating func clearLastIdleSummary() {_uniqueStorage()._lastIdleSummary = nil}

  var eggLayingRateBuff: Double {
    get {return _storage._eggLayingRateBuff ?? 1}
    set {_uniqueStorage()._eggLayingRateBuff = newValue}
  }
  /// Returns true if `eggLayingRateBuff` has been explicitly set.
  var hasEggLayingRateBuff: Bool {return _storage._eggLayingRateBuff != nil}
  /// Clears the value of `eggLayingRateBuff`. Subsequent reads from it will return its default value.
  mutating func clearEggLayingRateBuff() {_uniqueStorage()._eggLayingRateBuff = nil}

  var earningsBuff: Double {
    get {return _storage._earningsBuff ?? 1}
    set {_uniqueStorage()._earningsBuff = newValue}
  }
  /// Returns true if `earningsBuff` has been explicitly set.
  var hasEarningsBuff: Bool {return _storage._earningsBuff != nil}
  /// Clears the value of `earningsBuff`. Subsequent reads from it will return its default value.
  mutating func clearEarningsBuff() {_uniqueStorage()._earningsBuff = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ContractCoopStatusUpdateResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var finalized: Bool {
    get {return _finalized ?? false}
    set {_finalized = newValue}
  }
  /// Returns true if `finalized` has been explicitly set.
  var hasFinalized: Bool {return self._finalized != nil}
  /// Clears the value of `finalized`. Subsequent reads from it will return its default value.
  mutating func clearFinalized() {self._finalized = nil}

  var exists: Bool {
    get {return _exists ?? false}
    set {_exists = newValue}
  }
  /// Returns true if `exists` has been explicitly set.
  var hasExists: Bool {return self._exists != nil}
  /// Clears the value of `exists`. Subsequent reads from it will return its default value.
  mutating func clearExists() {self._exists = nil}

  var status: Ei_ContractCoopStatusResponse.MemberStatus {
    get {return _status ?? .valid}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _finalized: Bool? = nil
  fileprivate var _exists: Bool? = nil
  fileprivate var _status: Ei_ContractCoopStatusResponse.MemberStatus? = nil
}

struct Ei_CoopBuffState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eggLayingRate: Double {
    get {return _eggLayingRate ?? 1}
    set {_eggLayingRate = newValue}
  }
  /// Returns true if `eggLayingRate` has been explicitly set.
  var hasEggLayingRate: Bool {return self._eggLayingRate != nil}
  /// Clears the value of `eggLayingRate`. Subsequent reads from it will return its default value.
  mutating func clearEggLayingRate() {self._eggLayingRate = nil}

  var earnings: Double {
    get {return _earnings ?? 1}
    set {_earnings = newValue}
  }
  /// Returns true if `earnings` has been explicitly set.
  var hasEarnings: Bool {return self._earnings != nil}
  /// Clears the value of `earnings`. Subsequent reads from it will return its default value.
  mutating func clearEarnings() {self._earnings = nil}

  var serverTimestamp: Double {
    get {return _serverTimestamp ?? 0}
    set {_serverTimestamp = newValue}
  }
  /// Returns true if `serverTimestamp` has been explicitly set.
  var hasServerTimestamp: Bool {return self._serverTimestamp != nil}
  /// Clears the value of `serverTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearServerTimestamp() {self._serverTimestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _eggLayingRate: Double? = nil
  fileprivate var _earnings: Double? = nil
  fileprivate var _serverTimestamp: Double? = nil
}

struct Ei_CoopBuffHistory: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var history: [Ei_CoopBuffState] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_CoopChickenRunEntry: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var serverTimestamp: Double {
    get {return _serverTimestamp ?? 0}
    set {_serverTimestamp = newValue}
  }
  /// Returns true if `serverTimestamp` has been explicitly set.
  var hasServerTimestamp: Bool {return self._serverTimestamp != nil}
  /// Clears the value of `serverTimestamp`. Subsequent reads from it will return its default value.
  mutating func clearServerTimestamp() {self._serverTimestamp = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: String? = nil
  fileprivate var _serverTimestamp: Double? = nil
}

struct Ei_PlayerLastChickenRunTimes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var entries: [Ei_CoopChickenRunEntry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: String? = nil
}

struct Ei_CoopLastChickenRunTimes: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var entries: [Ei_PlayerLastChickenRunTimes] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_LeaderboardAnalysis: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var chunks: [Ei_LeaderboardAnalysis.Chunk] = []

  var count: UInt32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var highScore: Double {
    get {return _highScore ?? 0}
    set {_highScore = newValue}
  }
  /// Returns true if `highScore` has been explicitly set.
  var hasHighScore: Bool {return self._highScore != nil}
  /// Clears the value of `highScore`. Subsequent reads from it will return its default value.
  mutating func clearHighScore() {self._highScore = nil}

  var lowScore: Double {
    get {return _lowScore ?? 0}
    set {_lowScore = newValue}
  }
  /// Returns true if `lowScore` has been explicitly set.
  var hasLowScore: Bool {return self._lowScore != nil}
  /// Clears the value of `lowScore`. Subsequent reads from it will return its default value.
  mutating func clearLowScore() {self._lowScore = nil}

  var cursor: String {
    get {return _cursor ?? String()}
    set {_cursor = newValue}
  }
  /// Returns true if `cursor` has been explicitly set.
  var hasCursor: Bool {return self._cursor != nil}
  /// Clears the value of `cursor`. Subsequent reads from it will return its default value.
  mutating func clearCursor() {self._cursor = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Chunk: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var startIndex: UInt32 {
      get {return _startIndex ?? 0}
      set {_startIndex = newValue}
    }
    /// Returns true if `startIndex` has been explicitly set.
    var hasStartIndex: Bool {return self._startIndex != nil}
    /// Clears the value of `startIndex`. Subsequent reads from it will return its default value.
    mutating func clearStartIndex() {self._startIndex = nil}

    var endIndex: UInt32 {
      get {return _endIndex ?? 0}
      set {_endIndex = newValue}
    }
    /// Returns true if `endIndex` has been explicitly set.
    var hasEndIndex: Bool {return self._endIndex != nil}
    /// Clears the value of `endIndex`. Subsequent reads from it will return its default value.
    mutating func clearEndIndex() {self._endIndex = nil}

    var highScore: Double {
      get {return _highScore ?? 0}
      set {_highScore = newValue}
    }
    /// Returns true if `highScore` has been explicitly set.
    var hasHighScore: Bool {return self._highScore != nil}
    /// Clears the value of `highScore`. Subsequent reads from it will return its default value.
    mutating func clearHighScore() {self._highScore = nil}

    var lowScore: Double {
      get {return _lowScore ?? 0}
      set {_lowScore = newValue}
    }
    /// Returns true if `lowScore` has been explicitly set.
    var hasLowScore: Bool {return self._lowScore != nil}
    /// Clears the value of `lowScore`. Subsequent reads from it will return its default value.
    mutating func clearLowScore() {self._lowScore = nil}

    var startCursor: String {
      get {return _startCursor ?? String()}
      set {_startCursor = newValue}
    }
    /// Returns true if `startCursor` has been explicitly set.
    var hasStartCursor: Bool {return self._startCursor != nil}
    /// Clears the value of `startCursor`. Subsequent reads from it will return its default value.
    mutating func clearStartCursor() {self._startCursor = nil}

    var endCursor: String {
      get {return _endCursor ?? String()}
      set {_endCursor = newValue}
    }
    /// Returns true if `endCursor` has been explicitly set.
    var hasEndCursor: Bool {return self._endCursor != nil}
    /// Clears the value of `endCursor`. Subsequent reads from it will return its default value.
    mutating func clearEndCursor() {self._endCursor = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _startIndex: UInt32? = nil
    fileprivate var _endIndex: UInt32? = nil
    fileprivate var _highScore: Double? = nil
    fileprivate var _lowScore: Double? = nil
    fileprivate var _startCursor: String? = nil
    fileprivate var _endCursor: String? = nil
  }

  init() {}

  fileprivate var _count: UInt32? = nil
  fileprivate var _highScore: Double? = nil
  fileprivate var _lowScore: Double? = nil
  fileprivate var _cursor: String? = nil
}

struct Ei_LeaderboardInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var seasons: [Ei_LeaderboardInfo.Season] = []

  var allTimeScope: String {
    get {return _allTimeScope ?? String()}
    set {_allTimeScope = newValue}
  }
  /// Returns true if `allTimeScope` has been explicitly set.
  var hasAllTimeScope: Bool {return self._allTimeScope != nil}
  /// Clears the value of `allTimeScope`. Subsequent reads from it will return its default value.
  mutating func clearAllTimeScope() {self._allTimeScope = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Season: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var scope: String {
      get {return _scope ?? String()}
      set {_scope = newValue}
    }
    /// Returns true if `scope` has been explicitly set.
    var hasScope: Bool {return self._scope != nil}
    /// Clears the value of `scope`. Subsequent reads from it will return its default value.
    mutating func clearScope() {self._scope = nil}

    var name: String {
      get {return _name ?? String()}
      set {_name = newValue}
    }
    /// Returns true if `name` has been explicitly set.
    var hasName: Bool {return self._name != nil}
    /// Clears the value of `name`. Subsequent reads from it will return its default value.
    mutating func clearName() {self._name = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _scope: String? = nil
    fileprivate var _name: String? = nil
  }

  init() {}

  fileprivate var _allTimeScope: String? = nil
}

struct Ei_LeaderboardRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _grade ?? .gradeUnset}
    set {_grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return self._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {self._grade = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _scope: String? = nil
  fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
}

struct Ei_LeaderboardResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var scope: String {
    get {return _scope ?? String()}
    set {_scope = newValue}
  }
  /// Returns true if `scope` has been explicitly set.
  var hasScope: Bool {return self._scope != nil}
  /// Clears the value of `scope`. Subsequent reads from it will return its default value.
  mutating func clearScope() {self._scope = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _grade ?? .gradeUnset}
    set {_grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return self._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {self._grade = nil}

  var topEntries: [Ei_LeaderboardResponse.Entry] = []

  var count: UInt32 {
    get {return _count ?? 0}
    set {_count = newValue}
  }
  /// Returns true if `count` has been explicitly set.
  var hasCount: Bool {return self._count != nil}
  /// Clears the value of `count`. Subsequent reads from it will return its default value.
  mutating func clearCount() {self._count = nil}

  var rank: UInt32 {
    get {return _rank ?? 0}
    set {_rank = newValue}
  }
  /// Returns true if `rank` has been explicitly set.
  var hasRank: Bool {return self._rank != nil}
  /// Clears the value of `rank`. Subsequent reads from it will return its default value.
  mutating func clearRank() {self._rank = nil}

  var score: Double {
    get {return _score ?? 0}
    set {_score = newValue}
  }
  /// Returns true if `score` has been explicitly set.
  var hasScore: Bool {return self._score != nil}
  /// Clears the value of `score`. Subsequent reads from it will return its default value.
  mutating func clearScore() {self._score = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Entry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var rank: UInt32 {
      get {return _rank ?? 0}
      set {_rank = newValue}
    }
    /// Returns true if `rank` has been explicitly set.
    var hasRank: Bool {return self._rank != nil}
    /// Clears the value of `rank`. Subsequent reads from it will return its default value.
    mutating func clearRank() {self._rank = nil}

    var alias: String {
      get {return _alias ?? String()}
      set {_alias = newValue}
    }
    /// Returns true if `alias` has been explicitly set.
    var hasAlias: Bool {return self._alias != nil}
    /// Clears the value of `alias`. Subsequent reads from it will return its default value.
    mutating func clearAlias() {self._alias = nil}

    var score: Double {
      get {return _score ?? 0}
      set {_score = newValue}
    }
    /// Returns true if `score` has been explicitly set.
    var hasScore: Bool {return self._score != nil}
    /// Clears the value of `score`. Subsequent reads from it will return its default value.
    mutating func clearScore() {self._score = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _rank: UInt32? = nil
    fileprivate var _alias: String? = nil
    fileprivate var _score: Double? = nil
  }

  init() {}

  fileprivate var _scope: String? = nil
  fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
  fileprivate var _count: UInt32? = nil
  fileprivate var _rank: UInt32? = nil
  fileprivate var _score: Double? = nil
}

struct Ei_ContractsArchive: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var archive: [Ei_LocalContract] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_ContractAction: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var actionName: String {
    get {return _storage._actionName ?? String()}
    set {_uniqueStorage()._actionName = newValue}
  }
  /// Returns true if `actionName` has been explicitly set.
  var hasActionName: Bool {return _storage._actionName != nil}
  /// Clears the value of `actionName`. Subsequent reads from it will return its default value.
  mutating func clearActionName() {_uniqueStorage()._actionName = nil}

  var approxTime: Double {
    get {return _storage._approxTime ?? 0}
    set {_uniqueStorage()._approxTime = newValue}
  }
  /// Returns true if `approxTime` has been explicitly set.
  var hasApproxTime: Bool {return _storage._approxTime != nil}
  /// Clears the value of `approxTime`. Subsequent reads from it will return its default value.
  mutating func clearApproxTime() {_uniqueStorage()._approxTime = nil}

  var destUserID: String {
    get {return _storage._destUserID ?? String()}
    set {_uniqueStorage()._destUserID = newValue}
  }
  /// Returns true if `destUserID` has been explicitly set.
  var hasDestUserID: Bool {return _storage._destUserID != nil}
  /// Clears the value of `destUserID`. Subsequent reads from it will return its default value.
  mutating func clearDestUserID() {_uniqueStorage()._destUserID = nil}

  var contractID: String {
    get {return _storage._contractID ?? String()}
    set {_uniqueStorage()._contractID = newValue}
  }
  /// Returns true if `contractID` has been explicitly set.
  var hasContractID: Bool {return _storage._contractID != nil}
  /// Clears the value of `contractID`. Subsequent reads from it will return its default value.
  mutating func clearContractID() {_uniqueStorage()._contractID = nil}

  var coopID: String {
    get {return _storage._coopID ?? String()}
    set {_uniqueStorage()._coopID = newValue}
  }
  /// Returns true if `coopID` has been explicitly set.
  var hasCoopID: Bool {return _storage._coopID != nil}
  /// Clears the value of `coopID`. Subsequent reads from it will return its default value.
  mutating func clearCoopID() {_uniqueStorage()._coopID = nil}

  var autojoin: Bool {
    get {return _storage._autojoin ?? false}
    set {_uniqueStorage()._autojoin = newValue}
  }
  /// Returns true if `autojoin` has been explicitly set.
  var hasAutojoin: Bool {return _storage._autojoin != nil}
  /// Clears the value of `autojoin`. Subsequent reads from it will return its default value.
  mutating func clearAutojoin() {_uniqueStorage()._autojoin = nil}

  var grade: UInt32 {
    get {return _storage._grade ?? 0}
    set {_uniqueStorage()._grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return _storage._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {_uniqueStorage()._grade = nil}

  var replay: Bool {
    get {return _storage._replay ?? false}
    set {_uniqueStorage()._replay = newValue}
  }
  /// Returns true if `replay` has been explicitly set.
  var hasReplay: Bool {return _storage._replay != nil}
  /// Clears the value of `replay`. Subsequent reads from it will return its default value.
  mutating func clearReplay() {_uniqueStorage()._replay = nil}

  var pointsReplay: Bool {
    get {return _storage._pointsReplay ?? false}
    set {_uniqueStorage()._pointsReplay = newValue}
  }
  /// Returns true if `pointsReplay` has been explicitly set.
  var hasPointsReplay: Bool {return _storage._pointsReplay != nil}
  /// Clears the value of `pointsReplay`. Subsequent reads from it will return its default value.
  mutating func clearPointsReplay() {_uniqueStorage()._pointsReplay = nil}

  var rewardType: UInt32 {
    get {return _storage._rewardType ?? 0}
    set {_uniqueStorage()._rewardType = newValue}
  }
  /// Returns true if `rewardType` has been explicitly set.
  var hasRewardType: Bool {return _storage._rewardType != nil}
  /// Clears the value of `rewardType`. Subsequent reads from it will return its default value.
  mutating func clearRewardType() {_uniqueStorage()._rewardType = nil}

  var rewardSubtype: String {
    get {return _storage._rewardSubtype ?? String()}
    set {_uniqueStorage()._rewardSubtype = newValue}
  }
  /// Returns true if `rewardSubtype` has been explicitly set.
  var hasRewardSubtype: Bool {return _storage._rewardSubtype != nil}
  /// Clears the value of `rewardSubtype`. Subsequent reads from it will return its default value.
  mutating func clearRewardSubtype() {_uniqueStorage()._rewardSubtype = nil}

  var rewardAmount: Double {
    get {return _storage._rewardAmount ?? 0}
    set {_uniqueStorage()._rewardAmount = newValue}
  }
  /// Returns true if `rewardAmount` has been explicitly set.
  var hasRewardAmount: Bool {return _storage._rewardAmount != nil}
  /// Clears the value of `rewardAmount`. Subsequent reads from it will return its default value.
  mutating func clearRewardAmount() {_uniqueStorage()._rewardAmount = nil}

  var goalIndex: UInt32 {
    get {return _storage._goalIndex ?? 0}
    set {_uniqueStorage()._goalIndex = newValue}
  }
  /// Returns true if `goalIndex` has been explicitly set.
  var hasGoalIndex: Bool {return _storage._goalIndex != nil}
  /// Clears the value of `goalIndex`. Subsequent reads from it will return its default value.
  mutating func clearGoalIndex() {_uniqueStorage()._goalIndex = nil}

  var boostID: String {
    get {return _storage._boostID ?? String()}
    set {_uniqueStorage()._boostID = newValue}
  }
  /// Returns true if `boostID` has been explicitly set.
  var hasBoostID: Bool {return _storage._boostID != nil}
  /// Clears the value of `boostID`. Subsequent reads from it will return its default value.
  mutating func clearBoostID() {_uniqueStorage()._boostID = nil}

  var tokens: UInt32 {
    get {return _storage._tokens ?? 0}
    set {_uniqueStorage()._tokens = newValue}
  }
  /// Returns true if `tokens` has been explicitly set.
  var hasTokens: Bool {return _storage._tokens != nil}
  /// Clears the value of `tokens`. Subsequent reads from it will return its default value.
  mutating func clearTokens() {_uniqueStorage()._tokens = nil}

  var kickReason: UInt32 {
    get {return _storage._kickReason ?? 0}
    set {_uniqueStorage()._kickReason = newValue}
  }
  /// Returns true if `kickReason` has been explicitly set.
  var hasKickReason: Bool {return _storage._kickReason != nil}
  /// Clears the value of `kickReason`. Subsequent reads from it will return its default value.
  mutating func clearKickReason() {_uniqueStorage()._kickReason = nil}

  var `public`: Bool {
    get {return _storage._public ?? false}
    set {_uniqueStorage()._public = newValue}
  }
  /// Returns true if ``public`` has been explicitly set.
  var hasPublic: Bool {return _storage._public != nil}
  /// Clears the value of ``public``. Subsequent reads from it will return its default value.
  mutating func clearPublic() {_uniqueStorage()._public = nil}

  var ccOnly: Bool {
    get {return _storage._ccOnly ?? false}
    set {_uniqueStorage()._ccOnly = newValue}
  }
  /// Returns true if `ccOnly` has been explicitly set.
  var hasCcOnly: Bool {return _storage._ccOnly != nil}
  /// Clears the value of `ccOnly`. Subsequent reads from it will return its default value.
  mutating func clearCcOnly() {_uniqueStorage()._ccOnly = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_UserDataInfoRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var deviceID: String {
    get {return _deviceID ?? String()}
    set {_deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {self._deviceID = nil}

  var backupChecksum: UInt64 {
    get {return _backupChecksum ?? 0}
    set {_backupChecksum = newValue}
  }
  /// Returns true if `backupChecksum` has been explicitly set.
  var hasBackupChecksum: Bool {return self._backupChecksum != nil}
  /// Clears the value of `backupChecksum`. Subsequent reads from it will return its default value.
  mutating func clearBackupChecksum() {self._backupChecksum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _deviceID: String? = nil
  fileprivate var _backupChecksum: UInt64? = nil
}

struct Ei_UserDataInfoResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var backupChecksum: UInt64 {
    get {return _backupChecksum ?? 0}
    set {_backupChecksum = newValue}
  }
  /// Returns true if `backupChecksum` has been explicitly set.
  var hasBackupChecksum: Bool {return self._backupChecksum != nil}
  /// Clears the value of `backupChecksum`. Subsequent reads from it will return its default value.
  mutating func clearBackupChecksum() {self._backupChecksum = nil}

  var backupTotalCash: Double {
    get {return _backupTotalCash ?? 0}
    set {_backupTotalCash = newValue}
  }
  /// Returns true if `backupTotalCash` has been explicitly set.
  var hasBackupTotalCash: Bool {return self._backupTotalCash != nil}
  /// Clears the value of `backupTotalCash`. Subsequent reads from it will return its default value.
  mutating func clearBackupTotalCash() {self._backupTotalCash = nil}

  var coopMemberships: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _backupChecksum: UInt64? = nil
  fileprivate var _backupTotalCash: Double? = nil
}

struct Ei_ClearAllUserDataRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var deviceID: String {
    get {return _deviceID ?? String()}
    set {_deviceID = newValue}
  }
  /// Returns true if `deviceID` has been explicitly set.
  var hasDeviceID: Bool {return self._deviceID != nil}
  /// Clears the value of `deviceID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceID() {self._deviceID = nil}

  var backupChecksum: UInt64 {
    get {return _backupChecksum ?? 0}
    set {_backupChecksum = newValue}
  }
  /// Returns true if `backupChecksum` has been explicitly set.
  var hasBackupChecksum: Bool {return self._backupChecksum != nil}
  /// Clears the value of `backupChecksum`. Subsequent reads from it will return its default value.
  mutating func clearBackupChecksum() {self._backupChecksum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _deviceID: String? = nil
  fileprivate var _backupChecksum: UInt64? = nil
}

struct Ei_ServerGift: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var rewardType: Ei_RewardType {
    get {return _rewardType ?? .cash}
    set {_rewardType = newValue}
  }
  /// Returns true if `rewardType` has been explicitly set.
  var hasRewardType: Bool {return self._rewardType != nil}
  /// Clears the value of `rewardType`. Subsequent reads from it will return its default value.
  mutating func clearRewardType() {self._rewardType = nil}

  var rewardSubType: String {
    get {return _rewardSubType ?? String()}
    set {_rewardSubType = newValue}
  }
  /// Returns true if `rewardSubType` has been explicitly set.
  var hasRewardSubType: Bool {return self._rewardSubType != nil}
  /// Clears the value of `rewardSubType`. Subsequent reads from it will return its default value.
  mutating func clearRewardSubType() {self._rewardSubType = nil}

  var rewardAmount: Double {
    get {return _rewardAmount ?? 0}
    set {_rewardAmount = newValue}
  }
  /// Returns true if `rewardAmount` has been explicitly set.
  var hasRewardAmount: Bool {return self._rewardAmount != nil}
  /// Clears the value of `rewardAmount`. Subsequent reads from it will return its default value.
  mutating func clearRewardAmount() {self._rewardAmount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: String? = nil
  fileprivate var _rewardType: Ei_RewardType? = nil
  fileprivate var _rewardSubType: String? = nil
  fileprivate var _rewardAmount: Double? = nil
}

struct Ei_LiveConfig: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var configID: String {
    get {return _storage._configID ?? String()}
    set {_uniqueStorage()._configID = newValue}
  }
  /// Returns true if `configID` has been explicitly set.
  var hasConfigID: Bool {return _storage._configID != nil}
  /// Clears the value of `configID`. Subsequent reads from it will return its default value.
  mutating func clearConfigID() {_uniqueStorage()._configID = nil}

  var boostsConfig: Ei_LiveConfig.BoostsConfig {
    get {return _storage._boostsConfig ?? Ei_LiveConfig.BoostsConfig()}
    set {_uniqueStorage()._boostsConfig = newValue}
  }
  /// Returns true if `boostsConfig` has been explicitly set.
  var hasBoostsConfig: Bool {return _storage._boostsConfig != nil}
  /// Clears the value of `boostsConfig`. Subsequent reads from it will return its default value.
  mutating func clearBoostsConfig() {_uniqueStorage()._boostsConfig = nil}

  var giftConfig: Ei_LiveConfig.GiftConfig {
    get {return _storage._giftConfig ?? Ei_LiveConfig.GiftConfig()}
    set {_uniqueStorage()._giftConfig = newValue}
  }
  /// Returns true if `giftConfig` has been explicitly set.
  var hasGiftConfig: Bool {return _storage._giftConfig != nil}
  /// Clears the value of `giftConfig`. Subsequent reads from it will return its default value.
  mutating func clearGiftConfig() {_uniqueStorage()._giftConfig = nil}

  var miscConfig: Ei_LiveConfig.MiscConfig {
    get {return _storage._miscConfig ?? Ei_LiveConfig.MiscConfig()}
    set {_uniqueStorage()._miscConfig = newValue}
  }
  /// Returns true if `miscConfig` has been explicitly set.
  var hasMiscConfig: Bool {return _storage._miscConfig != nil}
  /// Clears the value of `miscConfig`. Subsequent reads from it will return its default value.
  mutating func clearMiscConfig() {_uniqueStorage()._miscConfig = nil}

  var helpConfig: Ei_LiveConfig.HelpConfig {
    get {return _storage._helpConfig ?? Ei_LiveConfig.HelpConfig()}
    set {_uniqueStorage()._helpConfig = newValue}
  }
  /// Returns true if `helpConfig` has been explicitly set.
  var hasHelpConfig: Bool {return _storage._helpConfig != nil}
  /// Clears the value of `helpConfig`. Subsequent reads from it will return its default value.
  mutating func clearHelpConfig() {_uniqueStorage()._helpConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct BoostsConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var itemConfigs: [Ei_LiveConfig.BoostsConfig.ItemConfig] = []

    var cashBoostCooloffTime: Double {
      get {return _cashBoostCooloffTime ?? 0}
      set {_cashBoostCooloffTime = newValue}
    }
    /// Returns true if `cashBoostCooloffTime` has been explicitly set.
    var hasCashBoostCooloffTime: Bool {return self._cashBoostCooloffTime != nil}
    /// Clears the value of `cashBoostCooloffTime`. Subsequent reads from it will return its default value.
    mutating func clearCashBoostCooloffTime() {self._cashBoostCooloffTime = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct ItemConfig: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var boostID: String {
        get {return _boostID ?? String()}
        set {_boostID = newValue}
      }
      /// Returns true if `boostID` has been explicitly set.
      var hasBoostID: Bool {return self._boostID != nil}
      /// Clears the value of `boostID`. Subsequent reads from it will return its default value.
      mutating func clearBoostID() {self._boostID = nil}

      var price: UInt32 {
        get {return _price ?? 0}
        set {_price = newValue}
      }
      /// Returns true if `price` has been explicitly set.
      var hasPrice: Bool {return self._price != nil}
      /// Clears the value of `price`. Subsequent reads from it will return its default value.
      mutating func clearPrice() {self._price = nil}

      var tokenPrice: UInt32 {
        get {return _tokenPrice ?? 0}
        set {_tokenPrice = newValue}
      }
      /// Returns true if `tokenPrice` has been explicitly set.
      var hasTokenPrice: Bool {return self._tokenPrice != nil}
      /// Clears the value of `tokenPrice`. Subsequent reads from it will return its default value.
      mutating func clearTokenPrice() {self._tokenPrice = nil}

      var seRequired: Double {
        get {return _seRequired ?? 0}
        set {_seRequired = newValue}
      }
      /// Returns true if `seRequired` has been explicitly set.
      var hasSeRequired: Bool {return self._seRequired != nil}
      /// Clears the value of `seRequired`. Subsequent reads from it will return its default value.
      mutating func clearSeRequired() {self._seRequired = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _boostID: String? = nil
      fileprivate var _price: UInt32? = nil
      fileprivate var _tokenPrice: UInt32? = nil
      fileprivate var _seRequired: Double? = nil
    }

    init() {}

    fileprivate var _cashBoostCooloffTime: Double? = nil
  }

  struct GiftConfig: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var giftConfigs: [Ei_LiveConfig.GiftConfig.GiftValueConfig] {
      get {return _storage._giftConfigs}
      set {_uniqueStorage()._giftConfigs = newValue}
    }

    var giftMuMinSpent: Double {
      get {return _storage._giftMuMinSpent ?? 0}
      set {_uniqueStorage()._giftMuMinSpent = newValue}
    }
    /// Returns true if `giftMuMinSpent` has been explicitly set.
    var hasGiftMuMinSpent: Bool {return _storage._giftMuMinSpent != nil}
    /// Clears the value of `giftMuMinSpent`. Subsequent reads from it will return its default value.
    mutating func clearGiftMuMinSpent() {_uniqueStorage()._giftMuMinSpent = nil}

    var giftMuMaxSpent: Double {
      get {return _storage._giftMuMaxSpent ?? 0}
      set {_uniqueStorage()._giftMuMaxSpent = newValue}
    }
    /// Returns true if `giftMuMaxSpent` has been explicitly set.
    var hasGiftMuMaxSpent: Bool {return _storage._giftMuMaxSpent != nil}
    /// Clears the value of `giftMuMaxSpent`. Subsequent reads from it will return its default value.
    mutating func clearGiftMuMaxSpent() {_uniqueStorage()._giftMuMaxSpent = nil}

    var giftMuOverallMult: Double {
      get {return _storage._giftMuOverallMult ?? 0}
      set {_uniqueStorage()._giftMuOverallMult = newValue}
    }
    /// Returns true if `giftMuOverallMult` has been explicitly set.
    var hasGiftMuOverallMult: Bool {return _storage._giftMuOverallMult != nil}
    /// Clears the value of `giftMuOverallMult`. Subsequent reads from it will return its default value.
    mutating func clearGiftMuOverallMult() {_uniqueStorage()._giftMuOverallMult = nil}

    var randomGiftMuConfig: Ei_LiveConfig.GiftConfig.GiftMuConfig {
      get {return _storage._randomGiftMuConfig ?? Ei_LiveConfig.GiftConfig.GiftMuConfig()}
      set {_uniqueStorage()._randomGiftMuConfig = newValue}
    }
    /// Returns true if `randomGiftMuConfig` has been explicitly set.
    var hasRandomGiftMuConfig: Bool {return _storage._randomGiftMuConfig != nil}
    /// Clears the value of `randomGiftMuConfig`. Subsequent reads from it will return its default value.
    mutating func clearRandomGiftMuConfig() {_uniqueStorage()._randomGiftMuConfig = nil}

    var videoGiftMuConfig: Ei_LiveConfig.GiftConfig.GiftMuConfig {
      get {return _storage._videoGiftMuConfig ?? Ei_LiveConfig.GiftConfig.GiftMuConfig()}
      set {_uniqueStorage()._videoGiftMuConfig = newValue}
    }
    /// Returns true if `videoGiftMuConfig` has been explicitly set.
    var hasVideoGiftMuConfig: Bool {return _storage._videoGiftMuConfig != nil}
    /// Clears the value of `videoGiftMuConfig`. Subsequent reads from it will return its default value.
    mutating func clearVideoGiftMuConfig() {_uniqueStorage()._videoGiftMuConfig = nil}

    var packageInterval: Double {
      get {return _storage._packageInterval ?? 0}
      set {_uniqueStorage()._packageInterval = newValue}
    }
    /// Returns true if `packageInterval` has been explicitly set.
    var hasPackageInterval: Bool {return _storage._packageInterval != nil}
    /// Clears the value of `packageInterval`. Subsequent reads from it will return its default value.
    mutating func clearPackageInterval() {_uniqueStorage()._packageInterval = nil}

    var videoOfferInterval: Double {
      get {return _storage._videoOfferInterval ?? 0}
      set {_uniqueStorage()._videoOfferInterval = newValue}
    }
    /// Returns true if `videoOfferInterval` has been explicitly set.
    var hasVideoOfferInterval: Bool {return _storage._videoOfferInterval != nil}
    /// Clears the value of `videoOfferInterval`. Subsequent reads from it will return its default value.
    mutating func clearVideoOfferInterval() {_uniqueStorage()._videoOfferInterval = nil}

    var videoOfferIntervalContract: Double {
      get {return _storage._videoOfferIntervalContract ?? 0}
      set {_uniqueStorage()._videoOfferIntervalContract = newValue}
    }
    /// Returns true if `videoOfferIntervalContract` has been explicitly set.
    var hasVideoOfferIntervalContract: Bool {return _storage._videoOfferIntervalContract != nil}
    /// Clears the value of `videoOfferIntervalContract`. Subsequent reads from it will return its default value.
    mutating func clearVideoOfferIntervalContract() {_uniqueStorage()._videoOfferIntervalContract = nil}

    var videoOfferIntervalPiggyFull: Double {
      get {return _storage._videoOfferIntervalPiggyFull ?? 0}
      set {_uniqueStorage()._videoOfferIntervalPiggyFull = newValue}
    }
    /// Returns true if `videoOfferIntervalPiggyFull` has been explicitly set.
    var hasVideoOfferIntervalPiggyFull: Bool {return _storage._videoOfferIntervalPiggyFull != nil}
    /// Clears the value of `videoOfferIntervalPiggyFull`. Subsequent reads from it will return its default value.
    mutating func clearVideoOfferIntervalPiggyFull() {_uniqueStorage()._videoOfferIntervalPiggyFull = nil}

    var videoOfferIntervalPiggyExtraFull: Double {
      get {return _storage._videoOfferIntervalPiggyExtraFull ?? 0}
      set {_uniqueStorage()._videoOfferIntervalPiggyExtraFull = newValue}
    }
    /// Returns true if `videoOfferIntervalPiggyExtraFull` has been explicitly set.
    var hasVideoOfferIntervalPiggyExtraFull: Bool {return _storage._videoOfferIntervalPiggyExtraFull != nil}
    /// Clears the value of `videoOfferIntervalPiggyExtraFull`. Subsequent reads from it will return its default value.
    mutating func clearVideoOfferIntervalPiggyExtraFull() {_uniqueStorage()._videoOfferIntervalPiggyExtraFull = nil}

    var videoResetOnIdle: Bool {
      get {return _storage._videoResetOnIdle ?? false}
      set {_uniqueStorage()._videoResetOnIdle = newValue}
    }
    /// Returns true if `videoResetOnIdle` has been explicitly set.
    var hasVideoResetOnIdle: Bool {return _storage._videoResetOnIdle != nil}
    /// Clears the value of `videoResetOnIdle`. Subsequent reads from it will return its default value.
    mutating func clearVideoResetOnIdle() {_uniqueStorage()._videoResetOnIdle = nil}

    var packageIntervalContract: Double {
      get {return _storage._packageIntervalContract ?? 0}
      set {_uniqueStorage()._packageIntervalContract = newValue}
    }
    /// Returns true if `packageIntervalContract` has been explicitly set.
    var hasPackageIntervalContract: Bool {return _storage._packageIntervalContract != nil}
    /// Clears the value of `packageIntervalContract`. Subsequent reads from it will return its default value.
    mutating func clearPackageIntervalContract() {_uniqueStorage()._packageIntervalContract = nil}

    var packageIntervalPiggyFull: Double {
      get {return _storage._packageIntervalPiggyFull ?? 0}
      set {_uniqueStorage()._packageIntervalPiggyFull = newValue}
    }
    /// Returns true if `packageIntervalPiggyFull` has been explicitly set.
    var hasPackageIntervalPiggyFull: Bool {return _storage._packageIntervalPiggyFull != nil}
    /// Clears the value of `packageIntervalPiggyFull`. Subsequent reads from it will return its default value.
    mutating func clearPackageIntervalPiggyFull() {_uniqueStorage()._packageIntervalPiggyFull = nil}

    var packageIntervalPiggyExtraFull: Double {
      get {return _storage._packageIntervalPiggyExtraFull ?? 0}
      set {_uniqueStorage()._packageIntervalPiggyExtraFull = newValue}
    }
    /// Returns true if `packageIntervalPiggyExtraFull` has been explicitly set.
    var hasPackageIntervalPiggyExtraFull: Bool {return _storage._packageIntervalPiggyExtraFull != nil}
    /// Clears the value of `packageIntervalPiggyExtraFull`. Subsequent reads from it will return its default value.
    mutating func clearPackageIntervalPiggyExtraFull() {_uniqueStorage()._packageIntervalPiggyExtraFull = nil}

    var packageResetOnIdle: Bool {
      get {return _storage._packageResetOnIdle ?? false}
      set {_uniqueStorage()._packageResetOnIdle = newValue}
    }
    /// Returns true if `packageResetOnIdle` has been explicitly set.
    var hasPackageResetOnIdle: Bool {return _storage._packageResetOnIdle != nil}
    /// Clears the value of `packageResetOnIdle`. Subsequent reads from it will return its default value.
    mutating func clearPackageResetOnIdle() {_uniqueStorage()._packageResetOnIdle = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct GiftValueConfig: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var giftID: String {
        get {return _giftID ?? String()}
        set {_giftID = newValue}
      }
      /// Returns true if `giftID` has been explicitly set.
      var hasGiftID: Bool {return self._giftID != nil}
      /// Clears the value of `giftID`. Subsequent reads from it will return its default value.
      mutating func clearGiftID() {self._giftID = nil}

      var amount: Double {
        get {return _amount ?? 0}
        set {_amount = newValue}
      }
      /// Returns true if `amount` has been explicitly set.
      var hasAmount: Bool {return self._amount != nil}
      /// Clears the value of `amount`. Subsequent reads from it will return its default value.
      mutating func clearAmount() {self._amount = nil}

      var randMin: Double {
        get {return _randMin ?? 0}
        set {_randMin = newValue}
      }
      /// Returns true if `randMin` has been explicitly set.
      var hasRandMin: Bool {return self._randMin != nil}
      /// Clears the value of `randMin`. Subsequent reads from it will return its default value.
      mutating func clearRandMin() {self._randMin = nil}

      var randMax: Double {
        get {return _randMax ?? 0}
        set {_randMax = newValue}
      }
      /// Returns true if `randMax` has been explicitly set.
      var hasRandMax: Bool {return self._randMax != nil}
      /// Clears the value of `randMax`. Subsequent reads from it will return its default value.
      mutating func clearRandMax() {self._randMax = nil}

      var videoMin: Double {
        get {return _videoMin ?? 0}
        set {_videoMin = newValue}
      }
      /// Returns true if `videoMin` has been explicitly set.
      var hasVideoMin: Bool {return self._videoMin != nil}
      /// Clears the value of `videoMin`. Subsequent reads from it will return its default value.
      mutating func clearVideoMin() {self._videoMin = nil}

      var videoMax: Double {
        get {return _videoMax ?? 0}
        set {_videoMax = newValue}
      }
      /// Returns true if `videoMax` has been explicitly set.
      var hasVideoMax: Bool {return self._videoMax != nil}
      /// Clears the value of `videoMax`. Subsequent reads from it will return its default value.
      mutating func clearVideoMax() {self._videoMax = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _giftID: String? = nil
      fileprivate var _amount: Double? = nil
      fileprivate var _randMin: Double? = nil
      fileprivate var _randMax: Double? = nil
      fileprivate var _videoMin: Double? = nil
      fileprivate var _videoMax: Double? = nil
    }

    struct GiftMuConfig: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var minSpent: Double {
        get {return _minSpent ?? 0}
        set {_minSpent = newValue}
      }
      /// Returns true if `minSpent` has been explicitly set.
      var hasMinSpent: Bool {return self._minSpent != nil}
      /// Clears the value of `minSpent`. Subsequent reads from it will return its default value.
      mutating func clearMinSpent() {self._minSpent = nil}

      var maxSpent: Double {
        get {return _maxSpent ?? 0}
        set {_maxSpent = newValue}
      }
      /// Returns true if `maxSpent` has been explicitly set.
      var hasMaxSpent: Bool {return self._maxSpent != nil}
      /// Clears the value of `maxSpent`. Subsequent reads from it will return its default value.
      mutating func clearMaxSpent() {self._maxSpent = nil}

      var overallMult: Double {
        get {return _overallMult ?? 0}
        set {_overallMult = newValue}
      }
      /// Returns true if `overallMult` has been explicitly set.
      var hasOverallMult: Bool {return self._overallMult != nil}
      /// Clears the value of `overallMult`. Subsequent reads from it will return its default value.
      mutating func clearOverallMult() {self._overallMult = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _minSpent: Double? = nil
      fileprivate var _maxSpent: Double? = nil
      fileprivate var _overallMult: Double? = nil
    }

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  struct MiscConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var askToTrack: Bool {
      get {return _askToTrack ?? false}
      set {_askToTrack = newValue}
    }
    /// Returns true if `askToTrack` has been explicitly set.
    var hasAskToTrack: Bool {return self._askToTrack != nil}
    /// Clears the value of `askToTrack`. Subsequent reads from it will return its default value.
    mutating func clearAskToTrack() {self._askToTrack = nil}

    var askToTrackMinSoulEggs: Double {
      get {return _askToTrackMinSoulEggs ?? 0}
      set {_askToTrackMinSoulEggs = newValue}
    }
    /// Returns true if `askToTrackMinSoulEggs` has been explicitly set.
    var hasAskToTrackMinSoulEggs: Bool {return self._askToTrackMinSoulEggs != nil}
    /// Clears the value of `askToTrackMinSoulEggs`. Subsequent reads from it will return its default value.
    mutating func clearAskToTrackMinSoulEggs() {self._askToTrackMinSoulEggs = nil}

    var askToTrackMessage: String {
      get {return _askToTrackMessage ?? String()}
      set {_askToTrackMessage = newValue}
    }
    /// Returns true if `askToTrackMessage` has been explicitly set.
    var hasAskToTrackMessage: Bool {return self._askToTrackMessage != nil}
    /// Clears the value of `askToTrackMessage`. Subsequent reads from it will return its default value.
    mutating func clearAskToTrackMessage() {self._askToTrackMessage = nil}

    var askToTrackShowPreDialog: Bool {
      get {return _askToTrackShowPreDialog ?? false}
      set {_askToTrackShowPreDialog = newValue}
    }
    /// Returns true if `askToTrackShowPreDialog` has been explicitly set.
    var hasAskToTrackShowPreDialog: Bool {return self._askToTrackShowPreDialog != nil}
    /// Clears the value of `askToTrackShowPreDialog`. Subsequent reads from it will return its default value.
    mutating func clearAskToTrackShowPreDialog() {self._askToTrackShowPreDialog = nil}

    var askToTrackAfterPrivacy: Bool {
      get {return _askToTrackAfterPrivacy ?? false}
      set {_askToTrackAfterPrivacy = newValue}
    }
    /// Returns true if `askToTrackAfterPrivacy` has been explicitly set.
    var hasAskToTrackAfterPrivacy: Bool {return self._askToTrackAfterPrivacy != nil}
    /// Clears the value of `askToTrackAfterPrivacy`. Subsequent reads from it will return its default value.
    mutating func clearAskToTrackAfterPrivacy() {self._askToTrackAfterPrivacy = nil}

    var chickenRunBoostPercentage: Double {
      get {return _chickenRunBoostPercentage ?? 0}
      set {_chickenRunBoostPercentage = newValue}
    }
    /// Returns true if `chickenRunBoostPercentage` has been explicitly set.
    var hasChickenRunBoostPercentage: Bool {return self._chickenRunBoostPercentage != nil}
    /// Clears the value of `chickenRunBoostPercentage`. Subsequent reads from it will return its default value.
    mutating func clearChickenRunBoostPercentage() {self._chickenRunBoostPercentage = nil}

    var shellsIntroTickets: UInt32 {
      get {return _shellsIntroTickets ?? 0}
      set {_shellsIntroTickets = newValue}
    }
    /// Returns true if `shellsIntroTickets` has been explicitly set.
    var hasShellsIntroTickets: Bool {return self._shellsIntroTickets != nil}
    /// Clears the value of `shellsIntroTickets`. Subsequent reads from it will return its default value.
    mutating func clearShellsIntroTickets() {self._shellsIntroTickets = nil}

    var shellsMaxFreeChickenConfigs: UInt32 {
      get {return _shellsMaxFreeChickenConfigs ?? 0}
      set {_shellsMaxFreeChickenConfigs = newValue}
    }
    /// Returns true if `shellsMaxFreeChickenConfigs` has been explicitly set.
    var hasShellsMaxFreeChickenConfigs: Bool {return self._shellsMaxFreeChickenConfigs != nil}
    /// Clears the value of `shellsMaxFreeChickenConfigs`. Subsequent reads from it will return its default value.
    mutating func clearShellsMaxFreeChickenConfigs() {self._shellsMaxFreeChickenConfigs = nil}

    var shellsIntroAlertThreshold: UInt32 {
      get {return _shellsIntroAlertThreshold ?? 0}
      set {_shellsIntroAlertThreshold = newValue}
    }
    /// Returns true if `shellsIntroAlertThreshold` has been explicitly set.
    var hasShellsIntroAlertThreshold: Bool {return self._shellsIntroAlertThreshold != nil}
    /// Clears the value of `shellsIntroAlertThreshold`. Subsequent reads from it will return its default value.
    mutating func clearShellsIntroAlertThreshold() {self._shellsIntroAlertThreshold = nil}

    var shellsLightingControlsPrice: UInt32 {
      get {return _shellsLightingControlsPrice ?? 175}
      set {_shellsLightingControlsPrice = newValue}
    }
    /// Returns true if `shellsLightingControlsPrice` has been explicitly set.
    var hasShellsLightingControlsPrice: Bool {return self._shellsLightingControlsPrice != nil}
    /// Clears the value of `shellsLightingControlsPrice`. Subsequent reads from it will return its default value.
    mutating func clearShellsLightingControlsPrice() {self._shellsLightingControlsPrice = nil}

    var contractsExpertLeagueMinSoulPower: Double {
      get {return _contractsExpertLeagueMinSoulPower ?? 0}
      set {_contractsExpertLeagueMinSoulPower = newValue}
    }
    /// Returns true if `contractsExpertLeagueMinSoulPower` has been explicitly set.
    var hasContractsExpertLeagueMinSoulPower: Bool {return self._contractsExpertLeagueMinSoulPower != nil}
    /// Clears the value of `contractsExpertLeagueMinSoulPower`. Subsequent reads from it will return its default value.
    mutating func clearContractsExpertLeagueMinSoulPower() {self._contractsExpertLeagueMinSoulPower = nil}

    var newPlayerEventDuration: Double {
      get {return _newPlayerEventDuration ?? 0}
      set {_newPlayerEventDuration = newValue}
    }
    /// Returns true if `newPlayerEventDuration` has been explicitly set.
    var hasNewPlayerEventDuration: Bool {return self._newPlayerEventDuration != nil}
    /// Clears the value of `newPlayerEventDuration`. Subsequent reads from it will return its default value.
    mutating func clearNewPlayerEventDuration() {self._newPlayerEventDuration = nil}

    var contractsClubAvailable: Bool {
      get {return _contractsClubAvailable ?? false}
      set {_contractsClubAvailable = newValue}
    }
    /// Returns true if `contractsClubAvailable` has been explicitly set.
    var hasContractsClubAvailable: Bool {return self._contractsClubAvailable != nil}
    /// Clears the value of `contractsClubAvailable`. Subsequent reads from it will return its default value.
    mutating func clearContractsClubAvailable() {self._contractsClubAvailable = nil}

    var contractsBeta: Bool {
      get {return _contractsBeta ?? false}
      set {_contractsBeta = newValue}
    }
    /// Returns true if `contractsBeta` has been explicitly set.
    var hasContractsBeta: Bool {return self._contractsBeta != nil}
    /// Clears the value of `contractsBeta`. Subsequent reads from it will return its default value.
    mutating func clearContractsBeta() {self._contractsBeta = nil}

    var seasonRewardsEnabled: Bool {
      get {return _seasonRewardsEnabled ?? false}
      set {_seasonRewardsEnabled = newValue}
    }
    /// Returns true if `seasonRewardsEnabled` has been explicitly set.
    var hasSeasonRewardsEnabled: Bool {return self._seasonRewardsEnabled != nil}
    /// Clears the value of `seasonRewardsEnabled`. Subsequent reads from it will return its default value.
    mutating func clearSeasonRewardsEnabled() {self._seasonRewardsEnabled = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _askToTrack: Bool? = nil
    fileprivate var _askToTrackMinSoulEggs: Double? = nil
    fileprivate var _askToTrackMessage: String? = nil
    fileprivate var _askToTrackShowPreDialog: Bool? = nil
    fileprivate var _askToTrackAfterPrivacy: Bool? = nil
    fileprivate var _chickenRunBoostPercentage: Double? = nil
    fileprivate var _shellsIntroTickets: UInt32? = nil
    fileprivate var _shellsMaxFreeChickenConfigs: UInt32? = nil
    fileprivate var _shellsIntroAlertThreshold: UInt32? = nil
    fileprivate var _shellsLightingControlsPrice: UInt32? = nil
    fileprivate var _contractsExpertLeagueMinSoulPower: Double? = nil
    fileprivate var _newPlayerEventDuration: Double? = nil
    fileprivate var _contractsClubAvailable: Bool? = nil
    fileprivate var _contractsBeta: Bool? = nil
    fileprivate var _seasonRewardsEnabled: Bool? = nil
  }

  struct HelpConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var videoInfos: [Ei_LiveConfig.HelpConfig.HowToVideoInfo] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct HowToVideoInfo: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var type: Ei_LiveConfig.HelpConfig.HowToVideoInfo.TypeEnum {
        get {return _type ?? .video}
        set {_type = newValue}
      }
      /// Returns true if `type` has been explicitly set.
      var hasType: Bool {return self._type != nil}
      /// Clears the value of `type`. Subsequent reads from it will return its default value.
      mutating func clearType() {self._type = nil}

      var name: String {
        get {return _name ?? String()}
        set {_name = newValue}
      }
      /// Returns true if `name` has been explicitly set.
      var hasName: Bool {return self._name != nil}
      /// Clears the value of `name`. Subsequent reads from it will return its default value.
      mutating func clearName() {self._name = nil}

      var description_p: String {
        get {return _description_p ?? String()}
        set {_description_p = newValue}
      }
      /// Returns true if `description_p` has been explicitly set.
      var hasDescription_p: Bool {return self._description_p != nil}
      /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
      mutating func clearDescription_p() {self._description_p = nil}

      var duration: String {
        get {return _duration ?? String()}
        set {_duration = newValue}
      }
      /// Returns true if `duration` has been explicitly set.
      var hasDuration: Bool {return self._duration != nil}
      /// Clears the value of `duration`. Subsequent reads from it will return its default value.
      mutating func clearDuration() {self._duration = nil}

      var url: String {
        get {return _url ?? String()}
        set {_url = newValue}
      }
      /// Returns true if `url` has been explicitly set.
      var hasURL: Bool {return self._url != nil}
      /// Clears the value of `url`. Subsequent reads from it will return its default value.
      mutating func clearURL() {self._url = nil}

      var soulEggs: Double {
        get {return _soulEggs ?? 0}
        set {_soulEggs = newValue}
      }
      /// Returns true if `soulEggs` has been explicitly set.
      var hasSoulEggs: Bool {return self._soulEggs != nil}
      /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
      mutating func clearSoulEggs() {self._soulEggs = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      enum TypeEnum: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
        case video = 0
        case article = 1

        init() {
          self = .video
        }

      }

      init() {}

      fileprivate var _type: Ei_LiveConfig.HelpConfig.HowToVideoInfo.TypeEnum? = nil
      fileprivate var _name: String? = nil
      fileprivate var _description_p: String? = nil
      fileprivate var _duration: String? = nil
      fileprivate var _url: String? = nil
      fileprivate var _soulEggs: Double? = nil
    }

    init() {}
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_InGameMail: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var title: String {
    get {return _storage._title ?? String()}
    set {_uniqueStorage()._title = newValue}
  }
  /// Returns true if `title` has been explicitly set.
  var hasTitle: Bool {return _storage._title != nil}
  /// Clears the value of `title`. Subsequent reads from it will return its default value.
  mutating func clearTitle() {_uniqueStorage()._title = nil}

  var date: String {
    get {return _storage._date ?? String()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  mutating func clearDate() {_uniqueStorage()._date = nil}

  var message: String {
    get {return _storage._message ?? String()}
    set {_uniqueStorage()._message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return _storage._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {_uniqueStorage()._message = nil}

  var action: String {
    get {return _storage._action ?? String()}
    set {_uniqueStorage()._action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return _storage._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {_uniqueStorage()._action = nil}

  var url: String {
    get {return _storage._url ?? String()}
    set {_uniqueStorage()._url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return _storage._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {_uniqueStorage()._url = nil}

  var appLink: Ei_UILocation {
    get {return _storage._appLink ?? .none}
    set {_uniqueStorage()._appLink = newValue}
  }
  /// Returns true if `appLink` has been explicitly set.
  var hasAppLink: Bool {return _storage._appLink != nil}
  /// Clears the value of `appLink`. Subsequent reads from it will return its default value.
  mutating func clearAppLink() {_uniqueStorage()._appLink = nil}

  var appLinkExtra: String {
    get {return _storage._appLinkExtra ?? String()}
    set {_uniqueStorage()._appLinkExtra = newValue}
  }
  /// Returns true if `appLinkExtra` has been explicitly set.
  var hasAppLinkExtra: Bool {return _storage._appLinkExtra != nil}
  /// Clears the value of `appLinkExtra`. Subsequent reads from it will return its default value.
  mutating func clearAppLinkExtra() {_uniqueStorage()._appLinkExtra = nil}

  var image: Ei_DLCItem {
    get {return _storage._image ?? Ei_DLCItem()}
    set {_uniqueStorage()._image = newValue}
  }
  /// Returns true if `image` has been explicitly set.
  var hasImage: Bool {return _storage._image != nil}
  /// Clears the value of `image`. Subsequent reads from it will return its default value.
  mutating func clearImage() {_uniqueStorage()._image = nil}

  var imageWidth: Double {
    get {return _storage._imageWidth ?? 0}
    set {_uniqueStorage()._imageWidth = newValue}
  }
  /// Returns true if `imageWidth` has been explicitly set.
  var hasImageWidth: Bool {return _storage._imageWidth != nil}
  /// Clears the value of `imageWidth`. Subsequent reads from it will return its default value.
  mutating func clearImageWidth() {_uniqueStorage()._imageWidth = nil}

  var imageHeight: Double {
    get {return _storage._imageHeight ?? 0}
    set {_uniqueStorage()._imageHeight = newValue}
  }
  /// Returns true if `imageHeight` has been explicitly set.
  var hasImageHeight: Bool {return _storage._imageHeight != nil}
  /// Clears the value of `imageHeight`. Subsequent reads from it will return its default value.
  mutating func clearImageHeight() {_uniqueStorage()._imageHeight = nil}

  var platform: UInt32 {
    get {return _storage._platform ?? 0}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  var builds: [String] {
    get {return _storage._builds}
    set {_uniqueStorage()._builds = newValue}
  }

  var minClientVersion: UInt32 {
    get {return _storage._minClientVersion ?? 0}
    set {_uniqueStorage()._minClientVersion = newValue}
  }
  /// Returns true if `minClientVersion` has been explicitly set.
  var hasMinClientVersion: Bool {return _storage._minClientVersion != nil}
  /// Clears the value of `minClientVersion`. Subsequent reads from it will return its default value.
  mutating func clearMinClientVersion() {_uniqueStorage()._minClientVersion = nil}

  var maxClientVersion: UInt32 {
    get {return _storage._maxClientVersion ?? 0}
    set {_uniqueStorage()._maxClientVersion = newValue}
  }
  /// Returns true if `maxClientVersion` has been explicitly set.
  var hasMaxClientVersion: Bool {return _storage._maxClientVersion != nil}
  /// Clears the value of `maxClientVersion`. Subsequent reads from it will return its default value.
  mutating func clearMaxClientVersion() {_uniqueStorage()._maxClientVersion = nil}

  var minSoulEggs: Double {
    get {return _storage._minSoulEggs ?? 0}
    set {_uniqueStorage()._minSoulEggs = newValue}
  }
  /// Returns true if `minSoulEggs` has been explicitly set.
  var hasMinSoulEggs: Bool {return _storage._minSoulEggs != nil}
  /// Clears the value of `minSoulEggs`. Subsequent reads from it will return its default value.
  mutating func clearMinSoulEggs() {_uniqueStorage()._minSoulEggs = nil}

  var maxSoulEggs: Double {
    get {return _storage._maxSoulEggs ?? 0}
    set {_uniqueStorage()._maxSoulEggs = newValue}
  }
  /// Returns true if `maxSoulEggs` has been explicitly set.
  var hasMaxSoulEggs: Bool {return _storage._maxSoulEggs != nil}
  /// Clears the value of `maxSoulEggs`. Subsequent reads from it will return its default value.
  mutating func clearMaxSoulEggs() {_uniqueStorage()._maxSoulEggs = nil}

  var minMysticalBonus: Double {
    get {return _storage._minMysticalBonus ?? 0}
    set {_uniqueStorage()._minMysticalBonus = newValue}
  }
  /// Returns true if `minMysticalBonus` has been explicitly set.
  var hasMinMysticalBonus: Bool {return _storage._minMysticalBonus != nil}
  /// Clears the value of `minMysticalBonus`. Subsequent reads from it will return its default value.
  mutating func clearMinMysticalBonus() {_uniqueStorage()._minMysticalBonus = nil}

  var userType: Ei_UserType {
    get {return _storage._userType ?? .allUsers}
    set {_uniqueStorage()._userType = newValue}
  }
  /// Returns true if `userType` has been explicitly set.
  var hasUserType: Bool {return _storage._userType != nil}
  /// Clears the value of `userType`. Subsequent reads from it will return its default value.
  mutating func clearUserType() {_uniqueStorage()._userType = nil}

  var minPiggyBreaks: UInt32 {
    get {return _storage._minPiggyBreaks ?? 0}
    set {_uniqueStorage()._minPiggyBreaks = newValue}
  }
  /// Returns true if `minPiggyBreaks` has been explicitly set.
  var hasMinPiggyBreaks: Bool {return _storage._minPiggyBreaks != nil}
  /// Clears the value of `minPiggyBreaks`. Subsequent reads from it will return its default value.
  mutating func clearMinPiggyBreaks() {_uniqueStorage()._minPiggyBreaks = nil}

  var goldTip: Double {
    get {return _storage._goldTip ?? 0}
    set {_uniqueStorage()._goldTip = newValue}
  }
  /// Returns true if `goldTip` has been explicitly set.
  var hasGoldTip: Bool {return _storage._goldTip != nil}
  /// Clears the value of `goldTip`. Subsequent reads from it will return its default value.
  mutating func clearGoldTip() {_uniqueStorage()._goldTip = nil}

  var tip: Bool {
    get {return _storage._tip ?? false}
    set {_uniqueStorage()._tip = newValue}
  }
  /// Returns true if `tip` has been explicitly set.
  var hasTip: Bool {return _storage._tip != nil}
  /// Clears the value of `tip`. Subsequent reads from it will return its default value.
  mutating func clearTip() {_uniqueStorage()._tip = nil}

  var priority: UInt32 {
    get {return _storage._priority ?? 0}
    set {_uniqueStorage()._priority = newValue}
  }
  /// Returns true if `priority` has been explicitly set.
  var hasPriority: Bool {return _storage._priority != nil}
  /// Clears the value of `priority`. Subsequent reads from it will return its default value.
  mutating func clearPriority() {_uniqueStorage()._priority = nil}

  var minDaysSinceLastTip: Double {
    get {return _storage._minDaysSinceLastTip ?? 0}
    set {_uniqueStorage()._minDaysSinceLastTip = newValue}
  }
  /// Returns true if `minDaysSinceLastTip` has been explicitly set.
  var hasMinDaysSinceLastTip: Bool {return _storage._minDaysSinceLastTip != nil}
  /// Clears the value of `minDaysSinceLastTip`. Subsequent reads from it will return its default value.
  mutating func clearMinDaysSinceLastTip() {_uniqueStorage()._minDaysSinceLastTip = nil}

  var maxRetries: UInt32 {
    get {return _storage._maxRetries ?? 0}
    set {_uniqueStorage()._maxRetries = newValue}
  }
  /// Returns true if `maxRetries` has been explicitly set.
  var hasMaxRetries: Bool {return _storage._maxRetries != nil}
  /// Clears the value of `maxRetries`. Subsequent reads from it will return its default value.
  mutating func clearMaxRetries() {_uniqueStorage()._maxRetries = nil}

  var daysUntilRetry: Double {
    get {return _storage._daysUntilRetry ?? 0}
    set {_uniqueStorage()._daysUntilRetry = newValue}
  }
  /// Returns true if `daysUntilRetry` has been explicitly set.
  var hasDaysUntilRetry: Bool {return _storage._daysUntilRetry != nil}
  /// Clears the value of `daysUntilRetry`. Subsequent reads from it will return its default value.
  mutating func clearDaysUntilRetry() {_uniqueStorage()._daysUntilRetry = nil}

  var category: String {
    get {return _storage._category ?? String()}
    set {_uniqueStorage()._category = newValue}
  }
  /// Returns true if `category` has been explicitly set.
  var hasCategory: Bool {return _storage._category != nil}
  /// Clears the value of `category`. Subsequent reads from it will return its default value.
  mutating func clearCategory() {_uniqueStorage()._category = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_MailDB: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var mail: [Ei_InGameMail] = []

  var tipsDbData: Data {
    get {return _tipsDbData ?? Data()}
    set {_tipsDbData = newValue}
  }
  /// Returns true if `tipsDbData` has been explicitly set.
  var hasTipsDbData: Bool {return self._tipsDbData != nil}
  /// Clears the value of `tipsDbData`. Subsequent reads from it will return its default value.
  mutating func clearTipsDbData() {self._tipsDbData = nil}

  var tipsChecksum: String {
    get {return _tipsChecksum ?? String()}
    set {_tipsChecksum = newValue}
  }
  /// Returns true if `tipsChecksum` has been explicitly set.
  var hasTipsChecksum: Bool {return self._tipsChecksum != nil}
  /// Clears the value of `tipsChecksum`. Subsequent reads from it will return its default value.
  mutating func clearTipsChecksum() {self._tipsChecksum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _tipsDbData: Data? = nil
  fileprivate var _tipsChecksum: String? = nil
}

struct Ei_TipsDB: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var tips: [Ei_InGameMail] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_MailState: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var readMailIds: [String] = []

  var tipsStates: [Ei_MailState.TipState] = []

  var tipsChecksum: String {
    get {return _tipsChecksum ?? String()}
    set {_tipsChecksum = newValue}
  }
  /// Returns true if `tipsChecksum` has been explicitly set.
  var hasTipsChecksum: Bool {return self._tipsChecksum != nil}
  /// Clears the value of `tipsChecksum`. Subsequent reads from it will return its default value.
  mutating func clearTipsChecksum() {self._tipsChecksum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct TipState: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var reads: UInt32 {
      get {return _reads ?? 0}
      set {_reads = newValue}
    }
    /// Returns true if `reads` has been explicitly set.
    var hasReads: Bool {return self._reads != nil}
    /// Clears the value of `reads`. Subsequent reads from it will return its default value.
    mutating func clearReads() {self._reads = nil}

    var timeRead: Double {
      get {return _timeRead ?? 0}
      set {_timeRead = newValue}
    }
    /// Returns true if `timeRead` has been explicitly set.
    var hasTimeRead: Bool {return self._timeRead != nil}
    /// Clears the value of `timeRead`. Subsequent reads from it will return its default value.
    mutating func clearTimeRead() {self._timeRead = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _reads: UInt32? = nil
    fileprivate var _timeRead: Double? = nil
  }

  init() {}

  fileprivate var _tipsChecksum: String? = nil
}

struct Ei_PeriodicalsResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var sales: Ei_SalesInfo {
    get {return _storage._sales ?? Ei_SalesInfo()}
    set {_uniqueStorage()._sales = newValue}
  }
  /// Returns true if `sales` has been explicitly set.
  var hasSales: Bool {return _storage._sales != nil}
  /// Clears the value of `sales`. Subsequent reads from it will return its default value.
  mutating func clearSales() {_uniqueStorage()._sales = nil}

  var events: Ei_EggIncCurrentEvents {
    get {return _storage._events ?? Ei_EggIncCurrentEvents()}
    set {_uniqueStorage()._events = newValue}
  }
  /// Returns true if `events` has been explicitly set.
  var hasEvents: Bool {return _storage._events != nil}
  /// Clears the value of `events`. Subsequent reads from it will return its default value.
  mutating func clearEvents() {_uniqueStorage()._events = nil}

  var contracts: Ei_ContractsResponse {
    get {return _storage._contracts ?? Ei_ContractsResponse()}
    set {_uniqueStorage()._contracts = newValue}
  }
  /// Returns true if `contracts` has been explicitly set.
  var hasContracts: Bool {return _storage._contracts != nil}
  /// Clears the value of `contracts`. Subsequent reads from it will return its default value.
  mutating func clearContracts() {_uniqueStorage()._contracts = nil}

  var evaluations: [Ei_ContractEvaluation] {
    get {return _storage._evaluations}
    set {_uniqueStorage()._evaluations = newValue}
  }

  var gifts: [Ei_ServerGift] {
    get {return _storage._gifts}
    set {_uniqueStorage()._gifts = newValue}
  }

  var artifactCases: [Ei_CompleteMissionResponse] {
    get {return _storage._artifactCases}
    set {_uniqueStorage()._artifactCases = newValue}
  }

  var liveConfig: Ei_LiveConfig {
    get {return _storage._liveConfig ?? Ei_LiveConfig()}
    set {_uniqueStorage()._liveConfig = newValue}
  }
  /// Returns true if `liveConfig` has been explicitly set.
  var hasLiveConfig: Bool {return _storage._liveConfig != nil}
  /// Clears the value of `liveConfig`. Subsequent reads from it will return its default value.
  mutating func clearLiveConfig() {_uniqueStorage()._liveConfig = nil}

  var mailBag: Ei_MailDB {
    get {return _storage._mailBag ?? Ei_MailDB()}
    set {_uniqueStorage()._mailBag = newValue}
  }
  /// Returns true if `mailBag` has been explicitly set.
  var hasMailBag: Bool {return _storage._mailBag != nil}
  /// Clears the value of `mailBag`. Subsequent reads from it will return its default value.
  mutating func clearMailBag() {_uniqueStorage()._mailBag = nil}

  var contractPlayerInfo: Ei_ContractPlayerInfo {
    get {return _storage._contractPlayerInfo ?? Ei_ContractPlayerInfo()}
    set {_uniqueStorage()._contractPlayerInfo = newValue}
  }
  /// Returns true if `contractPlayerInfo` has been explicitly set.
  var hasContractPlayerInfo: Bool {return _storage._contractPlayerInfo != nil}
  /// Clears the value of `contractPlayerInfo`. Subsequent reads from it will return its default value.
  mutating func clearContractPlayerInfo() {_uniqueStorage()._contractPlayerInfo = nil}

  var showcaseRoyalties: [Ei_PeriodicalsResponse.RoyaltyInfo] {
    get {return _storage._showcaseRoyalties}
    set {_uniqueStorage()._showcaseRoyalties = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct RoyaltyInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var amount: UInt32 {
      get {return _amount ?? 0}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {self._amount = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _amount: UInt32? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_GetPeriodicalsRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var piggyFull: Bool {
    get {return _storage._piggyFull ?? false}
    set {_uniqueStorage()._piggyFull = newValue}
  }
  /// Returns true if `piggyFull` has been explicitly set.
  var hasPiggyFull: Bool {return _storage._piggyFull != nil}
  /// Clears the value of `piggyFull`. Subsequent reads from it will return its default value.
  mutating func clearPiggyFull() {_uniqueStorage()._piggyFull = nil}

  var piggyFoundFull: Bool {
    get {return _storage._piggyFoundFull ?? false}
    set {_uniqueStorage()._piggyFoundFull = newValue}
  }
  /// Returns true if `piggyFoundFull` has been explicitly set.
  var hasPiggyFoundFull: Bool {return _storage._piggyFoundFull != nil}
  /// Clears the value of `piggyFoundFull`. Subsequent reads from it will return its default value.
  mutating func clearPiggyFoundFull() {_uniqueStorage()._piggyFoundFull = nil}

  var secondsFullRealtime: Double {
    get {return _storage._secondsFullRealtime ?? 0}
    set {_uniqueStorage()._secondsFullRealtime = newValue}
  }
  /// Returns true if `secondsFullRealtime` has been explicitly set.
  var hasSecondsFullRealtime: Bool {return _storage._secondsFullRealtime != nil}
  /// Clears the value of `secondsFullRealtime`. Subsequent reads from it will return its default value.
  mutating func clearSecondsFullRealtime() {_uniqueStorage()._secondsFullRealtime = nil}

  var secondsFullGametime: Double {
    get {return _storage._secondsFullGametime ?? 0}
    set {_uniqueStorage()._secondsFullGametime = newValue}
  }
  /// Returns true if `secondsFullGametime` has been explicitly set.
  var hasSecondsFullGametime: Bool {return _storage._secondsFullGametime != nil}
  /// Clears the value of `secondsFullGametime`. Subsequent reads from it will return its default value.
  mutating func clearSecondsFullGametime() {_uniqueStorage()._secondsFullGametime = nil}

  var lostIncrements: UInt32 {
    get {return _storage._lostIncrements ?? 0}
    set {_uniqueStorage()._lostIncrements = newValue}
  }
  /// Returns true if `lostIncrements` has been explicitly set.
  var hasLostIncrements: Bool {return _storage._lostIncrements != nil}
  /// Clears the value of `lostIncrements`. Subsequent reads from it will return its default value.
  mutating func clearLostIncrements() {_uniqueStorage()._lostIncrements = nil}

  var soulEggs: Double {
    get {return _storage._soulEggs ?? 0}
    set {_uniqueStorage()._soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return _storage._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {_uniqueStorage()._soulEggs = nil}

  var mysticalEarningsMult: Double {
    get {return _storage._mysticalEarningsMult ?? 0}
    set {_uniqueStorage()._mysticalEarningsMult = newValue}
  }
  /// Returns true if `mysticalEarningsMult` has been explicitly set.
  var hasMysticalEarningsMult: Bool {return _storage._mysticalEarningsMult != nil}
  /// Clears the value of `mysticalEarningsMult`. Subsequent reads from it will return its default value.
  mutating func clearMysticalEarningsMult() {_uniqueStorage()._mysticalEarningsMult = nil}

  var eop: UInt32 {
    get {return _storage._eop ?? 0}
    set {_uniqueStorage()._eop = newValue}
  }
  /// Returns true if `eop` has been explicitly set.
  var hasEop: Bool {return _storage._eop != nil}
  /// Clears the value of `eop`. Subsequent reads from it will return its default value.
  mutating func clearEop() {_uniqueStorage()._eop = nil}

  var contractsUnlocked: Bool {
    get {return _storage._contractsUnlocked ?? false}
    set {_uniqueStorage()._contractsUnlocked = newValue}
  }
  /// Returns true if `contractsUnlocked` has been explicitly set.
  var hasContractsUnlocked: Bool {return _storage._contractsUnlocked != nil}
  /// Clears the value of `contractsUnlocked`. Subsequent reads from it will return its default value.
  mutating func clearContractsUnlocked() {_uniqueStorage()._contractsUnlocked = nil}

  var artifactsUnlocked: Bool {
    get {return _storage._artifactsUnlocked ?? false}
    set {_uniqueStorage()._artifactsUnlocked = newValue}
  }
  /// Returns true if `artifactsUnlocked` has been explicitly set.
  var hasArtifactsUnlocked: Bool {return _storage._artifactsUnlocked != nil}
  /// Clears the value of `artifactsUnlocked`. Subsequent reads from it will return its default value.
  mutating func clearArtifactsUnlocked() {_uniqueStorage()._artifactsUnlocked = nil}

  var currentClientVersion: UInt32 {
    get {return _storage._currentClientVersion ?? 0}
    set {_uniqueStorage()._currentClientVersion = newValue}
  }
  /// Returns true if `currentClientVersion` has been explicitly set.
  var hasCurrentClientVersion: Bool {return _storage._currentClientVersion != nil}
  /// Clears the value of `currentClientVersion`. Subsequent reads from it will return its default value.
  mutating func clearCurrentClientVersion() {_uniqueStorage()._currentClientVersion = nil}

  var debug: Bool {
    get {return _storage._debug ?? false}
    set {_uniqueStorage()._debug = newValue}
  }
  /// Returns true if `debug` has been explicitly set.
  var hasDebug: Bool {return _storage._debug != nil}
  /// Clears the value of `debug`. Subsequent reads from it will return its default value.
  mutating func clearDebug() {_uniqueStorage()._debug = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ConfigRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var soulEggs: Double {
    get {return _soulEggs ?? 0}
    set {_soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return self._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {self._soulEggs = nil}

  var contractsUnlocked: Bool {
    get {return _contractsUnlocked ?? false}
    set {_contractsUnlocked = newValue}
  }
  /// Returns true if `contractsUnlocked` has been explicitly set.
  var hasContractsUnlocked: Bool {return self._contractsUnlocked != nil}
  /// Clears the value of `contractsUnlocked`. Subsequent reads from it will return its default value.
  mutating func clearContractsUnlocked() {self._contractsUnlocked = nil}

  var artifactsUnlocked: Bool {
    get {return _artifactsUnlocked ?? false}
    set {_artifactsUnlocked = newValue}
  }
  /// Returns true if `artifactsUnlocked` has been explicitly set.
  var hasArtifactsUnlocked: Bool {return self._artifactsUnlocked != nil}
  /// Clears the value of `artifactsUnlocked`. Subsequent reads from it will return its default value.
  mutating func clearArtifactsUnlocked() {self._artifactsUnlocked = nil}

  var fuelTankUnlocked: Bool {
    get {return _fuelTankUnlocked ?? false}
    set {_fuelTankUnlocked = newValue}
  }
  /// Returns true if `fuelTankUnlocked` has been explicitly set.
  var hasFuelTankUnlocked: Bool {return self._fuelTankUnlocked != nil}
  /// Clears the value of `fuelTankUnlocked`. Subsequent reads from it will return its default value.
  mutating func clearFuelTankUnlocked() {self._fuelTankUnlocked = nil}

  var proPermit: Bool {
    get {return _proPermit ?? false}
    set {_proPermit = newValue}
  }
  /// Returns true if `proPermit` has been explicitly set.
  var hasProPermit: Bool {return self._proPermit != nil}
  /// Clears the value of `proPermit`. Subsequent reads from it will return its default value.
  mutating func clearProPermit() {self._proPermit = nil}

  var ultra: Bool {
    get {return _ultra ?? false}
    set {_ultra = newValue}
  }
  /// Returns true if `ultra` has been explicitly set.
  var hasUltra: Bool {return self._ultra != nil}
  /// Clears the value of `ultra`. Subsequent reads from it will return its default value.
  mutating func clearUltra() {self._ultra = nil}

  var tipsChecksum: String {
    get {return _tipsChecksum ?? String()}
    set {_tipsChecksum = newValue}
  }
  /// Returns true if `tipsChecksum` has been explicitly set.
  var hasTipsChecksum: Bool {return self._tipsChecksum != nil}
  /// Clears the value of `tipsChecksum`. Subsequent reads from it will return its default value.
  mutating func clearTipsChecksum() {self._tipsChecksum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _soulEggs: Double? = nil
  fileprivate var _contractsUnlocked: Bool? = nil
  fileprivate var _artifactsUnlocked: Bool? = nil
  fileprivate var _fuelTankUnlocked: Bool? = nil
  fileprivate var _proPermit: Bool? = nil
  fileprivate var _ultra: Bool? = nil
  fileprivate var _tipsChecksum: String? = nil
}

struct Ei_ConfigResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var liveConfig: Ei_LiveConfig {
    get {return _liveConfig ?? Ei_LiveConfig()}
    set {_liveConfig = newValue}
  }
  /// Returns true if `liveConfig` has been explicitly set.
  var hasLiveConfig: Bool {return self._liveConfig != nil}
  /// Clears the value of `liveConfig`. Subsequent reads from it will return its default value.
  mutating func clearLiveConfig() {self._liveConfig = nil}

  var mailBag: Ei_MailDB {
    get {return _mailBag ?? Ei_MailDB()}
    set {_mailBag = newValue}
  }
  /// Returns true if `mailBag` has been explicitly set.
  var hasMailBag: Bool {return self._mailBag != nil}
  /// Clears the value of `mailBag`. Subsequent reads from it will return its default value.
  mutating func clearMailBag() {self._mailBag = nil}

  var dlcCatalog: Ei_DLCCatalog {
    get {return _dlcCatalog ?? Ei_DLCCatalog()}
    set {_dlcCatalog = newValue}
  }
  /// Returns true if `dlcCatalog` has been explicitly set.
  var hasDlcCatalog: Bool {return self._dlcCatalog != nil}
  /// Clears the value of `dlcCatalog`. Subsequent reads from it will return its default value.
  mutating func clearDlcCatalog() {self._dlcCatalog = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _liveConfig: Ei_LiveConfig? = nil
  fileprivate var _mailBag: Ei_MailDB? = nil
  fileprivate var _dlcCatalog: Ei_DLCCatalog? = nil
}

struct Ei_AdAttributionRawData: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceAdID: String {
    get {return _deviceAdID ?? String()}
    set {_deviceAdID = newValue}
  }
  /// Returns true if `deviceAdID` has been explicitly set.
  var hasDeviceAdID: Bool {return self._deviceAdID != nil}
  /// Clears the value of `deviceAdID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceAdID() {self._deviceAdID = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var adNetwork: String {
    get {return _adNetwork ?? String()}
    set {_adNetwork = newValue}
  }
  /// Returns true if `adNetwork` has been explicitly set.
  var hasAdNetwork: Bool {return self._adNetwork != nil}
  /// Clears the value of `adNetwork`. Subsequent reads from it will return its default value.
  mutating func clearAdNetwork() {self._adNetwork = nil}

  var jsonData: String {
    get {return _jsonData ?? String()}
    set {_jsonData = newValue}
  }
  /// Returns true if `jsonData` has been explicitly set.
  var hasJsonData: Bool {return self._jsonData != nil}
  /// Clears the value of `jsonData`. Subsequent reads from it will return its default value.
  mutating func clearJsonData() {self._jsonData = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _deviceAdID: String? = nil
  fileprivate var _userID: String? = nil
  fileprivate var _adNetwork: String? = nil
  fileprivate var _jsonData: String? = nil
}

struct Ei_AdAttributionRow: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var adID: String {
    get {return _adID ?? String()}
    set {_adID = newValue}
  }
  /// Returns true if `adID` has been explicitly set.
  var hasAdID: Bool {return self._adID != nil}
  /// Clears the value of `adID`. Subsequent reads from it will return its default value.
  mutating func clearAdID() {self._adID = nil}

  var adNetwork: String {
    get {return _adNetwork ?? String()}
    set {_adNetwork = newValue}
  }
  /// Returns true if `adNetwork` has been explicitly set.
  var hasAdNetwork: Bool {return self._adNetwork != nil}
  /// Clears the value of `adNetwork`. Subsequent reads from it will return its default value.
  mutating func clearAdNetwork() {self._adNetwork = nil}

  var campaign: String {
    get {return _campaign ?? String()}
    set {_campaign = newValue}
  }
  /// Returns true if `campaign` has been explicitly set.
  var hasCampaign: Bool {return self._campaign != nil}
  /// Clears the value of `campaign`. Subsequent reads from it will return its default value.
  mutating func clearCampaign() {self._campaign = nil}

  var keyword: String {
    get {return _keyword ?? String()}
    set {_keyword = newValue}
  }
  /// Returns true if `keyword` has been explicitly set.
  var hasKeyword: Bool {return self._keyword != nil}
  /// Clears the value of `keyword`. Subsequent reads from it will return its default value.
  mutating func clearKeyword() {self._keyword = nil}

  var extra: String {
    get {return _extra ?? String()}
    set {_extra = newValue}
  }
  /// Returns true if `extra` has been explicitly set.
  var hasExtra: Bool {return self._extra != nil}
  /// Clears the value of `extra`. Subsequent reads from it will return its default value.
  mutating func clearExtra() {self._extra = nil}

  var clickDate: Float {
    get {return _clickDate ?? 0}
    set {_clickDate = newValue}
  }
  /// Returns true if `clickDate` has been explicitly set.
  var hasClickDate: Bool {return self._clickDate != nil}
  /// Clears the value of `clickDate`. Subsequent reads from it will return its default value.
  mutating func clearClickDate() {self._clickDate = nil}

  var downloadDate: Float {
    get {return _downloadDate ?? 0}
    set {_downloadDate = newValue}
  }
  /// Returns true if `downloadDate` has been explicitly set.
  var hasDownloadDate: Bool {return self._downloadDate != nil}
  /// Clears the value of `downloadDate`. Subsequent reads from it will return its default value.
  mutating func clearDownloadDate() {self._downloadDate = nil}

  var approxTime: Float {
    get {return _approxTime ?? 0}
    set {_approxTime = newValue}
  }
  /// Returns true if `approxTime` has been explicitly set.
  var hasApproxTime: Bool {return self._approxTime != nil}
  /// Clears the value of `approxTime`. Subsequent reads from it will return its default value.
  mutating func clearApproxTime() {self._approxTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _userID: String? = nil
  fileprivate var _adID: String? = nil
  fileprivate var _adNetwork: String? = nil
  fileprivate var _campaign: String? = nil
  fileprivate var _keyword: String? = nil
  fileprivate var _extra: String? = nil
  fileprivate var _clickDate: Float? = nil
  fileprivate var _downloadDate: Float? = nil
  fileprivate var _approxTime: Float? = nil
}

struct Ei_AdAttributionInfo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var deviceAdID: String {
    get {return _storage._deviceAdID ?? String()}
    set {_uniqueStorage()._deviceAdID = newValue}
  }
  /// Returns true if `deviceAdID` has been explicitly set.
  var hasDeviceAdID: Bool {return _storage._deviceAdID != nil}
  /// Clears the value of `deviceAdID`. Subsequent reads from it will return its default value.
  mutating func clearDeviceAdID() {_uniqueStorage()._deviceAdID = nil}

  var networkName: String {
    get {return _storage._networkName ?? String()}
    set {_uniqueStorage()._networkName = newValue}
  }
  /// Returns true if `networkName` has been explicitly set.
  var hasNetworkName: Bool {return _storage._networkName != nil}
  /// Clears the value of `networkName`. Subsequent reads from it will return its default value.
  mutating func clearNetworkName() {_uniqueStorage()._networkName = nil}

  var attribution: Bool {
    get {return _storage._attribution ?? false}
    set {_uniqueStorage()._attribution = newValue}
  }
  /// Returns true if `attribution` has been explicitly set.
  var hasAttribution: Bool {return _storage._attribution != nil}
  /// Clears the value of `attribution`. Subsequent reads from it will return its default value.
  mutating func clearAttribution() {_uniqueStorage()._attribution = nil}

  var orgName: String {
    get {return _storage._orgName ?? String()}
    set {_uniqueStorage()._orgName = newValue}
  }
  /// Returns true if `orgName` has been explicitly set.
  var hasOrgName: Bool {return _storage._orgName != nil}
  /// Clears the value of `orgName`. Subsequent reads from it will return its default value.
  mutating func clearOrgName() {_uniqueStorage()._orgName = nil}

  var orgID: String {
    get {return _storage._orgID ?? String()}
    set {_uniqueStorage()._orgID = newValue}
  }
  /// Returns true if `orgID` has been explicitly set.
  var hasOrgID: Bool {return _storage._orgID != nil}
  /// Clears the value of `orgID`. Subsequent reads from it will return its default value.
  mutating func clearOrgID() {_uniqueStorage()._orgID = nil}

  var campaignName: String {
    get {return _storage._campaignName ?? String()}
    set {_uniqueStorage()._campaignName = newValue}
  }
  /// Returns true if `campaignName` has been explicitly set.
  var hasCampaignName: Bool {return _storage._campaignName != nil}
  /// Clears the value of `campaignName`. Subsequent reads from it will return its default value.
  mutating func clearCampaignName() {_uniqueStorage()._campaignName = nil}

  var campaignID: String {
    get {return _storage._campaignID ?? String()}
    set {_uniqueStorage()._campaignID = newValue}
  }
  /// Returns true if `campaignID` has been explicitly set.
  var hasCampaignID: Bool {return _storage._campaignID != nil}
  /// Clears the value of `campaignID`. Subsequent reads from it will return its default value.
  mutating func clearCampaignID() {_uniqueStorage()._campaignID = nil}

  var clickDate: String {
    get {return _storage._clickDate ?? String()}
    set {_uniqueStorage()._clickDate = newValue}
  }
  /// Returns true if `clickDate` has been explicitly set.
  var hasClickDate: Bool {return _storage._clickDate != nil}
  /// Clears the value of `clickDate`. Subsequent reads from it will return its default value.
  mutating func clearClickDate() {_uniqueStorage()._clickDate = nil}

  var conversionDate: String {
    get {return _storage._conversionDate ?? String()}
    set {_uniqueStorage()._conversionDate = newValue}
  }
  /// Returns true if `conversionDate` has been explicitly set.
  var hasConversionDate: Bool {return _storage._conversionDate != nil}
  /// Clears the value of `conversionDate`. Subsequent reads from it will return its default value.
  mutating func clearConversionDate() {_uniqueStorage()._conversionDate = nil}

  var conversionType: String {
    get {return _storage._conversionType ?? String()}
    set {_uniqueStorage()._conversionType = newValue}
  }
  /// Returns true if `conversionType` has been explicitly set.
  var hasConversionType: Bool {return _storage._conversionType != nil}
  /// Clears the value of `conversionType`. Subsequent reads from it will return its default value.
  mutating func clearConversionType() {_uniqueStorage()._conversionType = nil}

  var geo: String {
    get {return _storage._geo ?? String()}
    set {_uniqueStorage()._geo = newValue}
  }
  /// Returns true if `geo` has been explicitly set.
  var hasGeo: Bool {return _storage._geo != nil}
  /// Clears the value of `geo`. Subsequent reads from it will return its default value.
  mutating func clearGeo() {_uniqueStorage()._geo = nil}

  var adgroupName: String {
    get {return _storage._adgroupName ?? String()}
    set {_uniqueStorage()._adgroupName = newValue}
  }
  /// Returns true if `adgroupName` has been explicitly set.
  var hasAdgroupName: Bool {return _storage._adgroupName != nil}
  /// Clears the value of `adgroupName`. Subsequent reads from it will return its default value.
  mutating func clearAdgroupName() {_uniqueStorage()._adgroupName = nil}

  var adgroupID: String {
    get {return _storage._adgroupID ?? String()}
    set {_uniqueStorage()._adgroupID = newValue}
  }
  /// Returns true if `adgroupID` has been explicitly set.
  var hasAdgroupID: Bool {return _storage._adgroupID != nil}
  /// Clears the value of `adgroupID`. Subsequent reads from it will return its default value.
  mutating func clearAdgroupID() {_uniqueStorage()._adgroupID = nil}

  var keyword: String {
    get {return _storage._keyword ?? String()}
    set {_uniqueStorage()._keyword = newValue}
  }
  /// Returns true if `keyword` has been explicitly set.
  var hasKeyword: Bool {return _storage._keyword != nil}
  /// Clears the value of `keyword`. Subsequent reads from it will return its default value.
  mutating func clearKeyword() {_uniqueStorage()._keyword = nil}

  var keywordID: String {
    get {return _storage._keywordID ?? String()}
    set {_uniqueStorage()._keywordID = newValue}
  }
  /// Returns true if `keywordID` has been explicitly set.
  var hasKeywordID: Bool {return _storage._keywordID != nil}
  /// Clears the value of `keywordID`. Subsequent reads from it will return its default value.
  mutating func clearKeywordID() {_uniqueStorage()._keywordID = nil}

  var keywordExtra: String {
    get {return _storage._keywordExtra ?? String()}
    set {_uniqueStorage()._keywordExtra = newValue}
  }
  /// Returns true if `keywordExtra` has been explicitly set.
  var hasKeywordExtra: Bool {return _storage._keywordExtra != nil}
  /// Clears the value of `keywordExtra`. Subsequent reads from it will return its default value.
  mutating func clearKeywordExtra() {_uniqueStorage()._keywordExtra = nil}

  var creativesetName: String {
    get {return _storage._creativesetName ?? String()}
    set {_uniqueStorage()._creativesetName = newValue}
  }
  /// Returns true if `creativesetName` has been explicitly set.
  var hasCreativesetName: Bool {return _storage._creativesetName != nil}
  /// Clears the value of `creativesetName`. Subsequent reads from it will return its default value.
  mutating func clearCreativesetName() {_uniqueStorage()._creativesetName = nil}

  var creativesetID: String {
    get {return _storage._creativesetID ?? String()}
    set {_uniqueStorage()._creativesetID = newValue}
  }
  /// Returns true if `creativesetID` has been explicitly set.
  var hasCreativesetID: Bool {return _storage._creativesetID != nil}
  /// Clears the value of `creativesetID`. Subsequent reads from it will return its default value.
  mutating func clearCreativesetID() {_uniqueStorage()._creativesetID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ArtifactsClientInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionCapacityMult: Double {
    get {return _missionCapacityMult ?? 0}
    set {_missionCapacityMult = newValue}
  }
  /// Returns true if `missionCapacityMult` has been explicitly set.
  var hasMissionCapacityMult: Bool {return self._missionCapacityMult != nil}
  /// Clears the value of `missionCapacityMult`. Subsequent reads from it will return its default value.
  mutating func clearMissionCapacityMult() {self._missionCapacityMult = nil}

  var missionDurationMult: Double {
    get {return _missionDurationMult ?? 0}
    set {_missionDurationMult = newValue}
  }
  /// Returns true if `missionDurationMult` has been explicitly set.
  var hasMissionDurationMult: Bool {return self._missionDurationMult != nil}
  /// Clears the value of `missionDurationMult`. Subsequent reads from it will return its default value.
  mutating func clearMissionDurationMult() {self._missionDurationMult = nil}

  var missionFtlDurationResearchMult: Double {
    get {return _missionFtlDurationResearchMult ?? 0}
    set {_missionFtlDurationResearchMult = newValue}
  }
  /// Returns true if `missionFtlDurationResearchMult` has been explicitly set.
  var hasMissionFtlDurationResearchMult: Bool {return self._missionFtlDurationResearchMult != nil}
  /// Clears the value of `missionFtlDurationResearchMult`. Subsequent reads from it will return its default value.
  mutating func clearMissionFtlDurationResearchMult() {self._missionFtlDurationResearchMult = nil}

  var missionCapacityResearchMult: Double {
    get {return _missionCapacityResearchMult ?? 0}
    set {_missionCapacityResearchMult = newValue}
  }
  /// Returns true if `missionCapacityResearchMult` has been explicitly set.
  var hasMissionCapacityResearchMult: Bool {return self._missionCapacityResearchMult != nil}
  /// Clears the value of `missionCapacityResearchMult`. Subsequent reads from it will return its default value.
  mutating func clearMissionCapacityResearchMult() {self._missionCapacityResearchMult = nil}

  var launchCounts: [Ei_ArtifactsClientInfo.LaunchCount] = []

  var lastServerLaunchCountSumTime: Double {
    get {return _lastServerLaunchCountSumTime ?? 0}
    set {_lastServerLaunchCountSumTime = newValue}
  }
  /// Returns true if `lastServerLaunchCountSumTime` has been explicitly set.
  var hasLastServerLaunchCountSumTime: Bool {return self._lastServerLaunchCountSumTime != nil}
  /// Clears the value of `lastServerLaunchCountSumTime`. Subsequent reads from it will return its default value.
  mutating func clearLastServerLaunchCountSumTime() {self._lastServerLaunchCountSumTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct LaunchCount: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ship: Ei_MissionInfo.Spaceship {
      get {return _ship ?? .chickenOne}
      set {_ship = newValue}
    }
    /// Returns true if `ship` has been explicitly set.
    var hasShip: Bool {return self._ship != nil}
    /// Clears the value of `ship`. Subsequent reads from it will return its default value.
    mutating func clearShip() {self._ship = nil}

    var numLaunches: UInt32 {
      get {return _numLaunches ?? 0}
      set {_numLaunches = newValue}
    }
    /// Returns true if `numLaunches` has been explicitly set.
    var hasNumLaunches: Bool {return self._numLaunches != nil}
    /// Clears the value of `numLaunches`. Subsequent reads from it will return its default value.
    mutating func clearNumLaunches() {self._numLaunches = nil}

    var launchPoints: Double {
      get {return _launchPoints ?? 0}
      set {_launchPoints = newValue}
    }
    /// Returns true if `launchPoints` has been explicitly set.
    var hasLaunchPoints: Bool {return self._launchPoints != nil}
    /// Clears the value of `launchPoints`. Subsequent reads from it will return its default value.
    mutating func clearLaunchPoints() {self._launchPoints = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _ship: Ei_MissionInfo.Spaceship? = nil
    fileprivate var _numLaunches: UInt32? = nil
    fileprivate var _launchPoints: Double? = nil
  }

  init() {}

  fileprivate var _missionCapacityMult: Double? = nil
  fileprivate var _missionDurationMult: Double? = nil
  fileprivate var _missionFtlDurationResearchMult: Double? = nil
  fileprivate var _missionCapacityResearchMult: Double? = nil
  fileprivate var _lastServerLaunchCountSumTime: Double? = nil
}

struct Ei_MissionInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var ship: Ei_MissionInfo.Spaceship {
    get {return _ship ?? .chickenOne}
    set {_ship = newValue}
  }
  /// Returns true if `ship` has been explicitly set.
  var hasShip: Bool {return self._ship != nil}
  /// Clears the value of `ship`. Subsequent reads from it will return its default value.
  mutating func clearShip() {self._ship = nil}

  var status: Ei_MissionInfo.Status {
    get {return _status ?? .fueling}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var durationType: Ei_MissionInfo.DurationType {
    get {return _durationType ?? .short}
    set {_durationType = newValue}
  }
  /// Returns true if `durationType` has been explicitly set.
  var hasDurationType: Bool {return self._durationType != nil}
  /// Clears the value of `durationType`. Subsequent reads from it will return its default value.
  mutating func clearDurationType() {self._durationType = nil}

  var type: Ei_MissionInfo.MissionType {
    get {return _type ?? .standard}
    set {_type = newValue}
  }
  /// Returns true if `type` has been explicitly set.
  var hasType: Bool {return self._type != nil}
  /// Clears the value of `type`. Subsequent reads from it will return its default value.
  mutating func clearType() {self._type = nil}

  var resetIndex: UInt32 {
    get {return _resetIndex ?? 0}
    set {_resetIndex = newValue}
  }
  /// Returns true if `resetIndex` has been explicitly set.
  var hasResetIndex: Bool {return self._resetIndex != nil}
  /// Clears the value of `resetIndex`. Subsequent reads from it will return its default value.
  mutating func clearResetIndex() {self._resetIndex = nil}

  var fuel: [Ei_MissionInfo.Fuel] = []

  var level: UInt32 {
    get {return _level ?? 0}
    set {_level = newValue}
  }
  /// Returns true if `level` has been explicitly set.
  var hasLevel: Bool {return self._level != nil}
  /// Clears the value of `level`. Subsequent reads from it will return its default value.
  mutating func clearLevel() {self._level = nil}

  var durationSeconds: Double {
    get {return _durationSeconds ?? 0}
    set {_durationSeconds = newValue}
  }
  /// Returns true if `durationSeconds` has been explicitly set.
  var hasDurationSeconds: Bool {return self._durationSeconds != nil}
  /// Clears the value of `durationSeconds`. Subsequent reads from it will return its default value.
  mutating func clearDurationSeconds() {self._durationSeconds = nil}

  var capacity: UInt32 {
    get {return _capacity ?? 0}
    set {_capacity = newValue}
  }
  /// Returns true if `capacity` has been explicitly set.
  var hasCapacity: Bool {return self._capacity != nil}
  /// Clears the value of `capacity`. Subsequent reads from it will return its default value.
  mutating func clearCapacity() {self._capacity = nil}

  var qualityBump: Double {
    get {return _qualityBump ?? 0}
    set {_qualityBump = newValue}
  }
  /// Returns true if `qualityBump` has been explicitly set.
  var hasQualityBump: Bool {return self._qualityBump != nil}
  /// Clears the value of `qualityBump`. Subsequent reads from it will return its default value.
  mutating func clearQualityBump() {self._qualityBump = nil}

  var targetArtifact: Ei_ArtifactSpec.Name {
    get {return _targetArtifact ?? .lunarTotem}
    set {_targetArtifact = newValue}
  }
  /// Returns true if `targetArtifact` has been explicitly set.
  var hasTargetArtifact: Bool {return self._targetArtifact != nil}
  /// Clears the value of `targetArtifact`. Subsequent reads from it will return its default value.
  mutating func clearTargetArtifact() {self._targetArtifact = nil}

  var secondsRemaining: Double {
    get {return _secondsRemaining ?? 0}
    set {_secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return self._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {self._secondsRemaining = nil}

  var startTimeDerived: Double {
    get {return _startTimeDerived ?? 0}
    set {_startTimeDerived = newValue}
  }
  /// Returns true if `startTimeDerived` has been explicitly set.
  var hasStartTimeDerived: Bool {return self._startTimeDerived != nil}
  /// Clears the value of `startTimeDerived`. Subsequent reads from it will return its default value.
  mutating func clearStartTimeDerived() {self._startTimeDerived = nil}

  var missionLog: String {
    get {return _missionLog ?? String()}
    set {_missionLog = newValue}
  }
  /// Returns true if `missionLog` has been explicitly set.
  var hasMissionLog: Bool {return self._missionLog != nil}
  /// Clears the value of `missionLog`. Subsequent reads from it will return its default value.
  mutating func clearMissionLog() {self._missionLog = nil}

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Spaceship: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case chickenOne = 0
    case chickenNine = 1
    case chickenHeavy = 2
    case bcr = 3
    case milleniumChicken = 4
    case corellihenCorvette = 5
    case galeggtica = 6
    case chickfiant = 7
    case voyegger = 8
    case henerprise = 9
    case atreggies = 10

    init() {
      self = .chickenOne
    }

  }

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case fueling = 0
    case prepareToLaunch = 5
    case exploring = 10
    case returned = 15
    case analyzing = 16
    case complete = 20
    case archived = 25
    case aborted = 30

    init() {
      self = .fueling
    }

  }

  enum DurationType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case short = 0
    case long = 1
    case epic = 2
    case tutorial = 3

    init() {
      self = .short
    }

  }

  enum MissionType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case standard = 0
    case virtue = 1

    init() {
      self = .standard
    }

  }

  struct Fuel: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var egg: Ei_Egg {
      get {return _egg ?? .edible}
      set {_egg = newValue}
    }
    /// Returns true if `egg` has been explicitly set.
    var hasEgg: Bool {return self._egg != nil}
    /// Clears the value of `egg`. Subsequent reads from it will return its default value.
    mutating func clearEgg() {self._egg = nil}

    var amount: Double {
      get {return _amount ?? 0}
      set {_amount = newValue}
    }
    /// Returns true if `amount` has been explicitly set.
    var hasAmount: Bool {return self._amount != nil}
    /// Clears the value of `amount`. Subsequent reads from it will return its default value.
    mutating func clearAmount() {self._amount = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _egg: Ei_Egg? = nil
    fileprivate var _amount: Double? = nil
  }

  init() {}

  fileprivate var _ship: Ei_MissionInfo.Spaceship? = nil
  fileprivate var _status: Ei_MissionInfo.Status? = nil
  fileprivate var _durationType: Ei_MissionInfo.DurationType? = nil
  fileprivate var _type: Ei_MissionInfo.MissionType? = nil
  fileprivate var _resetIndex: UInt32? = nil
  fileprivate var _level: UInt32? = nil
  fileprivate var _durationSeconds: Double? = nil
  fileprivate var _capacity: UInt32? = nil
  fileprivate var _qualityBump: Double? = nil
  fileprivate var _targetArtifact: Ei_ArtifactSpec.Name? = nil
  fileprivate var _secondsRemaining: Double? = nil
  fileprivate var _startTimeDerived: Double? = nil
  fileprivate var _missionLog: String? = nil
  fileprivate var _identifier: String? = nil
}

struct Ei_ArtifactSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: Ei_ArtifactSpec.Name {
    get {return _name ?? .lunarTotem}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var level: Ei_ArtifactSpec.Level {
    get {return _level ?? .inferior}
    set {_level = newValue}
  }
  /// Returns true if `level` has been explicitly set.
  var hasLevel: Bool {return self._level != nil}
  /// Clears the value of `level`. Subsequent reads from it will return its default value.
  mutating func clearLevel() {self._level = nil}

  var rarity: Ei_ArtifactSpec.Rarity {
    get {return _rarity ?? .common}
    set {_rarity = newValue}
  }
  /// Returns true if `rarity` has been explicitly set.
  var hasRarity: Bool {return self._rarity != nil}
  /// Clears the value of `rarity`. Subsequent reads from it will return its default value.
  mutating func clearRarity() {self._rarity = nil}

  var egg: Ei_Egg {
    get {return _egg ?? .edible}
    set {_egg = newValue}
  }
  /// Returns true if `egg` has been explicitly set.
  var hasEgg: Bool {return self._egg != nil}
  /// Clears the value of `egg`. Subsequent reads from it will return its default value.
  mutating func clearEgg() {self._egg = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Name: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case lunarTotem = 0
    case neodymiumMedallion = 3
    case beakOfMidas = 4
    case lightOfEggendil = 5
    case demetersNecklace = 6
    case vialMartianDust = 7
    case ornateGusset = 8
    case theChalice = 9
    case bookOfBasan = 10
    case phoenixFeather = 11
    case tungstenAnkh = 12
    case aurelianBrooch = 21
    case carvedRainstick = 22
    case puzzleCube = 23
    case quantumMetronome = 24
    case shipInABottle = 25
    case tachyonDeflector = 26
    case interstellarCompass = 27
    case dilithiumMonocle = 28
    case titaniumActuator = 29
    case mercurysLens = 30
    case tachyonStone = 1
    case dilithiumStone = 31
    case shellStone = 32
    case lunarStone = 33
    case soulStone = 34
    case prophecyStone = 39
    case quantumStone = 36
    case terraStone = 37
    case lifeStone = 38
    case clarityStone = 40
    case extraterrestrialAluminum = 13
    case ancientTungsten = 14
    case spaceRocks = 15
    case alienWood = 16
    case goldMeteorite = 17
    case tauCetiGeode = 18
    case centaurianSteel = 19
    case eridaniFeather = 20
    case droneParts = 35
    case celestialBronze = 41
    case lalandeHide = 42
    case solarTitanium = 43
    case tachyonStoneFragment = 2
    case dilithiumStoneFragment = 44
    case shellStoneFragment = 45
    case lunarStoneFragment = 46
    case soulStoneFragment = 47
    case prophecyStoneFragment = 48
    case quantumStoneFragment = 49
    case terraStoneFragment = 50
    case lifeStoneFragment = 51
    case clarityStoneFragment = 52
    case unknown = 10000

    init() {
      self = .lunarTotem
    }

  }

  enum Level: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case inferior = 0
    case lesser = 1
    case normal = 2
    case greater = 3
    case superior = 4

    init() {
      self = .inferior
    }

  }

  enum Rarity: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case common = 0
    case rare = 1
    case epic = 2
    case legendary = 3

    init() {
      self = .common
    }

  }

  enum TypeEnum: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case artifact = 0
    case stone = 1
    case ingredient = 2
    case stoneIngredient = 3

    init() {
      self = .artifact
    }

  }

  init() {}

  fileprivate var _name: Ei_ArtifactSpec.Name? = nil
  fileprivate var _level: Ei_ArtifactSpec.Level? = nil
  fileprivate var _rarity: Ei_ArtifactSpec.Rarity? = nil
  fileprivate var _egg: Ei_Egg? = nil
}

struct Ei_CompleteArtifact: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var spec: Ei_ArtifactSpec {
    get {return _spec ?? Ei_ArtifactSpec()}
    set {_spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return self._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {self._spec = nil}

  var stones: [Ei_ArtifactSpec] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _spec: Ei_ArtifactSpec? = nil
}

struct Ei_ArtifactInventoryItem: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemID: UInt64 {
    get {return _itemID ?? 0}
    set {_itemID = newValue}
  }
  /// Returns true if `itemID` has been explicitly set.
  var hasItemID: Bool {return self._itemID != nil}
  /// Clears the value of `itemID`. Subsequent reads from it will return its default value.
  mutating func clearItemID() {self._itemID = nil}

  var artifact: Ei_CompleteArtifact {
    get {return _artifact ?? Ei_CompleteArtifact()}
    set {_artifact = newValue}
  }
  /// Returns true if `artifact` has been explicitly set.
  var hasArtifact: Bool {return self._artifact != nil}
  /// Clears the value of `artifact`. Subsequent reads from it will return its default value.
  mutating func clearArtifact() {self._artifact = nil}

  var quantity: Double {
    get {return _quantity ?? 0}
    set {_quantity = newValue}
  }
  /// Returns true if `quantity` has been explicitly set.
  var hasQuantity: Bool {return self._quantity != nil}
  /// Clears the value of `quantity`. Subsequent reads from it will return its default value.
  mutating func clearQuantity() {self._quantity = nil}

  var serverID: String {
    get {return _serverID ?? String()}
    set {_serverID = newValue}
  }
  /// Returns true if `serverID` has been explicitly set.
  var hasServerID: Bool {return self._serverID != nil}
  /// Clears the value of `serverID`. Subsequent reads from it will return its default value.
  mutating func clearServerID() {self._serverID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _itemID: UInt64? = nil
  fileprivate var _artifact: Ei_CompleteArtifact? = nil
  fileprivate var _quantity: Double? = nil
  fileprivate var _serverID: String? = nil
}

struct Ei_InventorySlot: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var occupied: Bool {
    get {return _occupied ?? false}
    set {_occupied = newValue}
  }
  /// Returns true if `occupied` has been explicitly set.
  var hasOccupied: Bool {return self._occupied != nil}
  /// Clears the value of `occupied`. Subsequent reads from it will return its default value.
  mutating func clearOccupied() {self._occupied = nil}

  var itemID: UInt32 {
    get {return _itemID ?? 0}
    set {_itemID = newValue}
  }
  /// Returns true if `itemID` has been explicitly set.
  var hasItemID: Bool {return self._itemID != nil}
  /// Clears the value of `itemID`. Subsequent reads from it will return its default value.
  mutating func clearItemID() {self._itemID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _occupied: Bool? = nil
  fileprivate var _itemID: UInt32? = nil
}

struct Ei_ArtifactsConfigurationRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var clientVersion: UInt32 {
    get {return _clientVersion ?? 0}
    set {_clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return self._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {self._clientVersion = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _clientVersion: UInt32? = nil
}

struct Ei_ArtifactsConfigurationResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var missionParameters: [Ei_ArtifactsConfigurationResponse.MissionParameters] = []

  var artifactParameters: [Ei_ArtifactsConfigurationResponse.ArtifactParameters] = []

  var craftingLevelInfos: [Ei_ArtifactsConfigurationResponse.CraftingLevelInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct MissionParameters: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var ship: Ei_MissionInfo.Spaceship {
      get {return _ship ?? .chickenOne}
      set {_ship = newValue}
    }
    /// Returns true if `ship` has been explicitly set.
    var hasShip: Bool {return self._ship != nil}
    /// Clears the value of `ship`. Subsequent reads from it will return its default value.
    mutating func clearShip() {self._ship = nil}

    var durations: [Ei_ArtifactsConfigurationResponse.MissionParameters.Duration] = []

    var levelMissionRequirements: [UInt32] = []

    var capacityDeprecated: UInt32 {
      get {return _capacityDeprecated ?? 0}
      set {_capacityDeprecated = newValue}
    }
    /// Returns true if `capacityDeprecated` has been explicitly set.
    var hasCapacityDeprecated: Bool {return self._capacityDeprecated != nil}
    /// Clears the value of `capacityDeprecated`. Subsequent reads from it will return its default value.
    mutating func clearCapacityDeprecated() {self._capacityDeprecated = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    struct Duration: Sendable {
      // SwiftProtobuf.Message conformance is added in an extension below. See the
      // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
      // methods supported on all messages.

      var durationType: Ei_MissionInfo.DurationType {
        get {return _durationType ?? .short}
        set {_durationType = newValue}
      }
      /// Returns true if `durationType` has been explicitly set.
      var hasDurationType: Bool {return self._durationType != nil}
      /// Clears the value of `durationType`. Subsequent reads from it will return its default value.
      mutating func clearDurationType() {self._durationType = nil}

      var seconds: Double {
        get {return _seconds ?? 0}
        set {_seconds = newValue}
      }
      /// Returns true if `seconds` has been explicitly set.
      var hasSeconds: Bool {return self._seconds != nil}
      /// Clears the value of `seconds`. Subsequent reads from it will return its default value.
      mutating func clearSeconds() {self._seconds = nil}

      var quality: Float {
        get {return _quality ?? 0}
        set {_quality = newValue}
      }
      /// Returns true if `quality` has been explicitly set.
      var hasQuality: Bool {return self._quality != nil}
      /// Clears the value of `quality`. Subsequent reads from it will return its default value.
      mutating func clearQuality() {self._quality = nil}

      var minQuality: Float {
        get {return _minQuality ?? 0}
        set {_minQuality = newValue}
      }
      /// Returns true if `minQuality` has been explicitly set.
      var hasMinQuality: Bool {return self._minQuality != nil}
      /// Clears the value of `minQuality`. Subsequent reads from it will return its default value.
      mutating func clearMinQuality() {self._minQuality = nil}

      var maxQuality: Float {
        get {return _maxQuality ?? 0}
        set {_maxQuality = newValue}
      }
      /// Returns true if `maxQuality` has been explicitly set.
      var hasMaxQuality: Bool {return self._maxQuality != nil}
      /// Clears the value of `maxQuality`. Subsequent reads from it will return its default value.
      mutating func clearMaxQuality() {self._maxQuality = nil}

      var capacity: UInt32 {
        get {return _capacity ?? 0}
        set {_capacity = newValue}
      }
      /// Returns true if `capacity` has been explicitly set.
      var hasCapacity: Bool {return self._capacity != nil}
      /// Clears the value of `capacity`. Subsequent reads from it will return its default value.
      mutating func clearCapacity() {self._capacity = nil}

      var levelCapacityBump: UInt32 {
        get {return _levelCapacityBump ?? 0}
        set {_levelCapacityBump = newValue}
      }
      /// Returns true if `levelCapacityBump` has been explicitly set.
      var hasLevelCapacityBump: Bool {return self._levelCapacityBump != nil}
      /// Clears the value of `levelCapacityBump`. Subsequent reads from it will return its default value.
      mutating func clearLevelCapacityBump() {self._levelCapacityBump = nil}

      var levelQualityBump: Float {
        get {return _levelQualityBump ?? 0}
        set {_levelQualityBump = newValue}
      }
      /// Returns true if `levelQualityBump` has been explicitly set.
      var hasLevelQualityBump: Bool {return self._levelQualityBump != nil}
      /// Clears the value of `levelQualityBump`. Subsequent reads from it will return its default value.
      mutating func clearLevelQualityBump() {self._levelQualityBump = nil}

      var unknownFields = SwiftProtobuf.UnknownStorage()

      init() {}

      fileprivate var _durationType: Ei_MissionInfo.DurationType? = nil
      fileprivate var _seconds: Double? = nil
      fileprivate var _quality: Float? = nil
      fileprivate var _minQuality: Float? = nil
      fileprivate var _maxQuality: Float? = nil
      fileprivate var _capacity: UInt32? = nil
      fileprivate var _levelCapacityBump: UInt32? = nil
      fileprivate var _levelQualityBump: Float? = nil
    }

    init() {}

    fileprivate var _ship: Ei_MissionInfo.Spaceship? = nil
    fileprivate var _capacityDeprecated: UInt32? = nil
  }

  struct ArtifactParameters: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var spec: Ei_ArtifactSpec {
      get {return _spec ?? Ei_ArtifactSpec()}
      set {_spec = newValue}
    }
    /// Returns true if `spec` has been explicitly set.
    var hasSpec: Bool {return self._spec != nil}
    /// Clears the value of `spec`. Subsequent reads from it will return its default value.
    mutating func clearSpec() {self._spec = nil}

    var baseQuality: Double {
      get {return _baseQuality ?? 0}
      set {_baseQuality = newValue}
    }
    /// Returns true if `baseQuality` has been explicitly set.
    var hasBaseQuality: Bool {return self._baseQuality != nil}
    /// Clears the value of `baseQuality`. Subsequent reads from it will return its default value.
    mutating func clearBaseQuality() {self._baseQuality = nil}

    var oddsMultiplier: Double {
      get {return _oddsMultiplier ?? 0}
      set {_oddsMultiplier = newValue}
    }
    /// Returns true if `oddsMultiplier` has been explicitly set.
    var hasOddsMultiplier: Bool {return self._oddsMultiplier != nil}
    /// Clears the value of `oddsMultiplier`. Subsequent reads from it will return its default value.
    mutating func clearOddsMultiplier() {self._oddsMultiplier = nil}

    var value: Double {
      get {return _value ?? 0}
      set {_value = newValue}
    }
    /// Returns true if `value` has been explicitly set.
    var hasValue: Bool {return self._value != nil}
    /// Clears the value of `value`. Subsequent reads from it will return its default value.
    mutating func clearValue() {self._value = nil}

    var craftingPrice: Double {
      get {return _craftingPrice ?? 0}
      set {_craftingPrice = newValue}
    }
    /// Returns true if `craftingPrice` has been explicitly set.
    var hasCraftingPrice: Bool {return self._craftingPrice != nil}
    /// Clears the value of `craftingPrice`. Subsequent reads from it will return its default value.
    mutating func clearCraftingPrice() {self._craftingPrice = nil}

    var craftingPriceLow: Double {
      get {return _craftingPriceLow ?? 0}
      set {_craftingPriceLow = newValue}
    }
    /// Returns true if `craftingPriceLow` has been explicitly set.
    var hasCraftingPriceLow: Bool {return self._craftingPriceLow != nil}
    /// Clears the value of `craftingPriceLow`. Subsequent reads from it will return its default value.
    mutating func clearCraftingPriceLow() {self._craftingPriceLow = nil}

    var craftingPriceDomain: UInt32 {
      get {return _craftingPriceDomain ?? 0}
      set {_craftingPriceDomain = newValue}
    }
    /// Returns true if `craftingPriceDomain` has been explicitly set.
    var hasCraftingPriceDomain: Bool {return self._craftingPriceDomain != nil}
    /// Clears the value of `craftingPriceDomain`. Subsequent reads from it will return its default value.
    mutating func clearCraftingPriceDomain() {self._craftingPriceDomain = nil}

    var craftingPriceCurve: Double {
      get {return _craftingPriceCurve ?? 0}
      set {_craftingPriceCurve = newValue}
    }
    /// Returns true if `craftingPriceCurve` has been explicitly set.
    var hasCraftingPriceCurve: Bool {return self._craftingPriceCurve != nil}
    /// Clears the value of `craftingPriceCurve`. Subsequent reads from it will return its default value.
    mutating func clearCraftingPriceCurve() {self._craftingPriceCurve = nil}

    var craftingXp: UInt64 {
      get {return _craftingXp ?? 0}
      set {_craftingXp = newValue}
    }
    /// Returns true if `craftingXp` has been explicitly set.
    var hasCraftingXp: Bool {return self._craftingXp != nil}
    /// Clears the value of `craftingXp`. Subsequent reads from it will return its default value.
    mutating func clearCraftingXp() {self._craftingXp = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _spec: Ei_ArtifactSpec? = nil
    fileprivate var _baseQuality: Double? = nil
    fileprivate var _oddsMultiplier: Double? = nil
    fileprivate var _value: Double? = nil
    fileprivate var _craftingPrice: Double? = nil
    fileprivate var _craftingPriceLow: Double? = nil
    fileprivate var _craftingPriceDomain: UInt32? = nil
    fileprivate var _craftingPriceCurve: Double? = nil
    fileprivate var _craftingXp: UInt64? = nil
  }

  struct CraftingLevelInfo: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var xpRequired: Double {
      get {return _xpRequired ?? 0}
      set {_xpRequired = newValue}
    }
    /// Returns true if `xpRequired` has been explicitly set.
    var hasXpRequired: Bool {return self._xpRequired != nil}
    /// Clears the value of `xpRequired`. Subsequent reads from it will return its default value.
    mutating func clearXpRequired() {self._xpRequired = nil}

    var rarityMult: Float {
      get {return _rarityMult ?? 0}
      set {_rarityMult = newValue}
    }
    /// Returns true if `rarityMult` has been explicitly set.
    var hasRarityMult: Bool {return self._rarityMult != nil}
    /// Clears the value of `rarityMult`. Subsequent reads from it will return its default value.
    mutating func clearRarityMult() {self._rarityMult = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _xpRequired: Double? = nil
    fileprivate var _rarityMult: Float? = nil
  }

  init() {}
}

struct Ei_MissionRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var clientVersion: UInt32 {
    get {return _storage._clientVersion ?? 0}
    set {_uniqueStorage()._clientVersion = newValue}
  }
  /// Returns true if `clientVersion` has been explicitly set.
  var hasClientVersion: Bool {return _storage._clientVersion != nil}
  /// Clears the value of `clientVersion`. Subsequent reads from it will return its default value.
  mutating func clearClientVersion() {_uniqueStorage()._clientVersion = nil}

  var eiUserID: String {
    get {return _storage._eiUserID ?? String()}
    set {_uniqueStorage()._eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return _storage._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {_uniqueStorage()._eiUserID = nil}

  var info: Ei_MissionInfo {
    get {return _storage._info ?? Ei_MissionInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_uniqueStorage()._info = nil}

  var clientInfo: Ei_ArtifactsClientInfo {
    get {return _storage._clientInfo ?? Ei_ArtifactsClientInfo()}
    set {_uniqueStorage()._clientInfo = newValue}
  }
  /// Returns true if `clientInfo` has been explicitly set.
  var hasClientInfo: Bool {return _storage._clientInfo != nil}
  /// Clears the value of `clientInfo`. Subsequent reads from it will return its default value.
  mutating func clearClientInfo() {_uniqueStorage()._clientInfo = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_MissionResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var info: Ei_MissionInfo {
    get {return _info ?? Ei_MissionInfo()}
    set {_info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return self._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {self._info = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _info: Ei_MissionInfo? = nil
}

struct Ei_GetActiveMissionsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var resetIndex: UInt32 {
    get {return _resetIndex ?? 0}
    set {_resetIndex = newValue}
  }
  /// Returns true if `resetIndex` has been explicitly set.
  var hasResetIndex: Bool {return self._resetIndex != nil}
  /// Clears the value of `resetIndex`. Subsequent reads from it will return its default value.
  mutating func clearResetIndex() {self._resetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _resetIndex: UInt32? = nil
}

struct Ei_GetActiveMissionsResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var activeMissions: [Ei_MissionInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
}

struct Ei_CompleteMissionResponse: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _storage._success ?? false}
    set {_uniqueStorage()._success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return _storage._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {_uniqueStorage()._success = nil}

  var info: Ei_MissionInfo {
    get {return _storage._info ?? Ei_MissionInfo()}
    set {_uniqueStorage()._info = newValue}
  }
  /// Returns true if `info` has been explicitly set.
  var hasInfo: Bool {return _storage._info != nil}
  /// Clears the value of `info`. Subsequent reads from it will return its default value.
  mutating func clearInfo() {_uniqueStorage()._info = nil}

  var artifacts: [Ei_CompleteMissionResponse.SecureArtifactSpec] {
    get {return _storage._artifacts}
    set {_uniqueStorage()._artifacts = newValue}
  }

  var otherRewards: [Ei_Reward] {
    get {return _storage._otherRewards}
    set {_uniqueStorage()._otherRewards = newValue}
  }

  var eiUserID: String {
    get {return _storage._eiUserID ?? String()}
    set {_uniqueStorage()._eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return _storage._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {_uniqueStorage()._eiUserID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct SecureArtifactSpec: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var spec: Ei_ArtifactSpec {
      get {return _spec ?? Ei_ArtifactSpec()}
      set {_spec = newValue}
    }
    /// Returns true if `spec` has been explicitly set.
    var hasSpec: Bool {return self._spec != nil}
    /// Clears the value of `spec`. Subsequent reads from it will return its default value.
    mutating func clearSpec() {self._spec = nil}

    var serverID: String {
      get {return _serverID ?? String()}
      set {_serverID = newValue}
    }
    /// Returns true if `serverID` has been explicitly set.
    var hasServerID: Bool {return self._serverID != nil}
    /// Clears the value of `serverID`. Subsequent reads from it will return its default value.
    mutating func clearServerID() {self._serverID = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _spec: Ei_ArtifactSpec? = nil
    fileprivate var _serverID: String? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_CollectContractArtifactRewardsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var contractIdentifier: String {
    get {return _contractIdentifier ?? String()}
    set {_contractIdentifier = newValue}
  }
  /// Returns true if `contractIdentifier` has been explicitly set.
  var hasContractIdentifier: Bool {return self._contractIdentifier != nil}
  /// Clears the value of `contractIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearContractIdentifier() {self._contractIdentifier = nil}

  var league: UInt32 {
    get {return _league ?? 0}
    set {_league = newValue}
  }
  /// Returns true if `league` has been explicitly set.
  var hasLeague: Bool {return self._league != nil}
  /// Clears the value of `league`. Subsequent reads from it will return its default value.
  mutating func clearLeague() {self._league = nil}

  var grade: Ei_Contract.PlayerGrade {
    get {return _grade ?? .gradeUnset}
    set {_grade = newValue}
  }
  /// Returns true if `grade` has been explicitly set.
  var hasGrade: Bool {return self._grade != nil}
  /// Clears the value of `grade`. Subsequent reads from it will return its default value.
  mutating func clearGrade() {self._grade = nil}

  var goalIndex: UInt32 {
    get {return _goalIndex ?? 0}
    set {_goalIndex = newValue}
  }
  /// Returns true if `goalIndex` has been explicitly set.
  var hasGoalIndex: Bool {return self._goalIndex != nil}
  /// Clears the value of `goalIndex`. Subsequent reads from it will return its default value.
  mutating func clearGoalIndex() {self._goalIndex = nil}

  var bestShip: Ei_MissionInfo.Spaceship {
    get {return _bestShip ?? .chickenOne}
    set {_bestShip = newValue}
  }
  /// Returns true if `bestShip` has been explicitly set.
  var hasBestShip: Bool {return self._bestShip != nil}
  /// Clears the value of `bestShip`. Subsequent reads from it will return its default value.
  mutating func clearBestShip() {self._bestShip = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _contractIdentifier: String? = nil
  fileprivate var _league: UInt32? = nil
  fileprivate var _grade: Ei_Contract.PlayerGrade? = nil
  fileprivate var _goalIndex: UInt32? = nil
  fileprivate var _bestShip: Ei_MissionInfo.Spaceship? = nil
}

struct Ei_CollectSeasonArtifactRewardsRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var seasonIdentifier: String {
    get {return _seasonIdentifier ?? String()}
    set {_seasonIdentifier = newValue}
  }
  /// Returns true if `seasonIdentifier` has been explicitly set.
  var hasSeasonIdentifier: Bool {return self._seasonIdentifier != nil}
  /// Clears the value of `seasonIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearSeasonIdentifier() {self._seasonIdentifier = nil}

  var cxp: Double {
    get {return _cxp ?? 0}
    set {_cxp = newValue}
  }
  /// Returns true if `cxp` has been explicitly set.
  var hasCxp: Bool {return self._cxp != nil}
  /// Clears the value of `cxp`. Subsequent reads from it will return its default value.
  mutating func clearCxp() {self._cxp = nil}

  var bestShip: Ei_MissionInfo.Spaceship {
    get {return _bestShip ?? .chickenOne}
    set {_bestShip = newValue}
  }
  /// Returns true if `bestShip` has been explicitly set.
  var hasBestShip: Bool {return self._bestShip != nil}
  /// Clears the value of `bestShip`. Subsequent reads from it will return its default value.
  mutating func clearBestShip() {self._bestShip = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _seasonIdentifier: String? = nil
  fileprivate var _cxp: Double? = nil
  fileprivate var _bestShip: Ei_MissionInfo.Spaceship? = nil
}

struct Ei_CraftArtifactRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var eiUserID: String {
    get {return _storage._eiUserID ?? String()}
    set {_uniqueStorage()._eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return _storage._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {_uniqueStorage()._eiUserID = nil}

  var spec: Ei_ArtifactSpec {
    get {return _storage._spec ?? Ei_ArtifactSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  var itemID: UInt64 {
    get {return _storage._itemID ?? 0}
    set {_uniqueStorage()._itemID = newValue}
  }
  /// Returns true if `itemID` has been explicitly set.
  var hasItemID: Bool {return _storage._itemID != nil}
  /// Clears the value of `itemID`. Subsequent reads from it will return its default value.
  mutating func clearItemID() {_uniqueStorage()._itemID = nil}

  var goldPricePaid: Double {
    get {return _storage._goldPricePaid ?? 0}
    set {_uniqueStorage()._goldPricePaid = newValue}
  }
  /// Returns true if `goldPricePaid` has been explicitly set.
  var hasGoldPricePaid: Bool {return _storage._goldPricePaid != nil}
  /// Clears the value of `goldPricePaid`. Subsequent reads from it will return its default value.
  mutating func clearGoldPricePaid() {_uniqueStorage()._goldPricePaid = nil}

  var craftingCount: UInt32 {
    get {return _storage._craftingCount ?? 0}
    set {_uniqueStorage()._craftingCount = newValue}
  }
  /// Returns true if `craftingCount` has been explicitly set.
  var hasCraftingCount: Bool {return _storage._craftingCount != nil}
  /// Clears the value of `craftingCount`. Subsequent reads from it will return its default value.
  mutating func clearCraftingCount() {_uniqueStorage()._craftingCount = nil}

  var craftingXp: Double {
    get {return _storage._craftingXp ?? 0}
    set {_uniqueStorage()._craftingXp = newValue}
  }
  /// Returns true if `craftingXp` has been explicitly set.
  var hasCraftingXp: Bool {return _storage._craftingXp != nil}
  /// Clears the value of `craftingXp`. Subsequent reads from it will return its default value.
  mutating func clearCraftingXp() {_uniqueStorage()._craftingXp = nil}

  var ingredients: [Ei_ArtifactInventoryItem] {
    get {return _storage._ingredients}
    set {_uniqueStorage()._ingredients = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_CraftArtifactResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var itemID: UInt64 {
    get {return _itemID ?? 0}
    set {_itemID = newValue}
  }
  /// Returns true if `itemID` has been explicitly set.
  var hasItemID: Bool {return self._itemID != nil}
  /// Clears the value of `itemID`. Subsequent reads from it will return its default value.
  mutating func clearItemID() {self._itemID = nil}

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var rarityAchieved: Ei_ArtifactSpec.Rarity {
    get {return _rarityAchieved ?? .common}
    set {_rarityAchieved = newValue}
  }
  /// Returns true if `rarityAchieved` has been explicitly set.
  var hasRarityAchieved: Bool {return self._rarityAchieved != nil}
  /// Clears the value of `rarityAchieved`. Subsequent reads from it will return its default value.
  mutating func clearRarityAchieved() {self._rarityAchieved = nil}

  var serverID: String {
    get {return _serverID ?? String()}
    set {_serverID = newValue}
  }
  /// Returns true if `serverID` has been explicitly set.
  var hasServerID: Bool {return self._serverID != nil}
  /// Clears the value of `serverID`. Subsequent reads from it will return its default value.
  mutating func clearServerID() {self._serverID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _itemID: UInt64? = nil
  fileprivate var _eiUserID: String? = nil
  fileprivate var _rarityAchieved: Ei_ArtifactSpec.Rarity? = nil
  fileprivate var _serverID: String? = nil
}

struct Ei_ConsumeArtifactRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var eiUserID: String {
    get {return _storage._eiUserID ?? String()}
    set {_uniqueStorage()._eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return _storage._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {_uniqueStorage()._eiUserID = nil}

  var spec: Ei_ArtifactSpec {
    get {return _storage._spec ?? Ei_ArtifactSpec()}
    set {_uniqueStorage()._spec = newValue}
  }
  /// Returns true if `spec` has been explicitly set.
  var hasSpec: Bool {return _storage._spec != nil}
  /// Clears the value of `spec`. Subsequent reads from it will return its default value.
  mutating func clearSpec() {_uniqueStorage()._spec = nil}

  var artifactServerID: String {
    get {return _storage._artifactServerID ?? String()}
    set {_uniqueStorage()._artifactServerID = newValue}
  }
  /// Returns true if `artifactServerID` has been explicitly set.
  var hasArtifactServerID: Bool {return _storage._artifactServerID != nil}
  /// Clears the value of `artifactServerID`. Subsequent reads from it will return its default value.
  mutating func clearArtifactServerID() {_uniqueStorage()._artifactServerID = nil}

  var originalItemID: UInt64 {
    get {return _storage._originalItemID ?? 0}
    set {_uniqueStorage()._originalItemID = newValue}
  }
  /// Returns true if `originalItemID` has been explicitly set.
  var hasOriginalItemID: Bool {return _storage._originalItemID != nil}
  /// Clears the value of `originalItemID`. Subsequent reads from it will return its default value.
  mutating func clearOriginalItemID() {_uniqueStorage()._originalItemID = nil}

  var additionalServerIds: [String] {
    get {return _storage._additionalServerIds}
    set {_uniqueStorage()._additionalServerIds = newValue}
  }

  var additionalItemIds: [UInt64] {
    get {return _storage._additionalItemIds}
    set {_uniqueStorage()._additionalItemIds = newValue}
  }

  var quantity: UInt32 {
    get {return _storage._quantity ?? 0}
    set {_uniqueStorage()._quantity = newValue}
  }
  /// Returns true if `quantity` has been explicitly set.
  var hasQuantity: Bool {return _storage._quantity != nil}
  /// Clears the value of `quantity`. Subsequent reads from it will return its default value.
  mutating func clearQuantity() {_uniqueStorage()._quantity = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ConsumeArtifactResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var originalItemID: UInt64 {
    get {return _originalItemID ?? 0}
    set {_originalItemID = newValue}
  }
  /// Returns true if `originalItemID` has been explicitly set.
  var hasOriginalItemID: Bool {return self._originalItemID != nil}
  /// Clears the value of `originalItemID`. Subsequent reads from it will return its default value.
  mutating func clearOriginalItemID() {self._originalItemID = nil}

  var additionalItemIds: [UInt64] = []

  var byproducts: [Ei_ArtifactSpec] = []

  var otherRewards: [Ei_Reward] = []

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _originalItemID: UInt64? = nil
  fileprivate var _eiUserID: String? = nil
}

struct Ei_AuthenticateArtifactResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var originalItemID: UInt64 {
    get {return _originalItemID ?? 0}
    set {_originalItemID = newValue}
  }
  /// Returns true if `originalItemID` has been explicitly set.
  var hasOriginalItemID: Bool {return self._originalItemID != nil}
  /// Clears the value of `originalItemID`. Subsequent reads from it will return its default value.
  mutating func clearOriginalItemID() {self._originalItemID = nil}

  var demote: Bool {
    get {return _demote ?? false}
    set {_demote = newValue}
  }
  /// Returns true if `demote` has been explicitly set.
  var hasDemote: Bool {return self._demote != nil}
  /// Clears the value of `demote`. Subsequent reads from it will return its default value.
  mutating func clearDemote() {self._demote = nil}

  var delete: Bool {
    get {return _delete ?? false}
    set {_delete = newValue}
  }
  /// Returns true if `delete` has been explicitly set.
  var hasDelete: Bool {return self._delete != nil}
  /// Clears the value of `delete`. Subsequent reads from it will return its default value.
  mutating func clearDelete() {self._delete = nil}

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _originalItemID: UInt64? = nil
  fileprivate var _demote: Bool? = nil
  fileprivate var _delete: Bool? = nil
  fileprivate var _eiUserID: String? = nil
}

struct Ei_SetArtifactRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var artifact: Ei_ArtifactInventoryItem {
    get {return _storage._artifact ?? Ei_ArtifactInventoryItem()}
    set {_uniqueStorage()._artifact = newValue}
  }
  /// Returns true if `artifact` has been explicitly set.
  var hasArtifact: Bool {return _storage._artifact != nil}
  /// Clears the value of `artifact`. Subsequent reads from it will return its default value.
  mutating func clearArtifact() {_uniqueStorage()._artifact = nil}

  var stones: [Ei_ArtifactSpec] {
    get {return _storage._stones}
    set {_uniqueStorage()._stones = newValue}
  }

  var goldPricePaid: Double {
    get {return _storage._goldPricePaid ?? 0}
    set {_uniqueStorage()._goldPricePaid = newValue}
  }
  /// Returns true if `goldPricePaid` has been explicitly set.
  var hasGoldPricePaid: Bool {return _storage._goldPricePaid != nil}
  /// Clears the value of `goldPricePaid`. Subsequent reads from it will return its default value.
  mutating func clearGoldPricePaid() {_uniqueStorage()._goldPricePaid = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_SetArtifactResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var originalItemID: UInt64 {
    get {return _originalItemID ?? 0}
    set {_originalItemID = newValue}
  }
  /// Returns true if `originalItemID` has been explicitly set.
  var hasOriginalItemID: Bool {return self._originalItemID != nil}
  /// Clears the value of `originalItemID`. Subsequent reads from it will return its default value.
  mutating func clearOriginalItemID() {self._originalItemID = nil}

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _originalItemID: UInt64? = nil
  fileprivate var _eiUserID: String? = nil
}

struct Ei_ActiveArtifactSlot: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var occupied: Bool {
    get {return _occupied ?? false}
    set {_occupied = newValue}
  }
  /// Returns true if `occupied` has been explicitly set.
  var hasOccupied: Bool {return self._occupied != nil}
  /// Clears the value of `occupied`. Subsequent reads from it will return its default value.
  mutating func clearOccupied() {self._occupied = nil}

  var itemID: UInt64 {
    get {return _itemID ?? 0}
    set {_itemID = newValue}
  }
  /// Returns true if `itemID` has been explicitly set.
  var hasItemID: Bool {return self._itemID != nil}
  /// Clears the value of `itemID`. Subsequent reads from it will return its default value.
  mutating func clearItemID() {self._itemID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _occupied: Bool? = nil
  fileprivate var _itemID: UInt64? = nil
}

struct Ei_ArtifactsDB: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var inventoryItems: [Ei_ArtifactInventoryItem] {
    get {return _storage._inventoryItems}
    set {_uniqueStorage()._inventoryItems = newValue}
  }

  var itemSequence: UInt64 {
    get {return _storage._itemSequence ?? 0}
    set {_uniqueStorage()._itemSequence = newValue}
  }
  /// Returns true if `itemSequence` has been explicitly set.
  var hasItemSequence: Bool {return _storage._itemSequence != nil}
  /// Clears the value of `itemSequence`. Subsequent reads from it will return its default value.
  mutating func clearItemSequence() {_uniqueStorage()._itemSequence = nil}

  var inventorySlotsNotUsed: [Ei_InventorySlot] {
    get {return _storage._inventorySlotsNotUsed}
    set {_uniqueStorage()._inventorySlotsNotUsed = newValue}
  }

  var activeArtifactsDeprecated: [Ei_ActiveArtifactSlot] {
    get {return _storage._activeArtifactsDeprecated}
    set {_uniqueStorage()._activeArtifactsDeprecated = newValue}
  }

  var activeArtifactSets: [Ei_ArtifactsDB.ActiveArtifactSet] {
    get {return _storage._activeArtifactSets}
    set {_uniqueStorage()._activeArtifactSets = newValue}
  }

  var savedArtifactSets: [Ei_ArtifactsDB.ActiveArtifactSet] {
    get {return _storage._savedArtifactSets}
    set {_uniqueStorage()._savedArtifactSets = newValue}
  }

  var artifactStatus: [Ei_ArtifactsDB.CraftableArtifact] {
    get {return _storage._artifactStatus}
    set {_uniqueStorage()._artifactStatus = newValue}
  }

  var fuelingMission: Ei_MissionInfo {
    get {return _storage._fuelingMission ?? Ei_MissionInfo()}
    set {_uniqueStorage()._fuelingMission = newValue}
  }
  /// Returns true if `fuelingMission` has been explicitly set.
  var hasFuelingMission: Bool {return _storage._fuelingMission != nil}
  /// Clears the value of `fuelingMission`. Subsequent reads from it will return its default value.
  mutating func clearFuelingMission() {_uniqueStorage()._fuelingMission = nil}

  var missionInfos: [Ei_MissionInfo] {
    get {return _storage._missionInfos}
    set {_uniqueStorage()._missionInfos = newValue}
  }

  var missionArchive: [Ei_MissionInfo] {
    get {return _storage._missionArchive}
    set {_uniqueStorage()._missionArchive = newValue}
  }

  var virtueAfxDb: Ei_ArtifactsDB.VirtueDB {
    get {return _storage._virtueAfxDb ?? Ei_ArtifactsDB.VirtueDB()}
    set {_uniqueStorage()._virtueAfxDb = newValue}
  }
  /// Returns true if `virtueAfxDb` has been explicitly set.
  var hasVirtueAfxDb: Bool {return _storage._virtueAfxDb != nil}
  /// Clears the value of `virtueAfxDb`. Subsequent reads from it will return its default value.
  mutating func clearVirtueAfxDb() {_uniqueStorage()._virtueAfxDb = nil}

  var discoveredArtifactsDeprecated: [Ei_ArtifactSpec] {
    get {return _storage._discoveredArtifactsDeprecated}
    set {_uniqueStorage()._discoveredArtifactsDeprecated = newValue}
  }

  var craftableArtifactsDeprecated: [Ei_ArtifactsDB.CraftableArtifact] {
    get {return _storage._craftableArtifactsDeprecated}
    set {_uniqueStorage()._craftableArtifactsDeprecated = newValue}
  }

  var craftingCountsDeprecated: [Ei_ArtifactsDB.CraftableArtifact] {
    get {return _storage._craftingCountsDeprecated}
    set {_uniqueStorage()._craftingCountsDeprecated = newValue}
  }

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct ActiveArtifactSet: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var slots: [Ei_ActiveArtifactSlot] = []

    var uid: UInt32 {
      get {return _uid ?? 0}
      set {_uid = newValue}
    }
    /// Returns true if `uid` has been explicitly set.
    var hasUid: Bool {return self._uid != nil}
    /// Clears the value of `uid`. Subsequent reads from it will return its default value.
    mutating func clearUid() {self._uid = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _uid: UInt32? = nil
  }

  struct CraftableArtifact: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var spec: Ei_ArtifactSpec {
      get {return _spec ?? Ei_ArtifactSpec()}
      set {_spec = newValue}
    }
    /// Returns true if `spec` has been explicitly set.
    var hasSpec: Bool {return self._spec != nil}
    /// Clears the value of `spec`. Subsequent reads from it will return its default value.
    mutating func clearSpec() {self._spec = nil}

    var discovered: Bool {
      get {return _discovered ?? false}
      set {_discovered = newValue}
    }
    /// Returns true if `discovered` has been explicitly set.
    var hasDiscovered: Bool {return self._discovered != nil}
    /// Clears the value of `discovered`. Subsequent reads from it will return its default value.
    mutating func clearDiscovered() {self._discovered = nil}

    var craftable: Bool {
      get {return _craftable ?? false}
      set {_craftable = newValue}
    }
    /// Returns true if `craftable` has been explicitly set.
    var hasCraftable: Bool {return self._craftable != nil}
    /// Clears the value of `craftable`. Subsequent reads from it will return its default value.
    mutating func clearCraftable() {self._craftable = nil}

    var recipeDiscovered: Bool {
      get {return _recipeDiscovered ?? false}
      set {_recipeDiscovered = newValue}
    }
    /// Returns true if `recipeDiscovered` has been explicitly set.
    var hasRecipeDiscovered: Bool {return self._recipeDiscovered != nil}
    /// Clears the value of `recipeDiscovered`. Subsequent reads from it will return its default value.
    mutating func clearRecipeDiscovered() {self._recipeDiscovered = nil}

    var seen: Bool {
      get {return _seen ?? false}
      set {_seen = newValue}
    }
    /// Returns true if `seen` has been explicitly set.
    var hasSeen: Bool {return self._seen != nil}
    /// Clears the value of `seen`. Subsequent reads from it will return its default value.
    mutating func clearSeen() {self._seen = nil}

    var count: UInt32 {
      get {return _count ?? 0}
      set {_count = newValue}
    }
    /// Returns true if `count` has been explicitly set.
    var hasCount: Bool {return self._count != nil}
    /// Clears the value of `count`. Subsequent reads from it will return its default value.
    mutating func clearCount() {self._count = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _spec: Ei_ArtifactSpec? = nil
    fileprivate var _discovered: Bool? = nil
    fileprivate var _craftable: Bool? = nil
    fileprivate var _recipeDiscovered: Bool? = nil
    fileprivate var _seen: Bool? = nil
    fileprivate var _count: UInt32? = nil
  }

  struct VirtueDB: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var inventoryItems: [Ei_ArtifactInventoryItem] {
      get {return _storage._inventoryItems}
      set {_uniqueStorage()._inventoryItems = newValue}
    }

    var artifactStatus: [Ei_ArtifactsDB.CraftableArtifact] {
      get {return _storage._artifactStatus}
      set {_uniqueStorage()._artifactStatus = newValue}
    }

    var fuelingMission: Ei_MissionInfo {
      get {return _storage._fuelingMission ?? Ei_MissionInfo()}
      set {_uniqueStorage()._fuelingMission = newValue}
    }
    /// Returns true if `fuelingMission` has been explicitly set.
    var hasFuelingMission: Bool {return _storage._fuelingMission != nil}
    /// Clears the value of `fuelingMission`. Subsequent reads from it will return its default value.
    mutating func clearFuelingMission() {_uniqueStorage()._fuelingMission = nil}

    var activeArtifacts: Ei_ArtifactsDB.ActiveArtifactSet {
      get {return _storage._activeArtifacts ?? Ei_ArtifactsDB.ActiveArtifactSet()}
      set {_uniqueStorage()._activeArtifacts = newValue}
    }
    /// Returns true if `activeArtifacts` has been explicitly set.
    var hasActiveArtifacts: Bool {return _storage._activeArtifacts != nil}
    /// Clears the value of `activeArtifacts`. Subsequent reads from it will return its default value.
    mutating func clearActiveArtifacts() {_uniqueStorage()._activeArtifacts = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_AuthenticatedMessage: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var message: Data {
    get {return _message ?? Data()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var version: UInt32 {
    get {return _version ?? 0}
    set {_version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return self._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {self._version = nil}

  var code: String {
    get {return _code ?? String()}
    set {_code = newValue}
  }
  /// Returns true if `code` has been explicitly set.
  var hasCode: Bool {return self._code != nil}
  /// Clears the value of `code`. Subsequent reads from it will return its default value.
  mutating func clearCode() {self._code = nil}

  var compressed: Bool {
    get {return _compressed ?? false}
    set {_compressed = newValue}
  }
  /// Returns true if `compressed` has been explicitly set.
  var hasCompressed: Bool {return self._compressed != nil}
  /// Clears the value of `compressed`. Subsequent reads from it will return its default value.
  mutating func clearCompressed() {self._compressed = nil}

  var originalSize: UInt32 {
    get {return _originalSize ?? 0}
    set {_originalSize = newValue}
  }
  /// Returns true if `originalSize` has been explicitly set.
  var hasOriginalSize: Bool {return self._originalSize != nil}
  /// Clears the value of `originalSize`. Subsequent reads from it will return its default value.
  mutating func clearOriginalSize() {self._originalSize = nil}

  var userID: String {
    get {return _userID ?? String()}
    set {_userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return self._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {self._userID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _message: Data? = nil
  fileprivate var _version: UInt32? = nil
  fileprivate var _code: String? = nil
  fileprivate var _compressed: Bool? = nil
  fileprivate var _originalSize: UInt32? = nil
  fileprivate var _userID: String? = nil
}

struct Ei_LogCompleteMissionPayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var req: Ei_MissionRequest {
    get {return _req ?? Ei_MissionRequest()}
    set {_req = newValue}
  }
  /// Returns true if `req` has been explicitly set.
  var hasReq: Bool {return self._req != nil}
  /// Clears the value of `req`. Subsequent reads from it will return its default value.
  mutating func clearReq() {self._req = nil}

  var res: Ei_CompleteMissionResponse {
    get {return _res ?? Ei_CompleteMissionResponse()}
    set {_res = newValue}
  }
  /// Returns true if `res` has been explicitly set.
  var hasRes: Bool {return self._res != nil}
  /// Clears the value of `res`. Subsequent reads from it will return its default value.
  mutating func clearRes() {self._res = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _req: Ei_MissionRequest? = nil
  fileprivate var _res: Ei_CompleteMissionResponse? = nil
}

struct Ei_LogCraftArtifactPayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var req: Ei_CraftArtifactRequest {
    get {return _req ?? Ei_CraftArtifactRequest()}
    set {_req = newValue}
  }
  /// Returns true if `req` has been explicitly set.
  var hasReq: Bool {return self._req != nil}
  /// Clears the value of `req`. Subsequent reads from it will return its default value.
  mutating func clearReq() {self._req = nil}

  var res: Ei_CraftArtifactResponse {
    get {return _res ?? Ei_CraftArtifactResponse()}
    set {_res = newValue}
  }
  /// Returns true if `res` has been explicitly set.
  var hasRes: Bool {return self._res != nil}
  /// Clears the value of `res`. Subsequent reads from it will return its default value.
  mutating func clearRes() {self._res = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _req: Ei_CraftArtifactRequest? = nil
  fileprivate var _res: Ei_CraftArtifactResponse? = nil
}

struct Ei_LogConsumeArtifactPayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var req: Ei_ConsumeArtifactRequest {
    get {return _req ?? Ei_ConsumeArtifactRequest()}
    set {_req = newValue}
  }
  /// Returns true if `req` has been explicitly set.
  var hasReq: Bool {return self._req != nil}
  /// Clears the value of `req`. Subsequent reads from it will return its default value.
  mutating func clearReq() {self._req = nil}

  var res: Ei_ConsumeArtifactResponse {
    get {return _res ?? Ei_ConsumeArtifactResponse()}
    set {_res = newValue}
  }
  /// Returns true if `res` has been explicitly set.
  var hasRes: Bool {return self._res != nil}
  /// Clears the value of `res`. Subsequent reads from it will return its default value.
  mutating func clearRes() {self._res = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _req: Ei_ConsumeArtifactRequest? = nil
  fileprivate var _res: Ei_ConsumeArtifactResponse? = nil
}

struct Ei_LogSetArtifactPayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var req: Ei_SetArtifactRequest {
    get {return _req ?? Ei_SetArtifactRequest()}
    set {_req = newValue}
  }
  /// Returns true if `req` has been explicitly set.
  var hasReq: Bool {return self._req != nil}
  /// Clears the value of `req`. Subsequent reads from it will return its default value.
  mutating func clearReq() {self._req = nil}

  var res: Ei_SetArtifactResponse {
    get {return _res ?? Ei_SetArtifactResponse()}
    set {_res = newValue}
  }
  /// Returns true if `res` has been explicitly set.
  var hasRes: Bool {return self._res != nil}
  /// Clears the value of `res`. Subsequent reads from it will return its default value.
  mutating func clearRes() {self._res = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _req: Ei_SetArtifactRequest? = nil
  fileprivate var _res: Ei_SetArtifactResponse? = nil
}

struct Ei_AccountTransferPayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var fromID: String {
    get {return _fromID ?? String()}
    set {_fromID = newValue}
  }
  /// Returns true if `fromID` has been explicitly set.
  var hasFromID: Bool {return self._fromID != nil}
  /// Clears the value of `fromID`. Subsequent reads from it will return its default value.
  mutating func clearFromID() {self._fromID = nil}

  var toEiUserID: String {
    get {return _toEiUserID ?? String()}
    set {_toEiUserID = newValue}
  }
  /// Returns true if `toEiUserID` has been explicitly set.
  var hasToEiUserID: Bool {return self._toEiUserID != nil}
  /// Clears the value of `toEiUserID`. Subsequent reads from it will return its default value.
  mutating func clearToEiUserID() {self._toEiUserID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _fromID: String? = nil
  fileprivate var _toEiUserID: String? = nil
}

struct Ei_SaveBackupResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var success: Bool {
    get {return _success ?? false}
    set {_success = newValue}
  }
  /// Returns true if `success` has been explicitly set.
  var hasSuccess: Bool {return self._success != nil}
  /// Clears the value of `success`. Subsequent reads from it will return its default value.
  mutating func clearSuccess() {self._success = nil}

  var errorCode: UInt32 {
    get {return _errorCode ?? 0}
    set {_errorCode = newValue}
  }
  /// Returns true if `errorCode` has been explicitly set.
  var hasErrorCode: Bool {return self._errorCode != nil}
  /// Clears the value of `errorCode`. Subsequent reads from it will return its default value.
  mutating func clearErrorCode() {self._errorCode = nil}

  var message: String {
    get {return _message ?? String()}
    set {_message = newValue}
  }
  /// Returns true if `message` has been explicitly set.
  var hasMessage: Bool {return self._message != nil}
  /// Clears the value of `message`. Subsequent reads from it will return its default value.
  mutating func clearMessage() {self._message = nil}

  var existingBackup: Ei_Backup {
    get {return _existingBackup ?? Ei_Backup()}
    set {_existingBackup = newValue}
  }
  /// Returns true if `existingBackup` has been explicitly set.
  var hasExistingBackup: Bool {return self._existingBackup != nil}
  /// Clears the value of `existingBackup`. Subsequent reads from it will return its default value.
  mutating func clearExistingBackup() {self._existingBackup = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ErrorCodes: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case noError = 0
    case userNotFound = 1
    case couldNotOverwrite = 2
    case backupOffered = 3
    case badUserID = 4

    init() {
      self = .noError
    }

  }

  init() {}

  fileprivate var _success: Bool? = nil
  fileprivate var _errorCode: UInt32? = nil
  fileprivate var _message: String? = nil
  fileprivate var _existingBackup: Ei_Backup? = nil
}

struct Ei_CleanAccountRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eiUserIDToKeep: String {
    get {return _eiUserIDToKeep ?? String()}
    set {_eiUserIDToKeep = newValue}
  }
  /// Returns true if `eiUserIDToKeep` has been explicitly set.
  var hasEiUserIDToKeep: Bool {return self._eiUserIDToKeep != nil}
  /// Clears the value of `eiUserIDToKeep`. Subsequent reads from it will return its default value.
  mutating func clearEiUserIDToKeep() {self._eiUserIDToKeep = nil}

  var gameServicesID: String {
    get {return _gameServicesID ?? String()}
    set {_gameServicesID = newValue}
  }
  /// Returns true if `gameServicesID` has been explicitly set.
  var hasGameServicesID: Bool {return self._gameServicesID != nil}
  /// Clears the value of `gameServicesID`. Subsequent reads from it will return its default value.
  mutating func clearGameServicesID() {self._gameServicesID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _eiUserIDToKeep: String? = nil
  fileprivate var _gameServicesID: String? = nil
}

struct Ei_ReturnEDTPayload: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var eiUserID: String {
    get {return _eiUserID ?? String()}
    set {_eiUserID = newValue}
  }
  /// Returns true if `eiUserID` has been explicitly set.
  var hasEiUserID: Bool {return self._eiUserID != nil}
  /// Clears the value of `eiUserID`. Subsequent reads from it will return its default value.
  mutating func clearEiUserID() {self._eiUserID = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _eiUserID: String? = nil
}

struct Ei_DLCItem: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var directory: String {
    get {return _directory ?? String()}
    set {_directory = newValue}
  }
  /// Returns true if `directory` has been explicitly set.
  var hasDirectory: Bool {return self._directory != nil}
  /// Clears the value of `directory`. Subsequent reads from it will return its default value.
  mutating func clearDirectory() {self._directory = nil}

  var ext: String {
    get {return _ext ?? String()}
    set {_ext = newValue}
  }
  /// Returns true if `ext` has been explicitly set.
  var hasExt: Bool {return self._ext != nil}
  /// Clears the value of `ext`. Subsequent reads from it will return its default value.
  mutating func clearExt() {self._ext = nil}

  var compressed: Bool {
    get {return _compressed ?? false}
    set {_compressed = newValue}
  }
  /// Returns true if `compressed` has been explicitly set.
  var hasCompressed: Bool {return self._compressed != nil}
  /// Clears the value of `compressed`. Subsequent reads from it will return its default value.
  mutating func clearCompressed() {self._compressed = nil}

  var originalSize: UInt64 {
    get {return _originalSize ?? 0}
    set {_originalSize = newValue}
  }
  /// Returns true if `originalSize` has been explicitly set.
  var hasOriginalSize: Bool {return self._originalSize != nil}
  /// Clears the value of `originalSize`. Subsequent reads from it will return its default value.
  mutating func clearOriginalSize() {self._originalSize = nil}

  var url: String {
    get {return _url ?? String()}
    set {_url = newValue}
  }
  /// Returns true if `url` has been explicitly set.
  var hasURL: Bool {return self._url != nil}
  /// Clears the value of `url`. Subsequent reads from it will return its default value.
  mutating func clearURL() {self._url = nil}

  var checksum: String {
    get {return _checksum ?? String()}
    set {_checksum = newValue}
  }
  /// Returns true if `checksum` has been explicitly set.
  var hasChecksum: Bool {return self._checksum != nil}
  /// Clears the value of `checksum`. Subsequent reads from it will return its default value.
  mutating func clearChecksum() {self._checksum = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _name: String? = nil
  fileprivate var _directory: String? = nil
  fileprivate var _ext: String? = nil
  fileprivate var _compressed: Bool? = nil
  fileprivate var _originalSize: UInt64? = nil
  fileprivate var _url: String? = nil
  fileprivate var _checksum: String? = nil
}

struct Ei_ShellSpec: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _storage._identifier ?? String()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  var primaryPiece: Ei_ShellSpec.ShellPiece {
    get {return _storage._primaryPiece ?? Ei_ShellSpec.ShellPiece()}
    set {_uniqueStorage()._primaryPiece = newValue}
  }
  /// Returns true if `primaryPiece` has been explicitly set.
  var hasPrimaryPiece: Bool {return _storage._primaryPiece != nil}
  /// Clears the value of `primaryPiece`. Subsequent reads from it will return its default value.
  mutating func clearPrimaryPiece() {_uniqueStorage()._primaryPiece = nil}

  var pieces: [Ei_ShellSpec.ShellPiece] {
    get {return _storage._pieces}
    set {_uniqueStorage()._pieces = newValue}
  }

  var altAssets: [Ei_DLCItem] {
    get {return _storage._altAssets}
    set {_uniqueStorage()._altAssets = newValue}
  }

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var setIdentifier: String {
    get {return _storage._setIdentifier ?? String()}
    set {_uniqueStorage()._setIdentifier = newValue}
  }
  /// Returns true if `setIdentifier` has been explicitly set.
  var hasSetIdentifier: Bool {return _storage._setIdentifier != nil}
  /// Clears the value of `setIdentifier`. Subsequent reads from it will return its default value.
  mutating func clearSetIdentifier() {_uniqueStorage()._setIdentifier = nil}

  var modifiedGeometry: Bool {
    get {return _storage._modifiedGeometry ?? false}
    set {_uniqueStorage()._modifiedGeometry = newValue}
  }
  /// Returns true if `modifiedGeometry` has been explicitly set.
  var hasModifiedGeometry: Bool {return _storage._modifiedGeometry != nil}
  /// Clears the value of `modifiedGeometry`. Subsequent reads from it will return its default value.
  mutating func clearModifiedGeometry() {_uniqueStorage()._modifiedGeometry = nil}

  var price: UInt32 {
    get {return _storage._price ?? 0}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_uniqueStorage()._price = nil}

  var requiredEop: UInt32 {
    get {return _storage._requiredEop ?? 0}
    set {_uniqueStorage()._requiredEop = newValue}
  }
  /// Returns true if `requiredEop` has been explicitly set.
  var hasRequiredEop: Bool {return _storage._requiredEop != nil}
  /// Clears the value of `requiredEop`. Subsequent reads from it will return its default value.
  mutating func clearRequiredEop() {_uniqueStorage()._requiredEop = nil}

  var requiredSoulEggs: Double {
    get {return _storage._requiredSoulEggs ?? 0}
    set {_uniqueStorage()._requiredSoulEggs = newValue}
  }
  /// Returns true if `requiredSoulEggs` has been explicitly set.
  var hasRequiredSoulEggs: Bool {return _storage._requiredSoulEggs != nil}
  /// Clears the value of `requiredSoulEggs`. Subsequent reads from it will return its default value.
  mutating func clearRequiredSoulEggs() {_uniqueStorage()._requiredSoulEggs = nil}

  var requiredParentShell: String {
    get {return _storage._requiredParentShell ?? String()}
    set {_uniqueStorage()._requiredParentShell = newValue}
  }
  /// Returns true if `requiredParentShell` has been explicitly set.
  var hasRequiredParentShell: Bool {return _storage._requiredParentShell != nil}
  /// Clears the value of `requiredParentShell`. Subsequent reads from it will return its default value.
  mutating func clearRequiredParentShell() {_uniqueStorage()._requiredParentShell = nil}

  var isNew: Bool {
    get {return _storage._isNew ?? false}
    set {_uniqueStorage()._isNew = newValue}
  }
  /// Returns true if `isNew` has been explicitly set.
  var hasIsNew: Bool {return _storage._isNew != nil}
  /// Clears the value of `isNew`. Subsequent reads from it will return its default value.
  mutating func clearIsNew() {_uniqueStorage()._isNew = nil}

  var expires: Bool {
    get {return _storage._expires ?? false}
    set {_uniqueStorage()._expires = newValue}
  }
  /// Returns true if `expires` has been explicitly set.
  var hasExpires: Bool {return _storage._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
  mutating func clearExpires() {_uniqueStorage()._expires = nil}

  var secondsUntilAvailable: Double {
    get {return _storage._secondsUntilAvailable ?? 0}
    set {_uniqueStorage()._secondsUntilAvailable = newValue}
  }
  /// Returns true if `secondsUntilAvailable` has been explicitly set.
  var hasSecondsUntilAvailable: Bool {return _storage._secondsUntilAvailable != nil}
  /// Clears the value of `secondsUntilAvailable`. Subsequent reads from it will return its default value.
  mutating func clearSecondsUntilAvailable() {_uniqueStorage()._secondsUntilAvailable = nil}

  var secondsRemaining: Double {
    get {return _storage._secondsRemaining ?? 0}
    set {_uniqueStorage()._secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return _storage._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {_uniqueStorage()._secondsRemaining = nil}

  var popularity: UInt64 {
    get {return _storage._popularity ?? 0}
    set {_uniqueStorage()._popularity = newValue}
  }
  /// Returns true if `popularity` has been explicitly set.
  var hasPopularity: Bool {return _storage._popularity != nil}
  /// Clears the value of `popularity`. Subsequent reads from it will return its default value.
  mutating func clearPopularity() {_uniqueStorage()._popularity = nil}

  var defaultAppearance: Bool {
    get {return _storage._defaultAppearance ?? false}
    set {_uniqueStorage()._defaultAppearance = newValue}
  }
  /// Returns true if `defaultAppearance` has been explicitly set.
  var hasDefaultAppearance: Bool {return _storage._defaultAppearance != nil}
  /// Clears the value of `defaultAppearance`. Subsequent reads from it will return its default value.
  mutating func clearDefaultAppearance() {_uniqueStorage()._defaultAppearance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum AssetType: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case coop = 1
    case shack = 2
    case superShack = 3
    case shortHouse = 4
    case theStandard = 5
    case longHouse = 6
    case doubleDecker = 7
    case warehouse = 8
    case center = 9
    case bunker = 10
    case eggkea = 11
    case hab1K = 12
    case hangar = 13
    case tower = 14
    case hab10K = 15
    case eggtopia = 16
    case monolith = 17
    case planetPortal = 18
    case chickenUniverse = 19
    case silo0Small = 50
    case silo0Med = 51
    case silo0Large = 52
    case silo1Small = 53
    case silo1Med = 54
    case silo1Large = 55
    case siloAll = 59
    case mailbox = 70
    case trophyCase = 71
    case ground = 72
    case hardscape = 73
    case hyperloop = 74
    case depot1 = 100
    case depot2 = 101
    case depot3 = 102
    case depot4 = 103
    case depot5 = 104
    case depot6 = 105
    case depot7 = 106
    case lab1 = 110
    case lab2 = 111
    case lab3 = 112
    case lab4 = 113
    case lab5 = 114
    case lab6 = 115
    case hatcheryEdible = 120
    case hatcherySuperfood = 121
    case hatcheryMedical = 122
    case hatcheryRocketFuel = 123
    case hatcherySupermaterial = 124
    case hatcheryFusion = 125
    case hatcheryQuantum = 126
    case hatcheryImmortality = 127
    case hatcheryTachyon = 128
    case hatcheryGraviton = 129
    case hatcheryDilithium = 130
    case hatcheryProdigy = 131
    case hatcheryTerraform = 132
    case hatcheryAntimatter = 133
    case hatcheryDarkMatter = 134
    case hatcheryAi = 135
    case hatcheryNebula = 136
    case hatcheryUniverse = 137
    case hatcheryEnlightenment = 138
    case hatcheryChocolate = 139
    case hatcheryEaster = 140
    case hatcheryWaterballoon = 141
    case hatcheryFirework = 142
    case hatcheryPumpkin = 143
    case hatcheryCustom = 150
    case hatcheryCuriosity = 160
    case hatcheryIntegrity = 161
    case hatcheryHumility = 162
    case hatcheryResilience = 163
    case hatcheryKindness = 164
    case hoa1 = 170
    case hoa2 = 171
    case hoa3 = 172
    case missionControl1 = 180
    case missionControl2 = 181
    case missionControl3 = 182
    case fuelTank1 = 200
    case fuelTank2 = 201
    case fuelTank3 = 202
    case fuelTank4 = 203
    case hatcheryGravitonTop = 500
    case hatcheryNebulaMiddle = 501
    case hatcheryNebulaTop = 502
    case hatcheryDarkMatterRing1 = 505
    case hatcheryDarkMatterRing2 = 506
    case hatcheryDarkMatterRing3 = 507
    case hatcheryAiTop1 = 510
    case hatcheryAiTop2 = 511
    case hatcheryAiTop3 = 512
    case hatcheryAiTop4 = 513
    case hatcheryUniverseProbe = 515
    case hatcheryUniverseBolt = 516
    case hatcheryEnlightenmentOrb = 520
    case hatcheryCuriosityExtra = 550
    case hatcheryIntegrityExtra = 551
    case hatcheryHumilityExtra = 552
    case hatcheryResilienceExtra = 553
    case hatcheryKindnessExtra = 554
    case hyperloopTrack = 570
    case mailboxFull = 600
    case chicken = 1000
    case hat = 1010
    case unknown = 9999

    init() {
      self = .coop
    }

  }

  struct ShellPiece: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var assetType: Ei_ShellSpec.AssetType {
      get {return _assetType ?? .coop}
      set {_assetType = newValue}
    }
    /// Returns true if `assetType` has been explicitly set.
    var hasAssetType: Bool {return self._assetType != nil}
    /// Clears the value of `assetType`. Subsequent reads from it will return its default value.
    mutating func clearAssetType() {self._assetType = nil}

    var dlc: Ei_DLCItem {
      get {return _dlc ?? Ei_DLCItem()}
      set {_dlc = newValue}
    }
    /// Returns true if `dlc` has been explicitly set.
    var hasDlc: Bool {return self._dlc != nil}
    /// Clears the value of `dlc`. Subsequent reads from it will return its default value.
    mutating func clearDlc() {self._dlc = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _assetType: Ei_ShellSpec.AssetType? = nil
    fileprivate var _dlc: Ei_DLCItem? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ShellSetSpec: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _storage._identifier ?? String()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var price: UInt32 {
    get {return _storage._price ?? 0}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_uniqueStorage()._price = nil}

  var priceMultDeprecated: Double {
    get {return _storage._priceMultDeprecated ?? 1}
    set {_uniqueStorage()._priceMultDeprecated = newValue}
  }
  /// Returns true if `priceMultDeprecated` has been explicitly set.
  var hasPriceMultDeprecated: Bool {return _storage._priceMultDeprecated != nil}
  /// Clears the value of `priceMultDeprecated`. Subsequent reads from it will return its default value.
  mutating func clearPriceMultDeprecated() {_uniqueStorage()._priceMultDeprecated = nil}

  var discount: Double {
    get {return _storage._discount ?? 0}
    set {_uniqueStorage()._discount = newValue}
  }
  /// Returns true if `discount` has been explicitly set.
  var hasDiscount: Bool {return _storage._discount != nil}
  /// Clears the value of `discount`. Subsequent reads from it will return its default value.
  mutating func clearDiscount() {_uniqueStorage()._discount = nil}

  var requiredEop: UInt32 {
    get {return _storage._requiredEop ?? 0}
    set {_uniqueStorage()._requiredEop = newValue}
  }
  /// Returns true if `requiredEop` has been explicitly set.
  var hasRequiredEop: Bool {return _storage._requiredEop != nil}
  /// Clears the value of `requiredEop`. Subsequent reads from it will return its default value.
  mutating func clearRequiredEop() {_uniqueStorage()._requiredEop = nil}

  var requiredSoulEggs: Double {
    get {return _storage._requiredSoulEggs ?? 0}
    set {_uniqueStorage()._requiredSoulEggs = newValue}
  }
  /// Returns true if `requiredSoulEggs` has been explicitly set.
  var hasRequiredSoulEggs: Bool {return _storage._requiredSoulEggs != nil}
  /// Clears the value of `requiredSoulEggs`. Subsequent reads from it will return its default value.
  mutating func clearRequiredSoulEggs() {_uniqueStorage()._requiredSoulEggs = nil}

  var requiredParentSet: String {
    get {return _storage._requiredParentSet ?? String()}
    set {_uniqueStorage()._requiredParentSet = newValue}
  }
  /// Returns true if `requiredParentSet` has been explicitly set.
  var hasRequiredParentSet: Bool {return _storage._requiredParentSet != nil}
  /// Clears the value of `requiredParentSet`. Subsequent reads from it will return its default value.
  mutating func clearRequiredParentSet() {_uniqueStorage()._requiredParentSet = nil}

  var isNew: Bool {
    get {return _storage._isNew ?? false}
    set {_uniqueStorage()._isNew = newValue}
  }
  /// Returns true if `isNew` has been explicitly set.
  var hasIsNew: Bool {return _storage._isNew != nil}
  /// Clears the value of `isNew`. Subsequent reads from it will return its default value.
  mutating func clearIsNew() {_uniqueStorage()._isNew = nil}

  var expires: Bool {
    get {return _storage._expires ?? false}
    set {_uniqueStorage()._expires = newValue}
  }
  /// Returns true if `expires` has been explicitly set.
  var hasExpires: Bool {return _storage._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
  mutating func clearExpires() {_uniqueStorage()._expires = nil}

  var secondsUntilAvailable: Double {
    get {return _storage._secondsUntilAvailable ?? 0}
    set {_uniqueStorage()._secondsUntilAvailable = newValue}
  }
  /// Returns true if `secondsUntilAvailable` has been explicitly set.
  var hasSecondsUntilAvailable: Bool {return _storage._secondsUntilAvailable != nil}
  /// Clears the value of `secondsUntilAvailable`. Subsequent reads from it will return its default value.
  mutating func clearSecondsUntilAvailable() {_uniqueStorage()._secondsUntilAvailable = nil}

  var secondsRemaining: Double {
    get {return _storage._secondsRemaining ?? 0}
    set {_uniqueStorage()._secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return _storage._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {_uniqueStorage()._secondsRemaining = nil}

  var popularity: UInt64 {
    get {return _storage._popularity ?? 0}
    set {_uniqueStorage()._popularity = newValue}
  }
  /// Returns true if `popularity` has been explicitly set.
  var hasPopularity: Bool {return _storage._popularity != nil}
  /// Clears the value of `popularity`. Subsequent reads from it will return its default value.
  mutating func clearPopularity() {_uniqueStorage()._popularity = nil}

  var decorator: Bool {
    get {return _storage._decorator ?? false}
    set {_uniqueStorage()._decorator = newValue}
  }
  /// Returns true if `decorator` has been explicitly set.
  var hasDecorator: Bool {return _storage._decorator != nil}
  /// Clears the value of `decorator`. Subsequent reads from it will return its default value.
  mutating func clearDecorator() {_uniqueStorage()._decorator = nil}

  var modifiedGeometry: Bool {
    get {return _storage._modifiedGeometry ?? false}
    set {_uniqueStorage()._modifiedGeometry = newValue}
  }
  /// Returns true if `modifiedGeometry` has been explicitly set.
  var hasModifiedGeometry: Bool {return _storage._modifiedGeometry != nil}
  /// Clears the value of `modifiedGeometry`. Subsequent reads from it will return its default value.
  mutating func clearModifiedGeometry() {_uniqueStorage()._modifiedGeometry = nil}

  var elementSet: Bool {
    get {return _storage._elementSet ?? false}
    set {_uniqueStorage()._elementSet = newValue}
  }
  /// Returns true if `elementSet` has been explicitly set.
  var hasElementSet: Bool {return _storage._elementSet != nil}
  /// Clears the value of `elementSet`. Subsequent reads from it will return its default value.
  mutating func clearElementSet() {_uniqueStorage()._elementSet = nil}

  var hexBaseColor: String {
    get {return _storage._hexBaseColor ?? String()}
    set {_uniqueStorage()._hexBaseColor = newValue}
  }
  /// Returns true if `hexBaseColor` has been explicitly set.
  var hasHexBaseColor: Bool {return _storage._hexBaseColor != nil}
  /// Clears the value of `hexBaseColor`. Subsequent reads from it will return its default value.
  mutating func clearHexBaseColor() {_uniqueStorage()._hexBaseColor = nil}

  var variations: [Ei_ShellSetSpec.VariationSpec] {
    get {return _storage._variations}
    set {_uniqueStorage()._variations = newValue}
  }

  var icon: Ei_DLCItem {
    get {return _storage._icon ?? Ei_DLCItem()}
    set {_uniqueStorage()._icon = newValue}
  }
  /// Returns true if `icon` has been explicitly set.
  var hasIcon: Bool {return _storage._icon != nil}
  /// Clears the value of `icon`. Subsequent reads from it will return its default value.
  mutating func clearIcon() {_uniqueStorage()._icon = nil}

  var defaultAppearance: Bool {
    get {return _storage._defaultAppearance ?? false}
    set {_uniqueStorage()._defaultAppearance = newValue}
  }
  /// Returns true if `defaultAppearance` has been explicitly set.
  var hasDefaultAppearance: Bool {return _storage._defaultAppearance != nil}
  /// Clears the value of `defaultAppearance`. Subsequent reads from it will return its default value.
  mutating func clearDefaultAppearance() {_uniqueStorage()._defaultAppearance = nil}

  var customAppearance: Bool {
    get {return _storage._customAppearance ?? false}
    set {_uniqueStorage()._customAppearance = newValue}
  }
  /// Returns true if `customAppearance` has been explicitly set.
  var hasCustomAppearance: Bool {return _storage._customAppearance != nil}
  /// Clears the value of `customAppearance`. Subsequent reads from it will return its default value.
  mutating func clearCustomAppearance() {_uniqueStorage()._customAppearance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct VariationSpec: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var identifier: String {
      get {return _identifier ?? String()}
      set {_identifier = newValue}
    }
    /// Returns true if `identifier` has been explicitly set.
    var hasIdentifier: Bool {return self._identifier != nil}
    /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
    mutating func clearIdentifier() {self._identifier = nil}

    var hexColor: String {
      get {return _hexColor ?? String()}
      set {_hexColor = newValue}
    }
    /// Returns true if `hexColor` has been explicitly set.
    var hasHexColor: Bool {return self._hexColor != nil}
    /// Clears the value of `hexColor`. Subsequent reads from it will return its default value.
    mutating func clearHexColor() {self._hexColor = nil}

    var price: UInt32 {
      get {return _price ?? 0}
      set {_price = newValue}
    }
    /// Returns true if `price` has been explicitly set.
    var hasPrice: Bool {return self._price != nil}
    /// Clears the value of `price`. Subsequent reads from it will return its default value.
    mutating func clearPrice() {self._price = nil}

    var sortPriority: Int32 {
      get {return _sortPriority ?? 0}
      set {_sortPriority = newValue}
    }
    /// Returns true if `sortPriority` has been explicitly set.
    var hasSortPriority: Bool {return self._sortPriority != nil}
    /// Clears the value of `sortPriority`. Subsequent reads from it will return its default value.
    mutating func clearSortPriority() {self._sortPriority = nil}

    var defaultAppearance: Bool {
      get {return _defaultAppearance ?? false}
      set {_defaultAppearance = newValue}
    }
    /// Returns true if `defaultAppearance` has been explicitly set.
    var hasDefaultAppearance: Bool {return self._defaultAppearance != nil}
    /// Clears the value of `defaultAppearance`. Subsequent reads from it will return its default value.
    mutating func clearDefaultAppearance() {self._defaultAppearance = nil}

    var customAppearance: Bool {
      get {return _customAppearance ?? false}
      set {_customAppearance = newValue}
    }
    /// Returns true if `customAppearance` has been explicitly set.
    var hasCustomAppearance: Bool {return self._customAppearance != nil}
    /// Clears the value of `customAppearance`. Subsequent reads from it will return its default value.
    mutating func clearCustomAppearance() {self._customAppearance = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _identifier: String? = nil
    fileprivate var _hexColor: String? = nil
    fileprivate var _price: UInt32? = nil
    fileprivate var _sortPriority: Int32? = nil
    fileprivate var _defaultAppearance: Bool? = nil
    fileprivate var _customAppearance: Bool? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ShellObjectSpec: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _storage._identifier ?? String()}
    set {_uniqueStorage()._identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return _storage._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {_uniqueStorage()._identifier = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var assetType: Ei_ShellSpec.AssetType {
    get {return _storage._assetType ?? .coop}
    set {_uniqueStorage()._assetType = newValue}
  }
  /// Returns true if `assetType` has been explicitly set.
  var hasAssetType: Bool {return _storage._assetType != nil}
  /// Clears the value of `assetType`. Subsequent reads from it will return its default value.
  mutating func clearAssetType() {_uniqueStorage()._assetType = nil}

  var objectClass: String {
    get {return _storage._objectClass ?? String()}
    set {_uniqueStorage()._objectClass = newValue}
  }
  /// Returns true if `objectClass` has been explicitly set.
  var hasObjectClass: Bool {return _storage._objectClass != nil}
  /// Clears the value of `objectClass`. Subsequent reads from it will return its default value.
  mutating func clearObjectClass() {_uniqueStorage()._objectClass = nil}

  var iconColors: [String] {
    get {return _storage._iconColors}
    set {_uniqueStorage()._iconColors = newValue}
  }

  var price: UInt32 {
    get {return _storage._price ?? 0}
    set {_uniqueStorage()._price = newValue}
  }
  /// Returns true if `price` has been explicitly set.
  var hasPrice: Bool {return _storage._price != nil}
  /// Clears the value of `price`. Subsequent reads from it will return its default value.
  mutating func clearPrice() {_uniqueStorage()._price = nil}

  var requiredEop: UInt32 {
    get {return _storage._requiredEop ?? 0}
    set {_uniqueStorage()._requiredEop = newValue}
  }
  /// Returns true if `requiredEop` has been explicitly set.
  var hasRequiredEop: Bool {return _storage._requiredEop != nil}
  /// Clears the value of `requiredEop`. Subsequent reads from it will return its default value.
  mutating func clearRequiredEop() {_uniqueStorage()._requiredEop = nil}

  var requiredSoulEggs: Double {
    get {return _storage._requiredSoulEggs ?? 0}
    set {_uniqueStorage()._requiredSoulEggs = newValue}
  }
  /// Returns true if `requiredSoulEggs` has been explicitly set.
  var hasRequiredSoulEggs: Bool {return _storage._requiredSoulEggs != nil}
  /// Clears the value of `requiredSoulEggs`. Subsequent reads from it will return its default value.
  mutating func clearRequiredSoulEggs() {_uniqueStorage()._requiredSoulEggs = nil}

  var isNew: Bool {
    get {return _storage._isNew ?? false}
    set {_uniqueStorage()._isNew = newValue}
  }
  /// Returns true if `isNew` has been explicitly set.
  var hasIsNew: Bool {return _storage._isNew != nil}
  /// Clears the value of `isNew`. Subsequent reads from it will return its default value.
  mutating func clearIsNew() {_uniqueStorage()._isNew = nil}

  var expires: Bool {
    get {return _storage._expires ?? false}
    set {_uniqueStorage()._expires = newValue}
  }
  /// Returns true if `expires` has been explicitly set.
  var hasExpires: Bool {return _storage._expires != nil}
  /// Clears the value of `expires`. Subsequent reads from it will return its default value.
  mutating func clearExpires() {_uniqueStorage()._expires = nil}

  var secondsUntilAvailable: Double {
    get {return _storage._secondsUntilAvailable ?? 0}
    set {_uniqueStorage()._secondsUntilAvailable = newValue}
  }
  /// Returns true if `secondsUntilAvailable` has been explicitly set.
  var hasSecondsUntilAvailable: Bool {return _storage._secondsUntilAvailable != nil}
  /// Clears the value of `secondsUntilAvailable`. Subsequent reads from it will return its default value.
  mutating func clearSecondsUntilAvailable() {_uniqueStorage()._secondsUntilAvailable = nil}

  var secondsRemaining: Double {
    get {return _storage._secondsRemaining ?? 0}
    set {_uniqueStorage()._secondsRemaining = newValue}
  }
  /// Returns true if `secondsRemaining` has been explicitly set.
  var hasSecondsRemaining: Bool {return _storage._secondsRemaining != nil}
  /// Clears the value of `secondsRemaining`. Subsequent reads from it will return its default value.
  mutating func clearSecondsRemaining() {_uniqueStorage()._secondsRemaining = nil}

  var popularity: UInt64 {
    get {return _storage._popularity ?? 0}
    set {_uniqueStorage()._popularity = newValue}
  }
  /// Returns true if `popularity` has been explicitly set.
  var hasPopularity: Bool {return _storage._popularity != nil}
  /// Clears the value of `popularity`. Subsequent reads from it will return its default value.
  mutating func clearPopularity() {_uniqueStorage()._popularity = nil}

  var metadata: [Double] {
    get {return _storage._metadata}
    set {_uniqueStorage()._metadata = newValue}
  }

  var noHats: Bool {
    get {return _storage._noHats ?? false}
    set {_uniqueStorage()._noHats = newValue}
  }
  /// Returns true if `noHats` has been explicitly set.
  var hasNoHats: Bool {return _storage._noHats != nil}
  /// Clears the value of `noHats`. Subsequent reads from it will return its default value.
  mutating func clearNoHats() {_uniqueStorage()._noHats = nil}

  var chickenAnimation: Ei_ShellObjectSpec.ChickenAnimation {
    get {return _storage._chickenAnimation ?? .standardRun}
    set {_uniqueStorage()._chickenAnimation = newValue}
  }
  /// Returns true if `chickenAnimation` has been explicitly set.
  var hasChickenAnimation: Bool {return _storage._chickenAnimation != nil}
  /// Clears the value of `chickenAnimation`. Subsequent reads from it will return its default value.
  mutating func clearChickenAnimation() {_uniqueStorage()._chickenAnimation = nil}

  var sortPriority: Int32 {
    get {return _storage._sortPriority ?? 0}
    set {_uniqueStorage()._sortPriority = newValue}
  }
  /// Returns true if `sortPriority` has been explicitly set.
  var hasSortPriority: Bool {return _storage._sortPriority != nil}
  /// Clears the value of `sortPriority`. Subsequent reads from it will return its default value.
  mutating func clearSortPriority() {_uniqueStorage()._sortPriority = nil}

  var pieces: [Ei_ShellObjectSpec.LODPiece] {
    get {return _storage._pieces}
    set {_uniqueStorage()._pieces = newValue}
  }

  var defaultAppearance: Bool {
    get {return _storage._defaultAppearance ?? false}
    set {_uniqueStorage()._defaultAppearance = newValue}
  }
  /// Returns true if `defaultAppearance` has been explicitly set.
  var hasDefaultAppearance: Bool {return _storage._defaultAppearance != nil}
  /// Clears the value of `defaultAppearance`. Subsequent reads from it will return its default value.
  mutating func clearDefaultAppearance() {_uniqueStorage()._defaultAppearance = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum ChickenAnimation: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case standardRun = 0
    case slowmo = 7
    case wobble = 1
    case wobbleLean = 5
    case smooth = 2
    case smoothLean = 6
    case hover = 3
    case sidewaysSmooth = 4
    case sidewaysLean = 8

    init() {
      self = .standardRun
    }

  }

  struct LODPiece: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var dlc: Ei_DLCItem {
      get {return _dlc ?? Ei_DLCItem()}
      set {_dlc = newValue}
    }
    /// Returns true if `dlc` has been explicitly set.
    var hasDlc: Bool {return self._dlc != nil}
    /// Clears the value of `dlc`. Subsequent reads from it will return its default value.
    mutating func clearDlc() {self._dlc = nil}

    var lod: UInt32 {
      get {return _lod ?? 0}
      set {_lod = newValue}
    }
    /// Returns true if `lod` has been explicitly set.
    var hasLod: Bool {return self._lod != nil}
    /// Clears the value of `lod`. Subsequent reads from it will return its default value.
    mutating func clearLod() {self._lod = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _dlc: Ei_DLCItem? = nil
    fileprivate var _lod: UInt32? = nil
  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ShellGroupSpec: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var identifier: String {
    get {return _identifier ?? String()}
    set {_identifier = newValue}
  }
  /// Returns true if `identifier` has been explicitly set.
  var hasIdentifier: Bool {return self._identifier != nil}
  /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
  mutating func clearIdentifier() {self._identifier = nil}

  var name: String {
    get {return _name ?? String()}
    set {_name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return self._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {self._name = nil}

  var assetType: Ei_ShellSpec.AssetType {
    get {return _assetType ?? .coop}
    set {_assetType = newValue}
  }
  /// Returns true if `assetType` has been explicitly set.
  var hasAssetType: Bool {return self._assetType != nil}
  /// Clears the value of `assetType`. Subsequent reads from it will return its default value.
  mutating func clearAssetType() {self._assetType = nil}

  var memberIds: [String] = []

  var priceMultDeprecated: Double {
    get {return _priceMultDeprecated ?? 0}
    set {_priceMultDeprecated = newValue}
  }
  /// Returns true if `priceMultDeprecated` has been explicitly set.
  var hasPriceMultDeprecated: Bool {return self._priceMultDeprecated != nil}
  /// Clears the value of `priceMultDeprecated`. Subsequent reads from it will return its default value.
  mutating func clearPriceMultDeprecated() {self._priceMultDeprecated = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _identifier: String? = nil
  fileprivate var _name: String? = nil
  fileprivate var _assetType: Ei_ShellSpec.AssetType? = nil
  fileprivate var _priceMultDeprecated: Double? = nil
}

struct Ei_DLCCatalog: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var items: [Ei_DLCItem] = []

  var shells: [Ei_ShellSpec] = []

  var shellSets: [Ei_ShellSetSpec] = []

  var decorators: [Ei_ShellSetSpec] = []

  var shellObjects: [Ei_ShellObjectSpec] = []

  var shellGroups: [Ei_ShellGroupSpec] = []

  var shellsShowcaseLastFeaturedTime: Double {
    get {return _shellsShowcaseLastFeaturedTime ?? 0}
    set {_shellsShowcaseLastFeaturedTime = newValue}
  }
  /// Returns true if `shellsShowcaseLastFeaturedTime` has been explicitly set.
  var hasShellsShowcaseLastFeaturedTime: Bool {return self._shellsShowcaseLastFeaturedTime != nil}
  /// Clears the value of `shellsShowcaseLastFeaturedTime`. Subsequent reads from it will return its default value.
  mutating func clearShellsShowcaseLastFeaturedTime() {self._shellsShowcaseLastFeaturedTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _shellsShowcaseLastFeaturedTime: Double? = nil
}

struct Ei_ShellDB: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var shellInventory: [Ei_ShellDB.ShellStatus] = []

  var shellElementInventory: [Ei_ShellDB.ShellElementStatus] = []

  var shellVariationInventory: [Ei_ShellDB.ShellSetVariationStatus] = []

  var shellSetInventory: [Ei_ShellDB.ShellStatus] = []

  var shellObjectInventory: [Ei_ShellDB.ShellStatus] = []

  var farmConfigs: [Ei_ShellDB.FarmConfiguration] = []

  var savedConfigs: [Ei_ShellDB.SavedFarmConfiguration] = []

  var newShellsDownloaded: [String] = []

  var newShellsSeen: [String] = []

  var lastShowcaseFeaturedTimeSeen: Double {
    get {return _lastShowcaseFeaturedTimeSeen ?? 0}
    set {_lastShowcaseFeaturedTimeSeen = newValue}
  }
  /// Returns true if `lastShowcaseFeaturedTimeSeen` has been explicitly set.
  var hasLastShowcaseFeaturedTimeSeen: Bool {return self._lastShowcaseFeaturedTimeSeen != nil}
  /// Clears the value of `lastShowcaseFeaturedTimeSeen`. Subsequent reads from it will return its default value.
  mutating func clearLastShowcaseFeaturedTimeSeen() {self._lastShowcaseFeaturedTimeSeen = nil}

  var lightingControlsUnlocked: Bool {
    get {return _lightingControlsUnlocked ?? false}
    set {_lightingControlsUnlocked = newValue}
  }
  /// Returns true if `lightingControlsUnlocked` has been explicitly set.
  var hasLightingControlsUnlocked: Bool {return self._lightingControlsUnlocked != nil}
  /// Clears the value of `lightingControlsUnlocked`. Subsequent reads from it will return its default value.
  mutating func clearLightingControlsUnlocked() {self._lightingControlsUnlocked = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum FarmElement: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case henHouse = 1
    case silo = 2
    case mailbox = 3
    case trophyCase = 4
    case ground = 5
    case hardscape = 6
    case hyperloop = 7
    case depot = 8
    case lab = 9
    case hatchery = 10
    case hoa = 11
    case missionControl = 12
    case fuelTank = 13
    case chicken = 14
    case hat = 15
    case unknown = 99

    init() {
      self = .henHouse
    }

  }

  struct ShellStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var identifier: String {
      get {return _identifier ?? String()}
      set {_identifier = newValue}
    }
    /// Returns true if `identifier` has been explicitly set.
    var hasIdentifier: Bool {return self._identifier != nil}
    /// Clears the value of `identifier`. Subsequent reads from it will return its default value.
    mutating func clearIdentifier() {self._identifier = nil}

    var owned: Bool {
      get {return _owned ?? false}
      set {_owned = newValue}
    }
    /// Returns true if `owned` has been explicitly set.
    var hasOwned: Bool {return self._owned != nil}
    /// Clears the value of `owned`. Subsequent reads from it will return its default value.
    mutating func clearOwned() {self._owned = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _identifier: String? = nil
    fileprivate var _owned: Bool? = nil
  }

  struct ShellElementStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var element: Ei_ShellDB.FarmElement {
      get {return _element ?? .henHouse}
      set {_element = newValue}
    }
    /// Returns true if `element` has been explicitly set.
    var hasElement: Bool {return self._element != nil}
    /// Clears the value of `element`. Subsequent reads from it will return its default value.
    mutating func clearElement() {self._element = nil}

    var setIdentifier: String {
      get {return _setIdentifier ?? String()}
      set {_setIdentifier = newValue}
    }
    /// Returns true if `setIdentifier` has been explicitly set.
    var hasSetIdentifier: Bool {return self._setIdentifier != nil}
    /// Clears the value of `setIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearSetIdentifier() {self._setIdentifier = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _element: Ei_ShellDB.FarmElement? = nil
    fileprivate var _setIdentifier: String? = nil
  }

  struct ShellSetVariationStatus: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var setIdentifier: String {
      get {return _setIdentifier ?? String()}
      set {_setIdentifier = newValue}
    }
    /// Returns true if `setIdentifier` has been explicitly set.
    var hasSetIdentifier: Bool {return self._setIdentifier != nil}
    /// Clears the value of `setIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearSetIdentifier() {self._setIdentifier = nil}

    var ownedVariations: [String] = []

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _setIdentifier: String? = nil
  }

  struct FarmConfiguration: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var lockedElements: [Ei_ShellDB.FarmElement] = []

    var shellConfigs: [Ei_ShellDB.ShellConfiguration] = []

    var shellSetConfigs: [Ei_ShellDB.ShellSetConfiguration] = []

    var configureChickensByGroup: Bool {
      get {return _configureChickensByGroup ?? false}
      set {_configureChickensByGroup = newValue}
    }
    /// Returns true if `configureChickensByGroup` has been explicitly set.
    var hasConfigureChickensByGroup: Bool {return self._configureChickensByGroup != nil}
    /// Clears the value of `configureChickensByGroup`. Subsequent reads from it will return its default value.
    mutating func clearConfigureChickensByGroup() {self._configureChickensByGroup = nil}

    var groupConfigs: [Ei_ShellDB.ShellGroupConfiguration] = []

    var chickenConfigs: [Ei_ShellDB.ChickenConfig] = []

    var lightingConfigEnabled: Bool {
      get {return _lightingConfigEnabled ?? false}
      set {_lightingConfigEnabled = newValue}
    }
    /// Returns true if `lightingConfigEnabled` has been explicitly set.
    var hasLightingConfigEnabled: Bool {return self._lightingConfigEnabled != nil}
    /// Clears the value of `lightingConfigEnabled`. Subsequent reads from it will return its default value.
    mutating func clearLightingConfigEnabled() {self._lightingConfigEnabled = nil}

    var lightingConfig: Ei_ShellDB.LightingConfig {
      get {return _lightingConfig ?? Ei_ShellDB.LightingConfig()}
      set {_lightingConfig = newValue}
    }
    /// Returns true if `lightingConfig` has been explicitly set.
    var hasLightingConfig: Bool {return self._lightingConfig != nil}
    /// Clears the value of `lightingConfig`. Subsequent reads from it will return its default value.
    mutating func clearLightingConfig() {self._lightingConfig = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _configureChickensByGroup: Bool? = nil
    fileprivate var _lightingConfigEnabled: Bool? = nil
    fileprivate var _lightingConfig: Ei_ShellDB.LightingConfig? = nil
  }

  struct SavedFarmConfiguration: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var config: Ei_ShellDB.FarmConfiguration {
      get {return _config ?? Ei_ShellDB.FarmConfiguration()}
      set {_config = newValue}
    }
    /// Returns true if `config` has been explicitly set.
    var hasConfig: Bool {return self._config != nil}
    /// Clears the value of `config`. Subsequent reads from it will return its default value.
    mutating func clearConfig() {self._config = nil}

    var clientSaveTime: Double {
      get {return _clientSaveTime ?? 0}
      set {_clientSaveTime = newValue}
    }
    /// Returns true if `clientSaveTime` has been explicitly set.
    var hasClientSaveTime: Bool {return self._clientSaveTime != nil}
    /// Clears the value of `clientSaveTime`. Subsequent reads from it will return its default value.
    mutating func clearClientSaveTime() {self._clientSaveTime = nil}

    var serverID: String {
      get {return _serverID ?? String()}
      set {_serverID = newValue}
    }
    /// Returns true if `serverID` has been explicitly set.
    var hasServerID: Bool {return self._serverID != nil}
    /// Clears the value of `serverID`. Subsequent reads from it will return its default value.
    mutating func clearServerID() {self._serverID = nil}

    var displayName: String {
      get {return _displayName ?? String()}
      set {_displayName = newValue}
    }
    /// Returns true if `displayName` has been explicitly set.
    var hasDisplayName: Bool {return self._displayName != nil}
    /// Clears the value of `displayName`. Subsequent reads from it will return its default value.
    mutating func clearDisplayName() {self._displayName = nil}

    var purchased: Bool {
      get {return _purchased ?? false}
      set {_purchased = newValue}
    }
    /// Returns true if `purchased` has been explicitly set.
    var hasPurchased: Bool {return self._purchased != nil}
    /// Clears the value of `purchased`. Subsequent reads from it will return its default value.
    mutating func clearPurchased() {self._purchased = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _config: Ei_ShellDB.FarmConfiguration? = nil
    fileprivate var _clientSaveTime: Double? = nil
    fileprivate var _serverID: String? = nil
    fileprivate var _displayName: String? = nil
    fileprivate var _purchased: Bool? = nil
  }

  struct ShellConfiguration: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var assetType: Ei_ShellSpec.AssetType {
      get {return _assetType ?? .coop}
      set {_assetType = newValue}
    }
    /// Returns true if `assetType` has been explicitly set.
    var hasAssetType: Bool {return self._assetType != nil}
    /// Clears the value of `assetType`. Subsequent reads from it will return its default value.
    mutating func clearAssetType() {self._assetType = nil}

    var index: UInt32 {
      get {return _index ?? 0}
      set {_index = newValue}
    }
    /// Returns true if `index` has been explicitly set.
    var hasIndex: Bool {return self._index != nil}
    /// Clears the value of `index`. Subsequent reads from it will return its default value.
    mutating func clearIndex() {self._index = nil}

    var shellIdentifier: String {
      get {return _shellIdentifier ?? String()}
      set {_shellIdentifier = newValue}
    }
    /// Returns true if `shellIdentifier` has been explicitly set.
    var hasShellIdentifier: Bool {return self._shellIdentifier != nil}
    /// Clears the value of `shellIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearShellIdentifier() {self._shellIdentifier = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _assetType: Ei_ShellSpec.AssetType? = nil
    fileprivate var _index: UInt32? = nil
    fileprivate var _shellIdentifier: String? = nil
  }

  struct ShellSetConfiguration: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var element: Ei_ShellDB.FarmElement {
      get {return _element ?? .henHouse}
      set {_element = newValue}
    }
    /// Returns true if `element` has been explicitly set.
    var hasElement: Bool {return self._element != nil}
    /// Clears the value of `element`. Subsequent reads from it will return its default value.
    mutating func clearElement() {self._element = nil}

    var index: UInt32 {
      get {return _index ?? 0}
      set {_index = newValue}
    }
    /// Returns true if `index` has been explicitly set.
    var hasIndex: Bool {return self._index != nil}
    /// Clears the value of `index`. Subsequent reads from it will return its default value.
    mutating func clearIndex() {self._index = nil}

    var shellSetIdentifier: String {
      get {return _shellSetIdentifier ?? String()}
      set {_shellSetIdentifier = newValue}
    }
    /// Returns true if `shellSetIdentifier` has been explicitly set.
    var hasShellSetIdentifier: Bool {return self._shellSetIdentifier != nil}
    /// Clears the value of `shellSetIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearShellSetIdentifier() {self._shellSetIdentifier = nil}

    var variationIdentifier: String {
      get {return _variationIdentifier ?? String()}
      set {_variationIdentifier = newValue}
    }
    /// Returns true if `variationIdentifier` has been explicitly set.
    var hasVariationIdentifier: Bool {return self._variationIdentifier != nil}
    /// Clears the value of `variationIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearVariationIdentifier() {self._variationIdentifier = nil}

    var decoratorIdentifier: String {
      get {return _decoratorIdentifier ?? String()}
      set {_decoratorIdentifier = newValue}
    }
    /// Returns true if `decoratorIdentifier` has been explicitly set.
    var hasDecoratorIdentifier: Bool {return self._decoratorIdentifier != nil}
    /// Clears the value of `decoratorIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearDecoratorIdentifier() {self._decoratorIdentifier = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _element: Ei_ShellDB.FarmElement? = nil
    fileprivate var _index: UInt32? = nil
    fileprivate var _shellSetIdentifier: String? = nil
    fileprivate var _variationIdentifier: String? = nil
    fileprivate var _decoratorIdentifier: String? = nil
  }

  struct ShellGroupConfiguration: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var assetType: Ei_ShellSpec.AssetType {
      get {return _assetType ?? .coop}
      set {_assetType = newValue}
    }
    /// Returns true if `assetType` has been explicitly set.
    var hasAssetType: Bool {return self._assetType != nil}
    /// Clears the value of `assetType`. Subsequent reads from it will return its default value.
    mutating func clearAssetType() {self._assetType = nil}

    var groupIdentifier: String {
      get {return _groupIdentifier ?? String()}
      set {_groupIdentifier = newValue}
    }
    /// Returns true if `groupIdentifier` has been explicitly set.
    var hasGroupIdentifier: Bool {return self._groupIdentifier != nil}
    /// Clears the value of `groupIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearGroupIdentifier() {self._groupIdentifier = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _assetType: Ei_ShellSpec.AssetType? = nil
    fileprivate var _groupIdentifier: String? = nil
  }

  struct ChickenConfig: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var chickenIdentifier: String {
      get {return _chickenIdentifier ?? String()}
      set {_chickenIdentifier = newValue}
    }
    /// Returns true if `chickenIdentifier` has been explicitly set.
    var hasChickenIdentifier: Bool {return self._chickenIdentifier != nil}
    /// Clears the value of `chickenIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearChickenIdentifier() {self._chickenIdentifier = nil}

    var hatIdentifier: String {
      get {return _hatIdentifier ?? String()}
      set {_hatIdentifier = newValue}
    }
    /// Returns true if `hatIdentifier` has been explicitly set.
    var hasHatIdentifier: Bool {return self._hatIdentifier != nil}
    /// Clears the value of `hatIdentifier`. Subsequent reads from it will return its default value.
    mutating func clearHatIdentifier() {self._hatIdentifier = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _chickenIdentifier: String? = nil
    fileprivate var _hatIdentifier: String? = nil
  }

  struct LightingConfig: @unchecked Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var lightDir: Ei_Vector3 {
      get {return _storage._lightDir ?? Ei_Vector3()}
      set {_uniqueStorage()._lightDir = newValue}
    }
    /// Returns true if `lightDir` has been explicitly set.
    var hasLightDir: Bool {return _storage._lightDir != nil}
    /// Clears the value of `lightDir`. Subsequent reads from it will return its default value.
    mutating func clearLightDir() {_uniqueStorage()._lightDir = nil}

    var lightDirectColor: Ei_Vector4 {
      get {return _storage._lightDirectColor ?? Ei_Vector4()}
      set {_uniqueStorage()._lightDirectColor = newValue}
    }
    /// Returns true if `lightDirectColor` has been explicitly set.
    var hasLightDirectColor: Bool {return _storage._lightDirectColor != nil}
    /// Clears the value of `lightDirectColor`. Subsequent reads from it will return its default value.
    mutating func clearLightDirectColor() {_uniqueStorage()._lightDirectColor = nil}

    var lightDirectIntensity: Float {
      get {return _storage._lightDirectIntensity ?? 0}
      set {_uniqueStorage()._lightDirectIntensity = newValue}
    }
    /// Returns true if `lightDirectIntensity` has been explicitly set.
    var hasLightDirectIntensity: Bool {return _storage._lightDirectIntensity != nil}
    /// Clears the value of `lightDirectIntensity`. Subsequent reads from it will return its default value.
    mutating func clearLightDirectIntensity() {_uniqueStorage()._lightDirectIntensity = nil}

    var lightAmbientColor: Ei_Vector4 {
      get {return _storage._lightAmbientColor ?? Ei_Vector4()}
      set {_uniqueStorage()._lightAmbientColor = newValue}
    }
    /// Returns true if `lightAmbientColor` has been explicitly set.
    var hasLightAmbientColor: Bool {return _storage._lightAmbientColor != nil}
    /// Clears the value of `lightAmbientColor`. Subsequent reads from it will return its default value.
    mutating func clearLightAmbientColor() {_uniqueStorage()._lightAmbientColor = nil}

    var lightAmbientIntensity: Float {
      get {return _storage._lightAmbientIntensity ?? 0}
      set {_uniqueStorage()._lightAmbientIntensity = newValue}
    }
    /// Returns true if `lightAmbientIntensity` has been explicitly set.
    var hasLightAmbientIntensity: Bool {return _storage._lightAmbientIntensity != nil}
    /// Clears the value of `lightAmbientIntensity`. Subsequent reads from it will return its default value.
    mutating func clearLightAmbientIntensity() {_uniqueStorage()._lightAmbientIntensity = nil}

    var fogColor: Ei_Vector4 {
      get {return _storage._fogColor ?? Ei_Vector4()}
      set {_uniqueStorage()._fogColor = newValue}
    }
    /// Returns true if `fogColor` has been explicitly set.
    var hasFogColor: Bool {return _storage._fogColor != nil}
    /// Clears the value of `fogColor`. Subsequent reads from it will return its default value.
    mutating func clearFogColor() {_uniqueStorage()._fogColor = nil}

    var fogNear: Float {
      get {return _storage._fogNear ?? 0}
      set {_uniqueStorage()._fogNear = newValue}
    }
    /// Returns true if `fogNear` has been explicitly set.
    var hasFogNear: Bool {return _storage._fogNear != nil}
    /// Clears the value of `fogNear`. Subsequent reads from it will return its default value.
    mutating func clearFogNear() {_uniqueStorage()._fogNear = nil}

    var fogFar: Float {
      get {return _storage._fogFar ?? 0}
      set {_uniqueStorage()._fogFar = newValue}
    }
    /// Returns true if `fogFar` has been explicitly set.
    var hasFogFar: Bool {return _storage._fogFar != nil}
    /// Clears the value of `fogFar`. Subsequent reads from it will return its default value.
    mutating func clearFogFar() {_uniqueStorage()._fogFar = nil}

    var fogDensity: Float {
      get {return _storage._fogDensity ?? 0}
      set {_uniqueStorage()._fogDensity = newValue}
    }
    /// Returns true if `fogDensity` has been explicitly set.
    var hasFogDensity: Bool {return _storage._fogDensity != nil}
    /// Clears the value of `fogDensity`. Subsequent reads from it will return its default value.
    mutating func clearFogDensity() {_uniqueStorage()._fogDensity = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _storage = _StorageClass.defaultInstance
  }

  init() {}

  fileprivate var _lastShowcaseFeaturedTimeSeen: Double? = nil
  fileprivate var _lightingControlsUnlocked: Bool? = nil
}

struct Ei_ShellPopularityStats: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var data: [Ei_ShellPopularityStats.Entry] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  struct Entry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var id: String {
      get {return _id ?? String()}
      set {_id = newValue}
    }
    /// Returns true if `id` has been explicitly set.
    var hasID: Bool {return self._id != nil}
    /// Clears the value of `id`. Subsequent reads from it will return its default value.
    mutating func clearID() {self._id = nil}

    var element: Ei_ShellDB.FarmElement {
      get {return _element ?? .henHouse}
      set {_element = newValue}
    }
    /// Returns true if `element` has been explicitly set.
    var hasElement: Bool {return self._element != nil}
    /// Clears the value of `element`. Subsequent reads from it will return its default value.
    mutating func clearElement() {self._element = nil}

    var spent: UInt64 {
      get {return _spent ?? 0}
      set {_spent = newValue}
    }
    /// Returns true if `spent` has been explicitly set.
    var hasSpent: Bool {return self._spent != nil}
    /// Clears the value of `spent`. Subsequent reads from it will return its default value.
    mutating func clearSpent() {self._spent = nil}

    var count: UInt64 {
      get {return _count ?? 0}
      set {_count = newValue}
    }
    /// Returns true if `count` has been explicitly set.
    var hasCount: Bool {return self._count != nil}
    /// Clears the value of `count`. Subsequent reads from it will return its default value.
    mutating func clearCount() {self._count = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _id: String? = nil
    fileprivate var _element: Ei_ShellDB.FarmElement? = nil
    fileprivate var _spent: UInt64? = nil
    fileprivate var _count: UInt64? = nil
  }

  init() {}
}

struct Ei_ShellsActionLog: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var action: String {
    get {return _storage._action ?? String()}
    set {_uniqueStorage()._action = newValue}
  }
  /// Returns true if `action` has been explicitly set.
  var hasAction: Bool {return _storage._action != nil}
  /// Clears the value of `action`. Subsequent reads from it will return its default value.
  mutating func clearAction() {_uniqueStorage()._action = nil}

  var subID: String {
    get {return _storage._subID ?? String()}
    set {_uniqueStorage()._subID = newValue}
  }
  /// Returns true if `subID` has been explicitly set.
  var hasSubID: Bool {return _storage._subID != nil}
  /// Clears the value of `subID`. Subsequent reads from it will return its default value.
  mutating func clearSubID() {_uniqueStorage()._subID = nil}

  var farmElement: Ei_ShellDB.FarmElement {
    get {return _storage._farmElement ?? .henHouse}
    set {_uniqueStorage()._farmElement = newValue}
  }
  /// Returns true if `farmElement` has been explicitly set.
  var hasFarmElement: Bool {return _storage._farmElement != nil}
  /// Clears the value of `farmElement`. Subsequent reads from it will return its default value.
  mutating func clearFarmElement() {_uniqueStorage()._farmElement = nil}

  var cost: UInt32 {
    get {return _storage._cost ?? 0}
    set {_uniqueStorage()._cost = newValue}
  }
  /// Returns true if `cost` has been explicitly set.
  var hasCost: Bool {return _storage._cost != nil}
  /// Clears the value of `cost`. Subsequent reads from it will return its default value.
  mutating func clearCost() {_uniqueStorage()._cost = nil}

  var approxTime: Double {
    get {return _storage._approxTime ?? 0}
    set {_uniqueStorage()._approxTime = newValue}
  }
  /// Returns true if `approxTime` has been explicitly set.
  var hasApproxTime: Bool {return _storage._approxTime != nil}
  /// Clears the value of `approxTime`. Subsequent reads from it will return its default value.
  mutating func clearApproxTime() {_uniqueStorage()._approxTime = nil}

  var version: String {
    get {return _storage._version ?? String()}
    set {_uniqueStorage()._version = newValue}
  }
  /// Returns true if `version` has been explicitly set.
  var hasVersion: Bool {return _storage._version != nil}
  /// Clears the value of `version`. Subsequent reads from it will return its default value.
  mutating func clearVersion() {_uniqueStorage()._version = nil}

  var farmIndex: Int32 {
    get {return _storage._farmIndex ?? 0}
    set {_uniqueStorage()._farmIndex = newValue}
  }
  /// Returns true if `farmIndex` has been explicitly set.
  var hasFarmIndex: Bool {return _storage._farmIndex != nil}
  /// Clears the value of `farmIndex`. Subsequent reads from it will return its default value.
  mutating func clearFarmIndex() {_uniqueStorage()._farmIndex = nil}

  var soulEggs: Double {
    get {return _storage._soulEggs ?? 0}
    set {_uniqueStorage()._soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return _storage._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {_uniqueStorage()._soulEggs = nil}

  var ticketsSpent: UInt64 {
    get {return _storage._ticketsSpent ?? 0}
    set {_uniqueStorage()._ticketsSpent = newValue}
  }
  /// Returns true if `ticketsSpent` has been explicitly set.
  var hasTicketsSpent: Bool {return _storage._ticketsSpent != nil}
  /// Clears the value of `ticketsSpent`. Subsequent reads from it will return its default value.
  mutating func clearTicketsSpent() {_uniqueStorage()._ticketsSpent = nil}

  var goldSpent: UInt64 {
    get {return _storage._goldSpent ?? 0}
    set {_uniqueStorage()._goldSpent = newValue}
  }
  /// Returns true if `goldSpent` has been explicitly set.
  var hasGoldSpent: Bool {return _storage._goldSpent != nil}
  /// Clears the value of `goldSpent`. Subsequent reads from it will return its default value.
  mutating func clearGoldSpent() {_uniqueStorage()._goldSpent = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_SubmitShellShowcaseRequest: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _storage._rinfo ?? Ei_BasicRequestInfo()}
    set {_uniqueStorage()._rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return _storage._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {_uniqueStorage()._rinfo = nil}

  var localID: String {
    get {return _storage._localID ?? String()}
    set {_uniqueStorage()._localID = newValue}
  }
  /// Returns true if `localID` has been explicitly set.
  var hasLocalID: Bool {return _storage._localID != nil}
  /// Clears the value of `localID`. Subsequent reads from it will return its default value.
  mutating func clearLocalID() {_uniqueStorage()._localID = nil}

  var userID: String {
    get {return _storage._userID ?? String()}
    set {_uniqueStorage()._userID = newValue}
  }
  /// Returns true if `userID` has been explicitly set.
  var hasUserID: Bool {return _storage._userID != nil}
  /// Clears the value of `userID`. Subsequent reads from it will return its default value.
  mutating func clearUserID() {_uniqueStorage()._userID = nil}

  var publicUsername: Bool {
    get {return _storage._publicUsername ?? false}
    set {_uniqueStorage()._publicUsername = newValue}
  }
  /// Returns true if `publicUsername` has been explicitly set.
  var hasPublicUsername: Bool {return _storage._publicUsername != nil}
  /// Clears the value of `publicUsername`. Subsequent reads from it will return its default value.
  mutating func clearPublicUsername() {_uniqueStorage()._publicUsername = nil}

  var farmConfig: Ei_ShellDB.FarmConfiguration {
    get {return _storage._farmConfig ?? Ei_ShellDB.FarmConfiguration()}
    set {_uniqueStorage()._farmConfig = newValue}
  }
  /// Returns true if `farmConfig` has been explicitly set.
  var hasFarmConfig: Bool {return _storage._farmConfig != nil}
  /// Clears the value of `farmConfig`. Subsequent reads from it will return its default value.
  mutating func clearFarmConfig() {_uniqueStorage()._farmConfig = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ShellShowcase: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var top: [Ei_ShellShowcaseListingInfo] = []

  var featured: [Ei_ShellShowcaseListingInfo] = []

  var fresh: [Ei_ShellShowcaseListingInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_ShellShowcaseListingInfo: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var id: String {
    get {return _storage._id ?? String()}
    set {_uniqueStorage()._id = newValue}
  }
  /// Returns true if `id` has been explicitly set.
  var hasID: Bool {return _storage._id != nil}
  /// Clears the value of `id`. Subsequent reads from it will return its default value.
  mutating func clearID() {_uniqueStorage()._id = nil}

  var localID: String {
    get {return _storage._localID ?? String()}
    set {_uniqueStorage()._localID = newValue}
  }
  /// Returns true if `localID` has been explicitly set.
  var hasLocalID: Bool {return _storage._localID != nil}
  /// Clears the value of `localID`. Subsequent reads from it will return its default value.
  mutating func clearLocalID() {_uniqueStorage()._localID = nil}

  var name: String {
    get {return _storage._name ?? String()}
    set {_uniqueStorage()._name = newValue}
  }
  /// Returns true if `name` has been explicitly set.
  var hasName: Bool {return _storage._name != nil}
  /// Clears the value of `name`. Subsequent reads from it will return its default value.
  mutating func clearName() {_uniqueStorage()._name = nil}

  var description_p: String {
    get {return _storage._description_p ?? String()}
    set {_uniqueStorage()._description_p = newValue}
  }
  /// Returns true if `description_p` has been explicitly set.
  var hasDescription_p: Bool {return _storage._description_p != nil}
  /// Clears the value of `description_p`. Subsequent reads from it will return its default value.
  mutating func clearDescription_p() {_uniqueStorage()._description_p = nil}

  var isNew: Bool {
    get {return _storage._isNew ?? false}
    set {_uniqueStorage()._isNew = newValue}
  }
  /// Returns true if `isNew` has been explicitly set.
  var hasIsNew: Bool {return _storage._isNew != nil}
  /// Clears the value of `isNew`. Subsequent reads from it will return its default value.
  mutating func clearIsNew() {_uniqueStorage()._isNew = nil}

  var creatorName: String {
    get {return _storage._creatorName ?? String()}
    set {_uniqueStorage()._creatorName = newValue}
  }
  /// Returns true if `creatorName` has been explicitly set.
  var hasCreatorName: Bool {return _storage._creatorName != nil}
  /// Clears the value of `creatorName`. Subsequent reads from it will return its default value.
  mutating func clearCreatorName() {_uniqueStorage()._creatorName = nil}

  var status: Ei_ShellShowcaseListingInfo.Status {
    get {return _storage._status ?? .none}
    set {_uniqueStorage()._status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return _storage._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {_uniqueStorage()._status = nil}

  var farmConfig: Ei_ShellDB.FarmConfiguration {
    get {return _storage._farmConfig ?? Ei_ShellDB.FarmConfiguration()}
    set {_uniqueStorage()._farmConfig = newValue}
  }
  /// Returns true if `farmConfig` has been explicitly set.
  var hasFarmConfig: Bool {return _storage._farmConfig != nil}
  /// Clears the value of `farmConfig`. Subsequent reads from it will return its default value.
  mutating func clearFarmConfig() {_uniqueStorage()._farmConfig = nil}

  var sales: UInt32 {
    get {return _storage._sales ?? 0}
    set {_uniqueStorage()._sales = newValue}
  }
  /// Returns true if `sales` has been explicitly set.
  var hasSales: Bool {return _storage._sales != nil}
  /// Clears the value of `sales`. Subsequent reads from it will return its default value.
  mutating func clearSales() {_uniqueStorage()._sales = nil}

  var gross: UInt64 {
    get {return _storage._gross ?? 0}
    set {_uniqueStorage()._gross = newValue}
  }
  /// Returns true if `gross` has been explicitly set.
  var hasGross: Bool {return _storage._gross != nil}
  /// Clears the value of `gross`. Subsequent reads from it will return its default value.
  mutating func clearGross() {_uniqueStorage()._gross = nil}

  var views: UInt64 {
    get {return _storage._views ?? 0}
    set {_uniqueStorage()._views = newValue}
  }
  /// Returns true if `views` has been explicitly set.
  var hasViews: Bool {return _storage._views != nil}
  /// Clears the value of `views`. Subsequent reads from it will return its default value.
  mutating func clearViews() {_uniqueStorage()._views = nil}

  var equips: UInt64 {
    get {return _storage._equips ?? 0}
    set {_uniqueStorage()._equips = newValue}
  }
  /// Returns true if `equips` has been explicitly set.
  var hasEquips: Bool {return _storage._equips != nil}
  /// Clears the value of `equips`. Subsequent reads from it will return its default value.
  mutating func clearEquips() {_uniqueStorage()._equips = nil}

  var likes: UInt32 {
    get {return _storage._likes ?? 0}
    set {_uniqueStorage()._likes = newValue}
  }
  /// Returns true if `likes` has been explicitly set.
  var hasLikes: Bool {return _storage._likes != nil}
  /// Clears the value of `likes`. Subsequent reads from it will return its default value.
  mutating func clearLikes() {_uniqueStorage()._likes = nil}

  var dislikes: UInt32 {
    get {return _storage._dislikes ?? 0}
    set {_uniqueStorage()._dislikes = newValue}
  }
  /// Returns true if `dislikes` has been explicitly set.
  var hasDislikes: Bool {return _storage._dislikes != nil}
  /// Clears the value of `dislikes`. Subsequent reads from it will return its default value.
  mutating func clearDislikes() {_uniqueStorage()._dislikes = nil}

  var shareURL: String {
    get {return _storage._shareURL ?? String()}
    set {_uniqueStorage()._shareURL = newValue}
  }
  /// Returns true if `shareURL` has been explicitly set.
  var hasShareURL: Bool {return _storage._shareURL != nil}
  /// Clears the value of `shareURL`. Subsequent reads from it will return its default value.
  mutating func clearShareURL() {_uniqueStorage()._shareURL = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case none = 0
    case submitted = 1
    case live = 2
    case featured = 3
    case featuredAlum = 5
    case archived = 6
    case invalid = 4

    init() {
      self = .none
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_ShowcaseRoyaltyDeliveryConfirmation: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var ids: [String] = []

  var amount: UInt32 {
    get {return _amount ?? 0}
    set {_amount = newValue}
  }
  /// Returns true if `amount` has been explicitly set.
  var hasAmount: Bool {return self._amount != nil}
  /// Clears the value of `amount`. Subsequent reads from it will return its default value.
  mutating func clearAmount() {self._amount = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _amount: UInt32? = nil
}

struct Ei_ShellShowcaseListingSet: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var listings: [Ei_ShellShowcaseListingInfo] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}
}

struct Ei_ShellsActionBatch: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var actions: [Ei_ShellsActionLog] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
}

struct Ei_UserVerificationAnalysis: @unchecked Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var overallStatus: Ei_UserVerificationAnalysis.Status {
    get {return _storage._overallStatus ?? .unknown}
    set {_uniqueStorage()._overallStatus = newValue}
  }
  /// Returns true if `overallStatus` has been explicitly set.
  var hasOverallStatus: Bool {return _storage._overallStatus != nil}
  /// Clears the value of `overallStatus`. Subsequent reads from it will return its default value.
  mutating func clearOverallStatus() {_uniqueStorage()._overallStatus = nil}

  var startTime: Double {
    get {return _storage._startTime ?? 0}
    set {_uniqueStorage()._startTime = newValue}
  }
  /// Returns true if `startTime` has been explicitly set.
  var hasStartTime: Bool {return _storage._startTime != nil}
  /// Clears the value of `startTime`. Subsequent reads from it will return its default value.
  mutating func clearStartTime() {_uniqueStorage()._startTime = nil}

  var completionTime: Double {
    get {return _storage._completionTime ?? 0}
    set {_uniqueStorage()._completionTime = newValue}
  }
  /// Returns true if `completionTime` has been explicitly set.
  var hasCompletionTime: Bool {return _storage._completionTime != nil}
  /// Clears the value of `completionTime`. Subsequent reads from it will return its default value.
  mutating func clearCompletionTime() {_uniqueStorage()._completionTime = nil}

  var verificationCount: Int32 {
    get {return _storage._verificationCount ?? 0}
    set {_uniqueStorage()._verificationCount = newValue}
  }
  /// Returns true if `verificationCount` has been explicitly set.
  var hasVerificationCount: Bool {return _storage._verificationCount != nil}
  /// Clears the value of `verificationCount`. Subsequent reads from it will return its default value.
  mutating func clearVerificationCount() {_uniqueStorage()._verificationCount = nil}

  var numPrestiges: Double {
    get {return _storage._numPrestiges ?? 0}
    set {_uniqueStorage()._numPrestiges = newValue}
  }
  /// Returns true if `numPrestiges` has been explicitly set.
  var hasNumPrestiges: Bool {return _storage._numPrestiges != nil}
  /// Clears the value of `numPrestiges`. Subsequent reads from it will return its default value.
  mutating func clearNumPrestiges() {_uniqueStorage()._numPrestiges = nil}

  var soulEggs: Double {
    get {return _storage._soulEggs ?? 0}
    set {_uniqueStorage()._soulEggs = newValue}
  }
  /// Returns true if `soulEggs` has been explicitly set.
  var hasSoulEggs: Bool {return _storage._soulEggs != nil}
  /// Clears the value of `soulEggs`. Subsequent reads from it will return its default value.
  mutating func clearSoulEggs() {_uniqueStorage()._soulEggs = nil}

  var eggsOfProphecy: UInt32 {
    get {return _storage._eggsOfProphecy ?? 0}
    set {_uniqueStorage()._eggsOfProphecy = newValue}
  }
  /// Returns true if `eggsOfProphecy` has been explicitly set.
  var hasEggsOfProphecy: Bool {return _storage._eggsOfProphecy != nil}
  /// Clears the value of `eggsOfProphecy`. Subsequent reads from it will return its default value.
  mutating func clearEggsOfProphecy() {_uniqueStorage()._eggsOfProphecy = nil}

  var iapStatus: Ei_UserVerificationAnalysis.Status {
    get {return _storage._iapStatus ?? .unknown}
    set {_uniqueStorage()._iapStatus = newValue}
  }
  /// Returns true if `iapStatus` has been explicitly set.
  var hasIapStatus: Bool {return _storage._iapStatus != nil}
  /// Clears the value of `iapStatus`. Subsequent reads from it will return its default value.
  mutating func clearIapStatus() {_uniqueStorage()._iapStatus = nil}

  var verifiedProPermit: Bool {
    get {return _storage._verifiedProPermit ?? false}
    set {_uniqueStorage()._verifiedProPermit = newValue}
  }
  /// Returns true if `verifiedProPermit` has been explicitly set.
  var hasVerifiedProPermit: Bool {return _storage._verifiedProPermit != nil}
  /// Clears the value of `verifiedProPermit`. Subsequent reads from it will return its default value.
  mutating func clearVerifiedProPermit() {_uniqueStorage()._verifiedProPermit = nil}

  var verifiedPiggyBreaks: UInt32 {
    get {return _storage._verifiedPiggyBreaks ?? 0}
    set {_uniqueStorage()._verifiedPiggyBreaks = newValue}
  }
  /// Returns true if `verifiedPiggyBreaks` has been explicitly set.
  var hasVerifiedPiggyBreaks: Bool {return _storage._verifiedPiggyBreaks != nil}
  /// Clears the value of `verifiedPiggyBreaks`. Subsequent reads from it will return its default value.
  mutating func clearVerifiedPiggyBreaks() {_uniqueStorage()._verifiedPiggyBreaks = nil}

  var verifiedOtherIap: UInt32 {
    get {return _storage._verifiedOtherIap ?? 0}
    set {_uniqueStorage()._verifiedOtherIap = newValue}
  }
  /// Returns true if `verifiedOtherIap` has been explicitly set.
  var hasVerifiedOtherIap: Bool {return _storage._verifiedOtherIap != nil}
  /// Clears the value of `verifiedOtherIap`. Subsequent reads from it will return its default value.
  mutating func clearVerifiedOtherIap() {_uniqueStorage()._verifiedOtherIap = nil}

  var unverifiedIap: UInt32 {
    get {return _storage._unverifiedIap ?? 0}
    set {_uniqueStorage()._unverifiedIap = newValue}
  }
  /// Returns true if `unverifiedIap` has been explicitly set.
  var hasUnverifiedIap: Bool {return _storage._unverifiedIap != nil}
  /// Clears the value of `unverifiedIap`. Subsequent reads from it will return its default value.
  mutating func clearUnverifiedIap() {_uniqueStorage()._unverifiedIap = nil}

  var goldEarned: Double {
    get {return _storage._goldEarned ?? 0}
    set {_uniqueStorage()._goldEarned = newValue}
  }
  /// Returns true if `goldEarned` has been explicitly set.
  var hasGoldEarned: Bool {return _storage._goldEarned != nil}
  /// Clears the value of `goldEarned`. Subsequent reads from it will return its default value.
  mutating func clearGoldEarned() {_uniqueStorage()._goldEarned = nil}

  var regularIapBuyer: Bool {
    get {return _storage._regularIapBuyer ?? false}
    set {_uniqueStorage()._regularIapBuyer = newValue}
  }
  /// Returns true if `regularIapBuyer` has been explicitly set.
  var hasRegularIapBuyer: Bool {return _storage._regularIapBuyer != nil}
  /// Clears the value of `regularIapBuyer`. Subsequent reads from it will return its default value.
  mutating func clearRegularIapBuyer() {_uniqueStorage()._regularIapBuyer = nil}

  var regularIapCheater: Bool {
    get {return _storage._regularIapCheater ?? false}
    set {_uniqueStorage()._regularIapCheater = newValue}
  }
  /// Returns true if `regularIapCheater` has been explicitly set.
  var hasRegularIapCheater: Bool {return _storage._regularIapCheater != nil}
  /// Clears the value of `regularIapCheater`. Subsequent reads from it will return its default value.
  mutating func clearRegularIapCheater() {_uniqueStorage()._regularIapCheater = nil}

  var artifactsStatus: Ei_UserVerificationAnalysis.Status {
    get {return _storage._artifactsStatus ?? .unknown}
    set {_uniqueStorage()._artifactsStatus = newValue}
  }
  /// Returns true if `artifactsStatus` has been explicitly set.
  var hasArtifactsStatus: Bool {return _storage._artifactsStatus != nil}
  /// Clears the value of `artifactsStatus`. Subsequent reads from it will return its default value.
  mutating func clearArtifactsStatus() {_uniqueStorage()._artifactsStatus = nil}

  var missionsCompleted: UInt32 {
    get {return _storage._missionsCompleted ?? 0}
    set {_uniqueStorage()._missionsCompleted = newValue}
  }
  /// Returns true if `missionsCompleted` has been explicitly set.
  var hasMissionsCompleted: Bool {return _storage._missionsCompleted != nil}
  /// Clears the value of `missionsCompleted`. Subsequent reads from it will return its default value.
  mutating func clearMissionsCompleted() {_uniqueStorage()._missionsCompleted = nil}

  var artifactsCollected: Double {
    get {return _storage._artifactsCollected ?? 0}
    set {_uniqueStorage()._artifactsCollected = newValue}
  }
  /// Returns true if `artifactsCollected` has been explicitly set.
  var hasArtifactsCollected: Bool {return _storage._artifactsCollected != nil}
  /// Clears the value of `artifactsCollected`. Subsequent reads from it will return its default value.
  mutating func clearArtifactsCollected() {_uniqueStorage()._artifactsCollected = nil}

  var artifactsConsumed: Double {
    get {return _storage._artifactsConsumed ?? 0}
    set {_uniqueStorage()._artifactsConsumed = newValue}
  }
  /// Returns true if `artifactsConsumed` has been explicitly set.
  var hasArtifactsConsumed: Bool {return _storage._artifactsConsumed != nil}
  /// Clears the value of `artifactsConsumed`. Subsequent reads from it will return its default value.
  mutating func clearArtifactsConsumed() {_uniqueStorage()._artifactsConsumed = nil}

  var artifactsInInventory: Double {
    get {return _storage._artifactsInInventory ?? 0}
    set {_uniqueStorage()._artifactsInInventory = newValue}
  }
  /// Returns true if `artifactsInInventory` has been explicitly set.
  var hasArtifactsInInventory: Bool {return _storage._artifactsInInventory != nil}
  /// Clears the value of `artifactsInInventory`. Subsequent reads from it will return its default value.
  mutating func clearArtifactsInInventory() {_uniqueStorage()._artifactsInInventory = nil}

  var rareArtifactsInInventory: UInt64 {
    get {return _storage._rareArtifactsInInventory ?? 0}
    set {_uniqueStorage()._rareArtifactsInInventory = newValue}
  }
  /// Returns true if `rareArtifactsInInventory` has been explicitly set.
  var hasRareArtifactsInInventory: Bool {return _storage._rareArtifactsInInventory != nil}
  /// Clears the value of `rareArtifactsInInventory`. Subsequent reads from it will return its default value.
  mutating func clearRareArtifactsInInventory() {_uniqueStorage()._rareArtifactsInInventory = nil}

  var rareArtifactsOnServer: UInt64 {
    get {return _storage._rareArtifactsOnServer ?? 0}
    set {_uniqueStorage()._rareArtifactsOnServer = newValue}
  }
  /// Returns true if `rareArtifactsOnServer` has been explicitly set.
  var hasRareArtifactsOnServer: Bool {return _storage._rareArtifactsOnServer != nil}
  /// Clears the value of `rareArtifactsOnServer`. Subsequent reads from it will return its default value.
  mutating func clearRareArtifactsOnServer() {_uniqueStorage()._rareArtifactsOnServer = nil}

  var legendaryArtifactsInInventory: UInt64 {
    get {return _storage._legendaryArtifactsInInventory ?? 0}
    set {_uniqueStorage()._legendaryArtifactsInInventory = newValue}
  }
  /// Returns true if `legendaryArtifactsInInventory` has been explicitly set.
  var hasLegendaryArtifactsInInventory: Bool {return _storage._legendaryArtifactsInInventory != nil}
  /// Clears the value of `legendaryArtifactsInInventory`. Subsequent reads from it will return its default value.
  mutating func clearLegendaryArtifactsInInventory() {_uniqueStorage()._legendaryArtifactsInInventory = nil}

  var legendaryArtifactsOnServer: UInt64 {
    get {return _storage._legendaryArtifactsOnServer ?? 0}
    set {_uniqueStorage()._legendaryArtifactsOnServer = newValue}
  }
  /// Returns true if `legendaryArtifactsOnServer` has been explicitly set.
  var hasLegendaryArtifactsOnServer: Bool {return _storage._legendaryArtifactsOnServer != nil}
  /// Clears the value of `legendaryArtifactsOnServer`. Subsequent reads from it will return its default value.
  mutating func clearLegendaryArtifactsOnServer() {_uniqueStorage()._legendaryArtifactsOnServer = nil}

  var goldSpentCrafting: Double {
    get {return _storage._goldSpentCrafting ?? 0}
    set {_uniqueStorage()._goldSpentCrafting = newValue}
  }
  /// Returns true if `goldSpentCrafting` has been explicitly set.
  var hasGoldSpentCrafting: Bool {return _storage._goldSpentCrafting != nil}
  /// Clears the value of `goldSpentCrafting`. Subsequent reads from it will return its default value.
  mutating func clearGoldSpentCrafting() {_uniqueStorage()._goldSpentCrafting = nil}

  var excessiveConsumes: Bool {
    get {return _storage._excessiveConsumes ?? false}
    set {_uniqueStorage()._excessiveConsumes = newValue}
  }
  /// Returns true if `excessiveConsumes` has been explicitly set.
  var hasExcessiveConsumes: Bool {return _storage._excessiveConsumes != nil}
  /// Clears the value of `excessiveConsumes`. Subsequent reads from it will return its default value.
  mutating func clearExcessiveConsumes() {_uniqueStorage()._excessiveConsumes = nil}

  var excessiveInventory: Bool {
    get {return _storage._excessiveInventory ?? false}
    set {_uniqueStorage()._excessiveInventory = newValue}
  }
  /// Returns true if `excessiveInventory` has been explicitly set.
  var hasExcessiveInventory: Bool {return _storage._excessiveInventory != nil}
  /// Clears the value of `excessiveInventory`. Subsequent reads from it will return its default value.
  mutating func clearExcessiveInventory() {_uniqueStorage()._excessiveInventory = nil}

  var excessiveSpend: Bool {
    get {return _storage._excessiveSpend ?? false}
    set {_uniqueStorage()._excessiveSpend = newValue}
  }
  /// Returns true if `excessiveSpend` has been explicitly set.
  var hasExcessiveSpend: Bool {return _storage._excessiveSpend != nil}
  /// Clears the value of `excessiveSpend`. Subsequent reads from it will return its default value.
  mutating func clearExcessiveSpend() {_uniqueStorage()._excessiveSpend = nil}

  var contractsStatus: Ei_UserVerificationAnalysis.Status {
    get {return _storage._contractsStatus ?? .unknown}
    set {_uniqueStorage()._contractsStatus = newValue}
  }
  /// Returns true if `contractsStatus` has been explicitly set.
  var hasContractsStatus: Bool {return _storage._contractsStatus != nil}
  /// Clears the value of `contractsStatus`. Subsequent reads from it will return its default value.
  mutating func clearContractsStatus() {_uniqueStorage()._contractsStatus = nil}

  var numCoopMemberships: UInt32 {
    get {return _storage._numCoopMemberships ?? 0}
    set {_uniqueStorage()._numCoopMemberships = newValue}
  }
  /// Returns true if `numCoopMemberships` has been explicitly set.
  var hasNumCoopMemberships: Bool {return _storage._numCoopMemberships != nil}
  /// Clears the value of `numCoopMemberships`. Subsequent reads from it will return its default value.
  mutating func clearNumCoopMemberships() {_uniqueStorage()._numCoopMemberships = nil}

  var validContracts: UInt32 {
    get {return _storage._validContracts ?? 0}
    set {_uniqueStorage()._validContracts = newValue}
  }
  /// Returns true if `validContracts` has been explicitly set.
  var hasValidContracts: Bool {return _storage._validContracts != nil}
  /// Clears the value of `validContracts`. Subsequent reads from it will return its default value.
  mutating func clearValidContracts() {_uniqueStorage()._validContracts = nil}

  var invalidContracts: [String] {
    get {return _storage._invalidContracts}
    set {_uniqueStorage()._invalidContracts = newValue}
  }

  var excessiveEop: Bool {
    get {return _storage._excessiveEop ?? false}
    set {_uniqueStorage()._excessiveEop = newValue}
  }
  /// Returns true if `excessiveEop` has been explicitly set.
  var hasExcessiveEop: Bool {return _storage._excessiveEop != nil}
  /// Clears the value of `excessiveEop`. Subsequent reads from it will return its default value.
  mutating func clearExcessiveEop() {_uniqueStorage()._excessiveEop = nil}

  var excessiveInvalidContracts: Bool {
    get {return _storage._excessiveInvalidContracts ?? false}
    set {_uniqueStorage()._excessiveInvalidContracts = newValue}
  }
  /// Returns true if `excessiveInvalidContracts` has been explicitly set.
  var hasExcessiveInvalidContracts: Bool {return _storage._excessiveInvalidContracts != nil}
  /// Clears the value of `excessiveInvalidContracts`. Subsequent reads from it will return its default value.
  mutating func clearExcessiveInvalidContracts() {_uniqueStorage()._excessiveInvalidContracts = nil}

  var verified: Bool {
    get {return _storage._verified ?? false}
    set {_uniqueStorage()._verified = newValue}
  }
  /// Returns true if `verified` has been explicitly set.
  var hasVerified: Bool {return _storage._verified != nil}
  /// Clears the value of `verified`. Subsequent reads from it will return its default value.
  mutating func clearVerified() {_uniqueStorage()._verified = nil}

  var verificationOverride: Bool {
    get {return _storage._verificationOverride ?? false}
    set {_uniqueStorage()._verificationOverride = newValue}
  }
  /// Returns true if `verificationOverride` has been explicitly set.
  var hasVerificationOverride: Bool {return _storage._verificationOverride != nil}
  /// Clears the value of `verificationOverride`. Subsequent reads from it will return its default value.
  mutating func clearVerificationOverride() {_uniqueStorage()._verificationOverride = nil}

  var verificationOverrideValue: Bool {
    get {return _storage._verificationOverrideValue ?? false}
    set {_uniqueStorage()._verificationOverrideValue = newValue}
  }
  /// Returns true if `verificationOverrideValue` has been explicitly set.
  var hasVerificationOverrideValue: Bool {return _storage._verificationOverrideValue != nil}
  /// Clears the value of `verificationOverrideValue`. Subsequent reads from it will return its default value.
  mutating func clearVerificationOverrideValue() {_uniqueStorage()._verificationOverrideValue = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unknown = 0
    case processing = 1
    case complete = 2

    init() {
      self = .unknown
    }

  }

  init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

struct Ei_UserSubscriptionInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var subscriptionLevel: Ei_UserSubscriptionInfo.Level {
    get {return _subscriptionLevel ?? .standard}
    set {_subscriptionLevel = newValue}
  }
  /// Returns true if `subscriptionLevel` has been explicitly set.
  var hasSubscriptionLevel: Bool {return self._subscriptionLevel != nil}
  /// Clears the value of `subscriptionLevel`. Subsequent reads from it will return its default value.
  mutating func clearSubscriptionLevel() {self._subscriptionLevel = nil}

  var nextSubscriptionLevel: Ei_UserSubscriptionInfo.Level {
    get {return _nextSubscriptionLevel ?? .standard}
    set {_nextSubscriptionLevel = newValue}
  }
  /// Returns true if `nextSubscriptionLevel` has been explicitly set.
  var hasNextSubscriptionLevel: Bool {return self._nextSubscriptionLevel != nil}
  /// Clears the value of `nextSubscriptionLevel`. Subsequent reads from it will return its default value.
  mutating func clearNextSubscriptionLevel() {self._nextSubscriptionLevel = nil}

  var lockNextSubscriptionLevel: Bool {
    get {return _lockNextSubscriptionLevel ?? false}
    set {_lockNextSubscriptionLevel = newValue}
  }
  /// Returns true if `lockNextSubscriptionLevel` has been explicitly set.
  var hasLockNextSubscriptionLevel: Bool {return self._lockNextSubscriptionLevel != nil}
  /// Clears the value of `lockNextSubscriptionLevel`. Subsequent reads from it will return its default value.
  mutating func clearLockNextSubscriptionLevel() {self._lockNextSubscriptionLevel = nil}

  var platform: Ei_Platform {
    get {return _platform ?? .unknownPlatform}
    set {_platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  var hasPlatform: Bool {return self._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  mutating func clearPlatform() {self._platform = nil}

  var originalTransactionID: String {
    get {return _originalTransactionID ?? String()}
    set {_originalTransactionID = newValue}
  }
  /// Returns true if `originalTransactionID` has been explicitly set.
  var hasOriginalTransactionID: Bool {return self._originalTransactionID != nil}
  /// Clears the value of `originalTransactionID`. Subsequent reads from it will return its default value.
  mutating func clearOriginalTransactionID() {self._originalTransactionID = nil}

  var linkedTransactionID: String {
    get {return _linkedTransactionID ?? String()}
    set {_linkedTransactionID = newValue}
  }
  /// Returns true if `linkedTransactionID` has been explicitly set.
  var hasLinkedTransactionID: Bool {return self._linkedTransactionID != nil}
  /// Clears the value of `linkedTransactionID`. Subsequent reads from it will return its default value.
  mutating func clearLinkedTransactionID() {self._linkedTransactionID = nil}

  var acknowledged: Bool {
    get {return _acknowledged ?? false}
    set {_acknowledged = newValue}
  }
  /// Returns true if `acknowledged` has been explicitly set.
  var hasAcknowledged: Bool {return self._acknowledged != nil}
  /// Clears the value of `acknowledged`. Subsequent reads from it will return its default value.
  mutating func clearAcknowledged() {self._acknowledged = nil}

  var firstSubscribed: Double {
    get {return _firstSubscribed ?? 0}
    set {_firstSubscribed = newValue}
  }
  /// Returns true if `firstSubscribed` has been explicitly set.
  var hasFirstSubscribed: Bool {return self._firstSubscribed != nil}
  /// Clears the value of `firstSubscribed`. Subsequent reads from it will return its default value.
  mutating func clearFirstSubscribed() {self._firstSubscribed = nil}

  var periodEnd: Double {
    get {return _periodEnd ?? 0}
    set {_periodEnd = newValue}
  }
  /// Returns true if `periodEnd` has been explicitly set.
  var hasPeriodEnd: Bool {return self._periodEnd != nil}
  /// Clears the value of `periodEnd`. Subsequent reads from it will return its default value.
  mutating func clearPeriodEnd() {self._periodEnd = nil}

  var status: Ei_UserSubscriptionInfo.Status {
    get {return _status ?? .unknown}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var storeStatus: String {
    get {return _storeStatus ?? String()}
    set {_storeStatus = newValue}
  }
  /// Returns true if `storeStatus` has been explicitly set.
  var hasStoreStatus: Bool {return self._storeStatus != nil}
  /// Clears the value of `storeStatus`. Subsequent reads from it will return its default value.
  mutating func clearStoreStatus() {self._storeStatus = nil}

  var autoRenew: Bool {
    get {return _autoRenew ?? false}
    set {_autoRenew = newValue}
  }
  /// Returns true if `autoRenew` has been explicitly set.
  var hasAutoRenew: Bool {return self._autoRenew != nil}
  /// Clears the value of `autoRenew`. Subsequent reads from it will return its default value.
  mutating func clearAutoRenew() {self._autoRenew = nil}

  var sandbox: Bool {
    get {return _sandbox ?? false}
    set {_sandbox = newValue}
  }
  /// Returns true if `sandbox` has been explicitly set.
  var hasSandbox: Bool {return self._sandbox != nil}
  /// Clears the value of `sandbox`. Subsequent reads from it will return its default value.
  mutating func clearSandbox() {self._sandbox = nil}

  var lastUpdated: Double {
    get {return _lastUpdated ?? 0}
    set {_lastUpdated = newValue}
  }
  /// Returns true if `lastUpdated` has been explicitly set.
  var hasLastUpdated: Bool {return self._lastUpdated != nil}
  /// Clears the value of `lastUpdated`. Subsequent reads from it will return its default value.
  mutating func clearLastUpdated() {self._lastUpdated = nil}

  var history: [Ei_UserSubscriptionInfo.HistoryEntry] = []

  var pastUserIds: [String] = []

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Level: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case standard = 0
    case pro = 1

    init() {
      self = .standard
    }

  }

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case unknown = 0
    case active = 1
    case expired = 2
    case revoked = 3
    case gracePeriod = 4
    case pauseHold = 5

    init() {
      self = .unknown
    }

  }

  struct HistoryEntry: Sendable {
    // SwiftProtobuf.Message conformance is added in an extension below. See the
    // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
    // methods supported on all messages.

    var timestamp: Double {
      get {return _timestamp ?? 0}
      set {_timestamp = newValue}
    }
    /// Returns true if `timestamp` has been explicitly set.
    var hasTimestamp: Bool {return self._timestamp != nil}
    /// Clears the value of `timestamp`. Subsequent reads from it will return its default value.
    mutating func clearTimestamp() {self._timestamp = nil}

    var messageID: String {
      get {return _messageID ?? String()}
      set {_messageID = newValue}
    }
    /// Returns true if `messageID` has been explicitly set.
    var hasMessageID: Bool {return self._messageID != nil}
    /// Clears the value of `messageID`. Subsequent reads from it will return its default value.
    mutating func clearMessageID() {self._messageID = nil}

    var message: String {
      get {return _message ?? String()}
      set {_message = newValue}
    }
    /// Returns true if `message` has been explicitly set.
    var hasMessage: Bool {return self._message != nil}
    /// Clears the value of `message`. Subsequent reads from it will return its default value.
    mutating func clearMessage() {self._message = nil}

    var unknownFields = SwiftProtobuf.UnknownStorage()

    init() {}

    fileprivate var _timestamp: Double? = nil
    fileprivate var _messageID: String? = nil
    fileprivate var _message: String? = nil
  }

  init() {}

  fileprivate var _subscriptionLevel: Ei_UserSubscriptionInfo.Level? = nil
  fileprivate var _nextSubscriptionLevel: Ei_UserSubscriptionInfo.Level? = nil
  fileprivate var _lockNextSubscriptionLevel: Bool? = nil
  fileprivate var _platform: Ei_Platform? = nil
  fileprivate var _originalTransactionID: String? = nil
  fileprivate var _linkedTransactionID: String? = nil
  fileprivate var _acknowledged: Bool? = nil
  fileprivate var _firstSubscribed: Double? = nil
  fileprivate var _periodEnd: Double? = nil
  fileprivate var _status: Ei_UserSubscriptionInfo.Status? = nil
  fileprivate var _storeStatus: String? = nil
  fileprivate var _autoRenew: Bool? = nil
  fileprivate var _sandbox: Bool? = nil
  fileprivate var _lastUpdated: Double? = nil
}

struct Ei_SubscriptionChangeHintRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var originalTransactionID: String {
    get {return _originalTransactionID ?? String()}
    set {_originalTransactionID = newValue}
  }
  /// Returns true if `originalTransactionID` has been explicitly set.
  var hasOriginalTransactionID: Bool {return self._originalTransactionID != nil}
  /// Clears the value of `originalTransactionID`. Subsequent reads from it will return its default value.
  mutating func clearOriginalTransactionID() {self._originalTransactionID = nil}

  var nextSubscriptionLevel: Ei_UserSubscriptionInfo.Level {
    get {return _nextSubscriptionLevel ?? .standard}
    set {_nextSubscriptionLevel = newValue}
  }
  /// Returns true if `nextSubscriptionLevel` has been explicitly set.
  var hasNextSubscriptionLevel: Bool {return self._nextSubscriptionLevel != nil}
  /// Clears the value of `nextSubscriptionLevel`. Subsequent reads from it will return its default value.
  mutating func clearNextSubscriptionLevel() {self._nextSubscriptionLevel = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _originalTransactionID: String? = nil
  fileprivate var _nextSubscriptionLevel: Ei_UserSubscriptionInfo.Level? = nil
}

struct Ei_CXPEvalRolloutInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var currentID: String {
    get {return _currentID ?? String()}
    set {_currentID = newValue}
  }
  /// Returns true if `currentID` has been explicitly set.
  var hasCurrentID: Bool {return self._currentID != nil}
  /// Clears the value of `currentID`. Subsequent reads from it will return its default value.
  mutating func clearCurrentID() {self._currentID = nil}

  var basisPoints: UInt32 {
    get {return _basisPoints ?? 0}
    set {_basisPoints = newValue}
  }
  /// Returns true if `basisPoints` has been explicitly set.
  var hasBasisPoints: Bool {return self._basisPoints != nil}
  /// Clears the value of `basisPoints`. Subsequent reads from it will return its default value.
  mutating func clearBasisPoints() {self._basisPoints = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _currentID: String? = nil
  fileprivate var _basisPoints: UInt32? = nil
}

struct Ei_PathOfVirtueInfo: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var serverTime: Double {
    get {return _serverTime ?? 0}
    set {_serverTime = newValue}
  }
  /// Returns true if `serverTime` has been explicitly set.
  var hasServerTime: Bool {return self._serverTime != nil}
  /// Clears the value of `serverTime`. Subsequent reads from it will return its default value.
  mutating func clearServerTime() {self._serverTime = nil}

  var simTime: Double {
    get {return _simTime ?? 0}
    set {_simTime = newValue}
  }
  /// Returns true if `simTime` has been explicitly set.
  var hasSimTime: Bool {return self._simTime != nil}
  /// Clears the value of `simTime`. Subsequent reads from it will return its default value.
  mutating func clearSimTime() {self._simTime = nil}

  var resetIndex: UInt32 {
    get {return _resetIndex ?? 0}
    set {_resetIndex = newValue}
  }
  /// Returns true if `resetIndex` has been explicitly set.
  var hasResetIndex: Bool {return self._resetIndex != nil}
  /// Clears the value of `resetIndex`. Subsequent reads from it will return its default value.
  mutating func clearResetIndex() {self._resetIndex = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _serverTime: Double? = nil
  fileprivate var _simTime: Double? = nil
  fileprivate var _resetIndex: UInt32? = nil
}

struct Ei_SyncPathOfVirtueRequest: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var rinfo: Ei_BasicRequestInfo {
    get {return _rinfo ?? Ei_BasicRequestInfo()}
    set {_rinfo = newValue}
  }
  /// Returns true if `rinfo` has been explicitly set.
  var hasRinfo: Bool {return self._rinfo != nil}
  /// Clears the value of `rinfo`. Subsequent reads from it will return its default value.
  mutating func clearRinfo() {self._rinfo = nil}

  var resetIndex: UInt32 {
    get {return _resetIndex ?? 0}
    set {_resetIndex = newValue}
  }
  /// Returns true if `resetIndex` has been explicitly set.
  var hasResetIndex: Bool {return self._resetIndex != nil}
  /// Clears the value of `resetIndex`. Subsequent reads from it will return its default value.
  mutating func clearResetIndex() {self._resetIndex = nil}

  var simTime: Double {
    get {return _simTime ?? 0}
    set {_simTime = newValue}
  }
  /// Returns true if `simTime` has been explicitly set.
  var hasSimTime: Bool {return self._simTime != nil}
  /// Clears the value of `simTime`. Subsequent reads from it will return its default value.
  mutating func clearSimTime() {self._simTime = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _rinfo: Ei_BasicRequestInfo? = nil
  fileprivate var _resetIndex: UInt32? = nil
  fileprivate var _simTime: Double? = nil
}

struct Ei_SyncPathOfVirtueResponse: Sendable {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  var status: Ei_SyncPathOfVirtueResponse.Status {
    get {return _status ?? .ok}
    set {_status = newValue}
  }
  /// Returns true if `status` has been explicitly set.
  var hasStatus: Bool {return self._status != nil}
  /// Clears the value of `status`. Subsequent reads from it will return its default value.
  mutating func clearStatus() {self._status = nil}

  var simDebt: Double {
    get {return _simDebt ?? 0}
    set {_simDebt = newValue}
  }
  /// Returns true if `simDebt` has been explicitly set.
  var hasSimDebt: Bool {return self._simDebt != nil}
  /// Clears the value of `simDebt`. Subsequent reads from it will return its default value.
  mutating func clearSimDebt() {self._simDebt = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  enum Status: Int, SwiftProtobuf.Enum, Swift.CaseIterable {
    case ok = 0
    case problem = 1

    init() {
      self = .ok
    }

  }

  init() {}

  fileprivate var _status: Ei_SyncPathOfVirtueResponse.Status? = nil
  fileprivate var _simDebt: Double? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "ei"

extension Ei_Platform: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN_PLATFORM\0\u{1}IOS\0\u{1}DROID\0")
}

extension Ei_DeviceFormFactor: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN_DEVICE\0\u{1}PHONE\0\u{1}TABLET\0")
}

extension Ei_AdNetwork: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0VUNGLE\0\u{1}CHARTBOOST\0\u{1}AD_COLONY\0\u{1}HYPER_MX\0\u{1}UNITY\0\u{1}FACEBOOK\0\u{1}APPLOVIN\0")
}

extension Ei_Egg: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}EDIBLE\0\u{1}SUPERFOOD\0\u{1}MEDICAL\0\u{1}ROCKET_FUEL\0\u{1}SUPER_MATERIAL\0\u{1}FUSION\0\u{1}QUANTUM\0\u{1}IMMORTALITY\0\u{1}TACHYON\0\u{1}GRAVITON\0\u{1}DILITHIUM\0\u{1}PRODIGY\0\u{1}TERRAFORM\0\u{1}ANTIMATTER\0\u{1}DARK_MATTER\0\u{1}AI\0\u{1}NEBULA\0\u{1}UNIVERSE\0\u{1}ENLIGHTENMENT\0\u{2}\u{1f}CURIOSITY\0\u{1}INTEGRITY\0\u{1}HUMILITY\0\u{1}RESILIENCE\0\u{1}KINDNESS\0\u{2}.CHOCOLATE\0\u{1}EASTER\0\u{1}WATERBALLOON\0\u{1}FIREWORK\0\u{1}PUMPKIN\0\u{2}`\u{1}CUSTOM_EGG\0\u{2}`\u{c}UNKNOWN\0")
}

extension Ei_FarmType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}EMPTY\0\u{1}HOME\0\u{1}CONTRACT\0")
}

extension Ei_GoalType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}EGGS_LAID\0\u{2}c\u{1}UNKNOWN_GOAL\0")
}

extension Ei_RewardType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}CASH\0\u{1}GOLD\0\u{1}SOUL_EGGS\0\u{1}EGGS_OF_PROPHECY\0\u{1}EPIC_RESEARCH_ITEM\0\u{1}PIGGY_FILL\0\u{1}PIGGY_MULTIPLIER\0\u{1}PIGGY_LEVEL_BUMP\0\u{1}BOOST\0\u{1}BOOST_TOKEN\0\u{1}ARTIFACT\0\u{1}ARTIFACT_CASE\0\u{1}CHICKEN\0\u{1}SHELL_SCRIPT\0\u{1}VIRTUE_GEM\0\u{2}U\u{1}UNKNOWN_REWARD\0")
}

extension Ei_UILocation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NONE\0\u{1}SHOP\0\u{1}BOOST_SHOP\0\u{1}PIGGY\0\u{1}PRO_PERMIT\0\u{1}SHELLS\0\u{1}SHELL_SETS\0\u{1}CHICKENS\0\u{1}EPIC_RESEARCH\0\u{1}SETTINGS\0\u{1}ULTRA_SHOP\0\u{1}CHICKEN_HATS\0\u{1}SHELLS_SHOWCASE\0\u{1}HELP\0\u{1}UNIVERSITY\0")
}

extension Ei_UserType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ALL_USERS\0\u{1}CONTRACTS_UNLOCKED\0\u{2}\u{2}ARTIFACTS_UNLOCKED\0\u{1}FUEL_TANK_UNLOCKED\0\u{1}PRO_PERMIT_ACTIVE\0\u{1}ULTRA_ACTIVE\0\u{1}NO_PRO_PERMIT\0\u{1}NO_ULTRA\0\u{1}CONTRACTS_INACTIVE\0\u{1}CONTRACTS_ACTIVE\0\u{1}PLAYING_CONTRACT\0\u{1}ARTIFACTS_INACTIVE\0\u{1}ARTIFACTS_ACTIVE\0\u{1}PRESTIGE_READY\0\u{1}EGGED_UP\0\u{1}PIGGY_HESITANT\0")
}

extension Ei_LeaderboardScope: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ALL_TIME\0\u{1}CURRENT_SEASON\0")
}

extension Ei_Vector3: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vector3"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}x\0\u{1}y\0\u{1}z\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._x) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._y) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._z) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._x {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._y {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._z {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Vector3, rhs: Ei_Vector3) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Vector4: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Vector4"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}x\0\u{1}y\0\u{1}z\0\u{1}w\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularFloatField(value: &self._x) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._y) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._z) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._w) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._x {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._y {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._z {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._w {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Vector4, rhs: Ei_Vector4) -> Bool {
    if lhs._x != rhs._x {return false}
    if lhs._y != rhs._y {return false}
    if lhs._z != rhs._z {return false}
    if lhs._w != rhs._w {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Backup"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}user_name\0\u{3}approx_time\0\u{1}settings\0\u{1}tutorial\0\u{1}stats\0\u{1}game\0\u{1}sim\0\u{1}mission\0\u{1}misc\0\u{2}\u{2}farms\0\u{1}contracts\0\u{1}artifacts\0\u{3}artifacts_db\0\u{3}game_services_id\0\u{3}device_id\0\u{3}ei_user_id\0\u{4}\u{2}force_offer_backup\0\u{1}version\0\u{3}force_backup\0\u{3}read_mail_ids\0\u{3}shell_db\0\u{1}shells\0\u{3}push_user_id\0\u{3}mail_state\0\u{2}\u{2}virtue\0\u{2}G\u{1}checksum\0\u{1}signature\0")

  fileprivate class _StorageClass {
    var _userID: String? = nil
    var _eiUserID: String? = nil
    var _gameServicesID: String? = nil
    var _pushUserID: String? = nil
    var _deviceID: String? = nil
    var _userName: String? = nil
    var _approxTime: Double? = nil
    var _version: UInt32? = nil
    var _forceOfferBackup: Bool? = nil
    var _forceBackup: Bool? = nil
    var _settings: Ei_Backup.Settings? = nil
    var _tutorial: Ei_Backup.Tutorial? = nil
    var _stats: Ei_Backup.Stats? = nil
    var _game: Ei_Backup.Game? = nil
    var _artifacts: Ei_Backup.Artifacts? = nil
    var _virtue: Ei_Backup.Virtue? = nil
    var _shells: Ei_Backup.Shells? = nil
    var _sim: Ei_Backup.Simulation? = nil
    var _farms: [Ei_Backup.Simulation] = []
    var _mission: Ei_Backup.Mission? = nil
    var _misc: Ei_Backup.Misc? = nil
    var _contracts: Ei_MyContracts? = nil
    var _artifactsDb: Ei_ArtifactsDB? = nil
    var _shellDb: Ei_ShellDB? = nil
    var _readMailIds: [String] = []
    var _mailState: Ei_MailState? = nil
    var _checksum: UInt64? = nil
    var _signature: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _eiUserID = source._eiUserID
      _gameServicesID = source._gameServicesID
      _pushUserID = source._pushUserID
      _deviceID = source._deviceID
      _userName = source._userName
      _approxTime = source._approxTime
      _version = source._version
      _forceOfferBackup = source._forceOfferBackup
      _forceBackup = source._forceBackup
      _settings = source._settings
      _tutorial = source._tutorial
      _stats = source._stats
      _game = source._game
      _artifacts = source._artifacts
      _virtue = source._virtue
      _shells = source._shells
      _sim = source._sim
      _farms = source._farms
      _mission = source._mission
      _misc = source._misc
      _contracts = source._contracts
      _artifactsDb = source._artifactsDb
      _shellDb = source._shellDb
      _readMailIds = source._readMailIds
      _mailState = source._mailState
      _checksum = source._checksum
      _signature = source._signature
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userName) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._approxTime) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._settings) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._tutorial) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._stats) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._game) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._sim) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._mission) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._misc) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._farms) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._contracts) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._artifacts) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._artifactsDb) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._gameServicesID) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._deviceID) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._eiUserID) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._forceOfferBackup) }()
        case 21: try { try decoder.decodeSingularUInt32Field(value: &_storage._version) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._forceBackup) }()
        case 23: try { try decoder.decodeRepeatedStringField(value: &_storage._readMailIds) }()
        case 24: try { try decoder.decodeSingularMessageField(value: &_storage._shellDb) }()
        case 25: try { try decoder.decodeSingularMessageField(value: &_storage._shells) }()
        case 26: try { try decoder.decodeSingularStringField(value: &_storage._pushUserID) }()
        case 27: try { try decoder.decodeSingularMessageField(value: &_storage._mailState) }()
        case 29: try { try decoder.decodeSingularMessageField(value: &_storage._virtue) }()
        case 100: try { try decoder.decodeSingularUInt64Field(value: &_storage._checksum) }()
        case 101: try { try decoder.decodeSingularStringField(value: &_storage._signature) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._userName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._approxTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._settings {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._tutorial {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._stats {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._sim {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._mission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._misc {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      if !_storage._farms.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._farms, fieldNumber: 12)
      }
      try { if let v = _storage._contracts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._artifacts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._artifactsDb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._gameServicesID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._deviceID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._eiUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._forceOfferBackup {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._version {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._forceBackup {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      if !_storage._readMailIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._readMailIds, fieldNumber: 23)
      }
      try { if let v = _storage._shellDb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._shells {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._pushUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._mailState {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._virtue {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._checksum {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 100)
      } }()
      try { if let v = _storage._signature {
        try visitor.visitSingularStringField(value: v, fieldNumber: 101)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup, rhs: Ei_Backup) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._eiUserID != rhs_storage._eiUserID {return false}
        if _storage._gameServicesID != rhs_storage._gameServicesID {return false}
        if _storage._pushUserID != rhs_storage._pushUserID {return false}
        if _storage._deviceID != rhs_storage._deviceID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._approxTime != rhs_storage._approxTime {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._forceOfferBackup != rhs_storage._forceOfferBackup {return false}
        if _storage._forceBackup != rhs_storage._forceBackup {return false}
        if _storage._settings != rhs_storage._settings {return false}
        if _storage._tutorial != rhs_storage._tutorial {return false}
        if _storage._stats != rhs_storage._stats {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._artifacts != rhs_storage._artifacts {return false}
        if _storage._virtue != rhs_storage._virtue {return false}
        if _storage._shells != rhs_storage._shells {return false}
        if _storage._sim != rhs_storage._sim {return false}
        if _storage._farms != rhs_storage._farms {return false}
        if _storage._mission != rhs_storage._mission {return false}
        if _storage._misc != rhs_storage._misc {return false}
        if _storage._contracts != rhs_storage._contracts {return false}
        if _storage._artifactsDb != rhs_storage._artifactsDb {return false}
        if _storage._shellDb != rhs_storage._shellDb {return false}
        if _storage._readMailIds != rhs_storage._readMailIds {return false}
        if _storage._mailState != rhs_storage._mailState {return false}
        if _storage._checksum != rhs_storage._checksum {return false}
        if _storage._signature != rhs_storage._signature {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Settings: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Settings"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sfx\0\u{1}music\0\u{3}low_battery_mode\0\u{3}low_performance_mode\0\u{3}notifications_queried\0\u{3}notifications_on\0\u{3}coppa_queried\0\u{3}coppa_restricted\0\u{3}force_touch_chicken_btn\0\u{3}low_performance\0\u{3}notify_daily_gift\0\u{3}gdpr_consent_queried\0\u{3}gdpr_consent_given\0\u{3}user_ads_enabled\0\u{3}user_cloud_enabled\0\u{3}gdpr_age_restricted\0\u{3}last_day_age_queried\0\u{3}age_queried\0\u{3}age_restricted\0\u{3}data_collection_consent_queried\0\u{3}data_collection_consent_given\0\u{3}user_analytics_enabled\0\u{3}user_personalized_ads_enabled\0\u{3}last_backup_time\0\u{3}auto_stop_fueling\0\u{3}max_enabled\0\u{3}last_notification_query_time\0\u{3}hide_cc_status\0\u{3}contracts_widget_enabled\0\u{3}artifact_sparkle\0")

  fileprivate class _StorageClass {
    var _sfx: Bool? = nil
    var _music: Bool? = nil
    var _lowBatteryMode: Bool? = nil
    var _lowPerformanceMode: Bool? = nil
    var _forceTouchChickenBtn: Bool? = nil
    var _notificationsQueried: Bool? = nil
    var _lastNotificationQueryTime: Double? = nil
    var _notificationsOn: Bool? = nil
    var _notifyDailyGift: Bool? = nil
    var _lowPerformance: Bool? = nil
    var _autoStopFueling: Bool? = nil
    var _maxEnabled: Bool? = nil
    var _hideCcStatus: Bool? = nil
    var _contractsWidgetEnabled: Bool? = nil
    var _artifactSparkle: Bool? = nil
    var _lastBackupTime: Double? = nil
    var _coppaQueried: Bool? = nil
    var _coppaRestricted: Bool? = nil
    var _gdprConsentQueried: Bool? = nil
    var _gdprAgeRestricted: Bool? = nil
    var _gdprConsentGiven: Bool? = nil
    var _ageQueried: Bool? = nil
    var _ageRestricted: Bool? = nil
    var _dataCollectionConsentQueried: Bool? = nil
    var _dataCollectionConsentGiven: Bool? = nil
    var _lastDayAgeQueried: UInt32? = nil
    var _userAdsEnabled: Bool? = nil
    var _userCloudEnabled: Bool? = nil
    var _userAnalyticsEnabled: Bool? = nil
    var _userPersonalizedAdsEnabled: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sfx = source._sfx
      _music = source._music
      _lowBatteryMode = source._lowBatteryMode
      _lowPerformanceMode = source._lowPerformanceMode
      _forceTouchChickenBtn = source._forceTouchChickenBtn
      _notificationsQueried = source._notificationsQueried
      _lastNotificationQueryTime = source._lastNotificationQueryTime
      _notificationsOn = source._notificationsOn
      _notifyDailyGift = source._notifyDailyGift
      _lowPerformance = source._lowPerformance
      _autoStopFueling = source._autoStopFueling
      _maxEnabled = source._maxEnabled
      _hideCcStatus = source._hideCcStatus
      _contractsWidgetEnabled = source._contractsWidgetEnabled
      _artifactSparkle = source._artifactSparkle
      _lastBackupTime = source._lastBackupTime
      _coppaQueried = source._coppaQueried
      _coppaRestricted = source._coppaRestricted
      _gdprConsentQueried = source._gdprConsentQueried
      _gdprAgeRestricted = source._gdprAgeRestricted
      _gdprConsentGiven = source._gdprConsentGiven
      _ageQueried = source._ageQueried
      _ageRestricted = source._ageRestricted
      _dataCollectionConsentQueried = source._dataCollectionConsentQueried
      _dataCollectionConsentGiven = source._dataCollectionConsentGiven
      _lastDayAgeQueried = source._lastDayAgeQueried
      _userAdsEnabled = source._userAdsEnabled
      _userCloudEnabled = source._userCloudEnabled
      _userAnalyticsEnabled = source._userAnalyticsEnabled
      _userPersonalizedAdsEnabled = source._userPersonalizedAdsEnabled
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._sfx) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._music) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._lowBatteryMode) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._lowPerformanceMode) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._notificationsQueried) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._notificationsOn) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._coppaQueried) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._coppaRestricted) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._forceTouchChickenBtn) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._lowPerformance) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._notifyDailyGift) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._gdprConsentQueried) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._gdprConsentGiven) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._userAdsEnabled) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._userCloudEnabled) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._gdprAgeRestricted) }()
        case 17: try { try decoder.decodeSingularUInt32Field(value: &_storage._lastDayAgeQueried) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._ageQueried) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._ageRestricted) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._dataCollectionConsentQueried) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._dataCollectionConsentGiven) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._userAnalyticsEnabled) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._userPersonalizedAdsEnabled) }()
        case 24: try { try decoder.decodeSingularDoubleField(value: &_storage._lastBackupTime) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._autoStopFueling) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._maxEnabled) }()
        case 27: try { try decoder.decodeSingularDoubleField(value: &_storage._lastNotificationQueryTime) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._hideCcStatus) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._contractsWidgetEnabled) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._artifactSparkle) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._sfx {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._music {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._lowBatteryMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lowPerformanceMode {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._notificationsQueried {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._notificationsOn {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._coppaQueried {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._coppaRestricted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._forceTouchChickenBtn {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._lowPerformance {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._notifyDailyGift {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._gdprConsentQueried {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._gdprConsentGiven {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._userAdsEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._userCloudEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._gdprAgeRestricted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._lastDayAgeQueried {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._ageQueried {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._ageRestricted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._dataCollectionConsentQueried {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._dataCollectionConsentGiven {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._userAnalyticsEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._userPersonalizedAdsEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._lastBackupTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._autoStopFueling {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._maxEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._lastNotificationQueryTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._hideCcStatus {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._contractsWidgetEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._artifactSparkle {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Settings, rhs: Ei_Backup.Settings) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sfx != rhs_storage._sfx {return false}
        if _storage._music != rhs_storage._music {return false}
        if _storage._lowBatteryMode != rhs_storage._lowBatteryMode {return false}
        if _storage._lowPerformanceMode != rhs_storage._lowPerformanceMode {return false}
        if _storage._forceTouchChickenBtn != rhs_storage._forceTouchChickenBtn {return false}
        if _storage._notificationsQueried != rhs_storage._notificationsQueried {return false}
        if _storage._lastNotificationQueryTime != rhs_storage._lastNotificationQueryTime {return false}
        if _storage._notificationsOn != rhs_storage._notificationsOn {return false}
        if _storage._notifyDailyGift != rhs_storage._notifyDailyGift {return false}
        if _storage._lowPerformance != rhs_storage._lowPerformance {return false}
        if _storage._autoStopFueling != rhs_storage._autoStopFueling {return false}
        if _storage._maxEnabled != rhs_storage._maxEnabled {return false}
        if _storage._hideCcStatus != rhs_storage._hideCcStatus {return false}
        if _storage._contractsWidgetEnabled != rhs_storage._contractsWidgetEnabled {return false}
        if _storage._artifactSparkle != rhs_storage._artifactSparkle {return false}
        if _storage._lastBackupTime != rhs_storage._lastBackupTime {return false}
        if _storage._coppaQueried != rhs_storage._coppaQueried {return false}
        if _storage._coppaRestricted != rhs_storage._coppaRestricted {return false}
        if _storage._gdprConsentQueried != rhs_storage._gdprConsentQueried {return false}
        if _storage._gdprAgeRestricted != rhs_storage._gdprAgeRestricted {return false}
        if _storage._gdprConsentGiven != rhs_storage._gdprConsentGiven {return false}
        if _storage._ageQueried != rhs_storage._ageQueried {return false}
        if _storage._ageRestricted != rhs_storage._ageRestricted {return false}
        if _storage._dataCollectionConsentQueried != rhs_storage._dataCollectionConsentQueried {return false}
        if _storage._dataCollectionConsentGiven != rhs_storage._dataCollectionConsentGiven {return false}
        if _storage._lastDayAgeQueried != rhs_storage._lastDayAgeQueried {return false}
        if _storage._userAdsEnabled != rhs_storage._userAdsEnabled {return false}
        if _storage._userCloudEnabled != rhs_storage._userCloudEnabled {return false}
        if _storage._userAnalyticsEnabled != rhs_storage._userAnalyticsEnabled {return false}
        if _storage._userPersonalizedAdsEnabled != rhs_storage._userPersonalizedAdsEnabled {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Tutorial: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Tutorial"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}intro_shown\0\u{3}click_tutorial_shown\0\u{3}buy_hab_shown\0\u{3}hire_vehicle_shown\0\u{3}q_num_shown\0\u{3}s_num_shown\0\u{3}contracts_tab_shown\0\u{3}contract_info_shown\0\u{3}join_coop_shown\0\u{3}switch_farm_shown\0\u{3}tutorial_shown\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._introShown) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._clickTutorialShown) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._buyHabShown) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._hireVehicleShown) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._qNumShown) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._sNumShown) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._contractsTabShown) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._contractInfoShown) }()
      case 9: try { try decoder.decodeSingularBoolField(value: &self._joinCoopShown) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._switchFarmShown) }()
      case 11: try { try decoder.decodeRepeatedBoolField(value: &self.tutorialShown) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._introShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._clickTutorialShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._buyHabShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._hireVehicleShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._qNumShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._sNumShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._contractsTabShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._contractInfoShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._joinCoopShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._switchFarmShown {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    if !self.tutorialShown.isEmpty {
      try visitor.visitRepeatedBoolField(value: self.tutorialShown, fieldNumber: 11)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Tutorial, rhs: Ei_Backup.Tutorial) -> Bool {
    if lhs._introShown != rhs._introShown {return false}
    if lhs._clickTutorialShown != rhs._clickTutorialShown {return false}
    if lhs._buyHabShown != rhs._buyHabShown {return false}
    if lhs._hireVehicleShown != rhs._hireVehicleShown {return false}
    if lhs._qNumShown != rhs._qNumShown {return false}
    if lhs._sNumShown != rhs._sNumShown {return false}
    if lhs._contractsTabShown != rhs._contractsTabShown {return false}
    if lhs._contractInfoShown != rhs._contractInfoShown {return false}
    if lhs._joinCoopShown != rhs._joinCoopShown {return false}
    if lhs._switchFarmShown != rhs._switchFarmShown {return false}
    if lhs.tutorialShown != rhs.tutorialShown {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Stats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Stats"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}egg_totals_OLD\0\u{3}refill_uses\0\u{3}video_doubler_uses\0\u{3}warp_1_uses\0\u{3}warp_8_uses\0\u{3}drone_takedowns\0\u{3}unlimited_chickens_uses\0\u{3}egg_totals\0\u{3}num_prestiges\0\u{3}drone_takedowns_elite\0\u{3}num_piggy_breaks\0\u{3}iap_packs_purchased\0\u{3}boosts_used\0\u{3}piggy_full\0\u{3}piggy_found_full\0\u{3}time_piggy_filled_realtime\0\u{3}time_piggy_full_gametime\0\u{3}lost_piggy_increments\0")

  fileprivate class _StorageClass {
    var _eggTotalsOld: [UInt64] = []
    var _eggTotals: [Double] = []
    var _unlimitedChickensUses: UInt64? = nil
    var _refillUses: UInt64? = nil
    var _warp1Uses: UInt64? = nil
    var _warp8Uses: UInt64? = nil
    var _boostsUsed: UInt64? = nil
    var _videoDoublerUses: UInt64? = nil
    var _droneTakedowns: UInt64? = nil
    var _droneTakedownsElite: UInt64? = nil
    var _numPrestiges: UInt64? = nil
    var _numPiggyBreaks: UInt64? = nil
    var _iapPacksPurchased: UInt64? = nil
    var _piggyFull: Bool? = nil
    var _piggyFoundFull: Bool? = nil
    var _timePiggyFilledRealtime: Double? = nil
    var _timePiggyFullGametime: Double? = nil
    var _lostPiggyIncrements: UInt64? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eggTotalsOld = source._eggTotalsOld
      _eggTotals = source._eggTotals
      _unlimitedChickensUses = source._unlimitedChickensUses
      _refillUses = source._refillUses
      _warp1Uses = source._warp1Uses
      _warp8Uses = source._warp8Uses
      _boostsUsed = source._boostsUsed
      _videoDoublerUses = source._videoDoublerUses
      _droneTakedowns = source._droneTakedowns
      _droneTakedownsElite = source._droneTakedownsElite
      _numPrestiges = source._numPrestiges
      _numPiggyBreaks = source._numPiggyBreaks
      _iapPacksPurchased = source._iapPacksPurchased
      _piggyFull = source._piggyFull
      _piggyFoundFull = source._piggyFoundFull
      _timePiggyFilledRealtime = source._timePiggyFilledRealtime
      _timePiggyFullGametime = source._timePiggyFullGametime
      _lostPiggyIncrements = source._lostPiggyIncrements
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._eggTotalsOld) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._refillUses) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._videoDoublerUses) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._warp1Uses) }()
        case 5: try { try decoder.decodeSingularUInt64Field(value: &_storage._warp8Uses) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._droneTakedowns) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._unlimitedChickensUses) }()
        case 8: try { try decoder.decodeRepeatedDoubleField(value: &_storage._eggTotals) }()
        case 9: try { try decoder.decodeSingularUInt64Field(value: &_storage._numPrestiges) }()
        case 10: try { try decoder.decodeSingularUInt64Field(value: &_storage._droneTakedownsElite) }()
        case 11: try { try decoder.decodeSingularUInt64Field(value: &_storage._numPiggyBreaks) }()
        case 12: try { try decoder.decodeSingularUInt64Field(value: &_storage._iapPacksPurchased) }()
        case 13: try { try decoder.decodeSingularUInt64Field(value: &_storage._boostsUsed) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._piggyFull) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._piggyFoundFull) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._timePiggyFilledRealtime) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._timePiggyFullGametime) }()
        case 18: try { try decoder.decodeSingularUInt64Field(value: &_storage._lostPiggyIncrements) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._eggTotalsOld.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._eggTotalsOld, fieldNumber: 1)
      }
      try { if let v = _storage._refillUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._videoDoublerUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._warp1Uses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._warp8Uses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._droneTakedowns {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._unlimitedChickensUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      if !_storage._eggTotals.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._eggTotals, fieldNumber: 8)
      }
      try { if let v = _storage._numPrestiges {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._droneTakedownsElite {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._numPiggyBreaks {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._iapPacksPurchased {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._boostsUsed {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._piggyFull {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._piggyFoundFull {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._timePiggyFilledRealtime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._timePiggyFullGametime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._lostPiggyIncrements {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Stats, rhs: Ei_Backup.Stats) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eggTotalsOld != rhs_storage._eggTotalsOld {return false}
        if _storage._eggTotals != rhs_storage._eggTotals {return false}
        if _storage._unlimitedChickensUses != rhs_storage._unlimitedChickensUses {return false}
        if _storage._refillUses != rhs_storage._refillUses {return false}
        if _storage._warp1Uses != rhs_storage._warp1Uses {return false}
        if _storage._warp8Uses != rhs_storage._warp8Uses {return false}
        if _storage._boostsUsed != rhs_storage._boostsUsed {return false}
        if _storage._videoDoublerUses != rhs_storage._videoDoublerUses {return false}
        if _storage._droneTakedowns != rhs_storage._droneTakedowns {return false}
        if _storage._droneTakedownsElite != rhs_storage._droneTakedownsElite {return false}
        if _storage._numPrestiges != rhs_storage._numPrestiges {return false}
        if _storage._numPiggyBreaks != rhs_storage._numPiggyBreaks {return false}
        if _storage._iapPacksPurchased != rhs_storage._iapPacksPurchased {return false}
        if _storage._piggyFull != rhs_storage._piggyFull {return false}
        if _storage._piggyFoundFull != rhs_storage._piggyFoundFull {return false}
        if _storage._timePiggyFilledRealtime != rhs_storage._timePiggyFilledRealtime {return false}
        if _storage._timePiggyFullGametime != rhs_storage._timePiggyFullGametime {return false}
        if _storage._lostPiggyIncrements != rhs_storage._lostPiggyIncrements {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Game"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}max_egg_reached\0\u{3}golden_eggs_earned\0\u{3}golden_eggs_spent\0\u{3}soul_eggs\0\u{3}prestige_cash_earned\0\u{3}lifetime_cash_earned\0\u{3}piggy_bank\0\u{3}permit_level\0\u{3}epic_research\0\u{3}next_daily_gift_time\0\u{1}news\0\u{3}last_news_time\0\u{3}current_multiplier\0\u{3}current_multiplier_expiration\0\u{1}achievements\0\u{3}uncliamed_golden_eggs\0\u{3}unclaimed_soul_eggs\0\u{3}max_farm_size_reached\0\u{3}egg_medal_level\0\u{3}last_daily_gift_collected_day\0\u{4}\u{2}current_farm\0\u{3}eggs_of_prophecy\0\u{3}unclaimed_eggs_of_prophecy\0\u{3}long_idle_notification_set\0\u{3}long_idle_notification_threshold\0\u{3}long_idle_reward\0\u{3}num_daily_gifts_collected\0\u{3}hyperloop_station\0\u{1}boosts\0\u{3}piggy_full_alert_shown\0\u{3}total_time_cheats_detected\0\u{3}prestige_soul_boost_cash\0\u{3}soul_eggs_d\0\u{3}unclaimed_soul_eggs_d\0\u{3}force_elite_contracts\0\u{3}new_player_event_end_time\0\u{3}shell_scripts_earned\0\u{3}shell_scripts_spent\0\u{3}unclaimed_shell_scripts\0\u{3}time_cheat_debt\0")

  fileprivate class _StorageClass {
    var _currentFarm: UInt32? = nil
    var _maxEggReached: Ei_Egg? = nil
    var _goldenEggsEarned: UInt64? = nil
    var _goldenEggsSpent: UInt64? = nil
    var _uncliamedGoldenEggs: UInt64? = nil
    var _soulEggs: UInt64? = nil
    var _unclaimedSoulEggs: UInt64? = nil
    var _soulEggsD: Double? = nil
    var _unclaimedSoulEggsD: Double? = nil
    var _eggsOfProphecy: UInt64? = nil
    var _unclaimedEggsOfProphecy: UInt64? = nil
    var _shellScriptsEarned: UInt64? = nil
    var _shellScriptsSpent: UInt64? = nil
    var _unclaimedShellScripts: UInt64? = nil
    var _prestigeCashEarned: Double? = nil
    var _prestigeSoulBoostCash: Double? = nil
    var _lifetimeCashEarned: Double? = nil
    var _piggyBank: UInt64? = nil
    var _piggyFullAlertShown: Bool? = nil
    var _permitLevel: UInt32? = nil
    var _epicResearch: [Ei_Backup.ResearchItem] = []
    var _hyperloopStation: Bool? = nil
    var _nextDailyGiftTime: Double? = nil
    var _lastDailyGiftCollectedDay: UInt32? = nil
    var _numDailyGiftsCollected: UInt32? = nil
    var _news: [Ei_Backup.NewsHeadline] = []
    var _lastNewsTime: Double? = nil
    var _currentMultiplier: Double? = nil
    var _currentMultiplierExpiration: Double? = nil
    var _achievements: [Ei_Backup.AchievementInfo] = []
    var _maxFarmSizeReached: [UInt64] = []
    var _eggMedalLevel: [UInt32] = []
    var _longIdleNotificationSet: Bool? = nil
    var _longIdleNotificationThreshold: Double? = nil
    var _longIdleReward: Double? = nil
    var _boosts: [Ei_Backup.OwnedBoost] = []
    var _totalTimeCheatsDetected: UInt32? = nil
    var _forceEliteContracts: Bool? = nil
    var _newPlayerEventEndTime: Double? = nil
    var _timeCheatDebt: Double? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _currentFarm = source._currentFarm
      _maxEggReached = source._maxEggReached
      _goldenEggsEarned = source._goldenEggsEarned
      _goldenEggsSpent = source._goldenEggsSpent
      _uncliamedGoldenEggs = source._uncliamedGoldenEggs
      _soulEggs = source._soulEggs
      _unclaimedSoulEggs = source._unclaimedSoulEggs
      _soulEggsD = source._soulEggsD
      _unclaimedSoulEggsD = source._unclaimedSoulEggsD
      _eggsOfProphecy = source._eggsOfProphecy
      _unclaimedEggsOfProphecy = source._unclaimedEggsOfProphecy
      _shellScriptsEarned = source._shellScriptsEarned
      _shellScriptsSpent = source._shellScriptsSpent
      _unclaimedShellScripts = source._unclaimedShellScripts
      _prestigeCashEarned = source._prestigeCashEarned
      _prestigeSoulBoostCash = source._prestigeSoulBoostCash
      _lifetimeCashEarned = source._lifetimeCashEarned
      _piggyBank = source._piggyBank
      _piggyFullAlertShown = source._piggyFullAlertShown
      _permitLevel = source._permitLevel
      _epicResearch = source._epicResearch
      _hyperloopStation = source._hyperloopStation
      _nextDailyGiftTime = source._nextDailyGiftTime
      _lastDailyGiftCollectedDay = source._lastDailyGiftCollectedDay
      _numDailyGiftsCollected = source._numDailyGiftsCollected
      _news = source._news
      _lastNewsTime = source._lastNewsTime
      _currentMultiplier = source._currentMultiplier
      _currentMultiplierExpiration = source._currentMultiplierExpiration
      _achievements = source._achievements
      _maxFarmSizeReached = source._maxFarmSizeReached
      _eggMedalLevel = source._eggMedalLevel
      _longIdleNotificationSet = source._longIdleNotificationSet
      _longIdleNotificationThreshold = source._longIdleNotificationThreshold
      _longIdleReward = source._longIdleReward
      _boosts = source._boosts
      _totalTimeCheatsDetected = source._totalTimeCheatsDetected
      _forceEliteContracts = source._forceEliteContracts
      _newPlayerEventEndTime = source._newPlayerEventEndTime
      _timeCheatDebt = source._timeCheatDebt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._maxEggReached) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._goldenEggsEarned) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._goldenEggsSpent) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._soulEggs) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._prestigeCashEarned) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._lifetimeCashEarned) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._piggyBank) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._permitLevel) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._epicResearch) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._nextDailyGiftTime) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._news) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._lastNewsTime) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._currentMultiplier) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._currentMultiplierExpiration) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._achievements) }()
        case 16: try { try decoder.decodeSingularUInt64Field(value: &_storage._uncliamedGoldenEggs) }()
        case 17: try { try decoder.decodeSingularUInt64Field(value: &_storage._unclaimedSoulEggs) }()
        case 18: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._maxFarmSizeReached) }()
        case 19: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._eggMedalLevel) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._lastDailyGiftCollectedDay) }()
        case 22: try { try decoder.decodeSingularUInt32Field(value: &_storage._currentFarm) }()
        case 23: try { try decoder.decodeSingularUInt64Field(value: &_storage._eggsOfProphecy) }()
        case 24: try { try decoder.decodeSingularUInt64Field(value: &_storage._unclaimedEggsOfProphecy) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._longIdleNotificationSet) }()
        case 26: try { try decoder.decodeSingularDoubleField(value: &_storage._longIdleNotificationThreshold) }()
        case 27: try { try decoder.decodeSingularDoubleField(value: &_storage._longIdleReward) }()
        case 28: try { try decoder.decodeSingularUInt32Field(value: &_storage._numDailyGiftsCollected) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._hyperloopStation) }()
        case 30: try { try decoder.decodeRepeatedMessageField(value: &_storage._boosts) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._piggyFullAlertShown) }()
        case 32: try { try decoder.decodeSingularUInt32Field(value: &_storage._totalTimeCheatsDetected) }()
        case 33: try { try decoder.decodeSingularDoubleField(value: &_storage._prestigeSoulBoostCash) }()
        case 34: try { try decoder.decodeSingularDoubleField(value: &_storage._soulEggsD) }()
        case 35: try { try decoder.decodeSingularDoubleField(value: &_storage._unclaimedSoulEggsD) }()
        case 36: try { try decoder.decodeSingularBoolField(value: &_storage._forceEliteContracts) }()
        case 37: try { try decoder.decodeSingularDoubleField(value: &_storage._newPlayerEventEndTime) }()
        case 38: try { try decoder.decodeSingularUInt64Field(value: &_storage._shellScriptsEarned) }()
        case 39: try { try decoder.decodeSingularUInt64Field(value: &_storage._shellScriptsSpent) }()
        case 40: try { try decoder.decodeSingularUInt64Field(value: &_storage._unclaimedShellScripts) }()
        case 41: try { try decoder.decodeSingularDoubleField(value: &_storage._timeCheatDebt) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._maxEggReached {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._goldenEggsEarned {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._goldenEggsSpent {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._soulEggs {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._prestigeCashEarned {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._lifetimeCashEarned {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._piggyBank {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._permitLevel {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      if !_storage._epicResearch.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._epicResearch, fieldNumber: 9)
      }
      try { if let v = _storage._nextDailyGiftTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      if !_storage._news.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._news, fieldNumber: 11)
      }
      try { if let v = _storage._lastNewsTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._currentMultiplier {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._currentMultiplierExpiration {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
      } }()
      if !_storage._achievements.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._achievements, fieldNumber: 15)
      }
      try { if let v = _storage._uncliamedGoldenEggs {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._unclaimedSoulEggs {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 17)
      } }()
      if !_storage._maxFarmSizeReached.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._maxFarmSizeReached, fieldNumber: 18)
      }
      if !_storage._eggMedalLevel.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._eggMedalLevel, fieldNumber: 19)
      }
      try { if let v = _storage._lastDailyGiftCollectedDay {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._currentFarm {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._eggsOfProphecy {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._unclaimedEggsOfProphecy {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._longIdleNotificationSet {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._longIdleNotificationThreshold {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._longIdleReward {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._numDailyGiftsCollected {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._hyperloopStation {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      } }()
      if !_storage._boosts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._boosts, fieldNumber: 30)
      }
      try { if let v = _storage._piggyFullAlertShown {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._totalTimeCheatsDetected {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._prestigeSoulBoostCash {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._soulEggsD {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._unclaimedSoulEggsD {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._forceEliteContracts {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._newPlayerEventEndTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 37)
      } }()
      try { if let v = _storage._shellScriptsEarned {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 38)
      } }()
      try { if let v = _storage._shellScriptsSpent {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 39)
      } }()
      try { if let v = _storage._unclaimedShellScripts {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._timeCheatDebt {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 41)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Game, rhs: Ei_Backup.Game) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._currentFarm != rhs_storage._currentFarm {return false}
        if _storage._maxEggReached != rhs_storage._maxEggReached {return false}
        if _storage._goldenEggsEarned != rhs_storage._goldenEggsEarned {return false}
        if _storage._goldenEggsSpent != rhs_storage._goldenEggsSpent {return false}
        if _storage._uncliamedGoldenEggs != rhs_storage._uncliamedGoldenEggs {return false}
        if _storage._soulEggs != rhs_storage._soulEggs {return false}
        if _storage._unclaimedSoulEggs != rhs_storage._unclaimedSoulEggs {return false}
        if _storage._soulEggsD != rhs_storage._soulEggsD {return false}
        if _storage._unclaimedSoulEggsD != rhs_storage._unclaimedSoulEggsD {return false}
        if _storage._eggsOfProphecy != rhs_storage._eggsOfProphecy {return false}
        if _storage._unclaimedEggsOfProphecy != rhs_storage._unclaimedEggsOfProphecy {return false}
        if _storage._shellScriptsEarned != rhs_storage._shellScriptsEarned {return false}
        if _storage._shellScriptsSpent != rhs_storage._shellScriptsSpent {return false}
        if _storage._unclaimedShellScripts != rhs_storage._unclaimedShellScripts {return false}
        if _storage._prestigeCashEarned != rhs_storage._prestigeCashEarned {return false}
        if _storage._prestigeSoulBoostCash != rhs_storage._prestigeSoulBoostCash {return false}
        if _storage._lifetimeCashEarned != rhs_storage._lifetimeCashEarned {return false}
        if _storage._piggyBank != rhs_storage._piggyBank {return false}
        if _storage._piggyFullAlertShown != rhs_storage._piggyFullAlertShown {return false}
        if _storage._permitLevel != rhs_storage._permitLevel {return false}
        if _storage._epicResearch != rhs_storage._epicResearch {return false}
        if _storage._hyperloopStation != rhs_storage._hyperloopStation {return false}
        if _storage._nextDailyGiftTime != rhs_storage._nextDailyGiftTime {return false}
        if _storage._lastDailyGiftCollectedDay != rhs_storage._lastDailyGiftCollectedDay {return false}
        if _storage._numDailyGiftsCollected != rhs_storage._numDailyGiftsCollected {return false}
        if _storage._news != rhs_storage._news {return false}
        if _storage._lastNewsTime != rhs_storage._lastNewsTime {return false}
        if _storage._currentMultiplier != rhs_storage._currentMultiplier {return false}
        if _storage._currentMultiplierExpiration != rhs_storage._currentMultiplierExpiration {return false}
        if _storage._achievements != rhs_storage._achievements {return false}
        if _storage._maxFarmSizeReached != rhs_storage._maxFarmSizeReached {return false}
        if _storage._eggMedalLevel != rhs_storage._eggMedalLevel {return false}
        if _storage._longIdleNotificationSet != rhs_storage._longIdleNotificationSet {return false}
        if _storage._longIdleNotificationThreshold != rhs_storage._longIdleNotificationThreshold {return false}
        if _storage._longIdleReward != rhs_storage._longIdleReward {return false}
        if _storage._boosts != rhs_storage._boosts {return false}
        if _storage._totalTimeCheatsDetected != rhs_storage._totalTimeCheatsDetected {return false}
        if _storage._forceEliteContracts != rhs_storage._forceEliteContracts {return false}
        if _storage._newPlayerEventEndTime != rhs_storage._newPlayerEventEndTime {return false}
        if _storage._timeCheatDebt != rhs_storage._timeCheatDebt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Artifacts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Artifacts"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}infusing\0\u{3}item_being_infused\0\u{3}egg_type_infusing\0\u{3}infusing_eggs_required\0\u{3}eggs_infused\0\u{3}flow_percentage_artifacts\0\u{3}fueling_enabled\0\u{3}infusing_enabled_DEPRECATED\0\u{3}last_fueled_ship\0\u{3}inventory_score\0\u{1}enabled\0\u{3}intro_shown\0\u{3}spec_being_infused\0\u{3}tank_filling_enabled\0\u{3}tank_level\0\u{3}tank_fuels\0\u{3}crafting_xp\0\u{3}tank_limits\0")

  fileprivate class _StorageClass {
    var _infusing: Bool? = nil
    var _itemBeingInfused: Ei_ArtifactInventoryItem? = nil
    var _specBeingInfused: Ei_ArtifactSpec? = nil
    var _eggTypeInfusing: Ei_Egg? = nil
    var _infusingEggsRequired: Double? = nil
    var _eggsInfused: Double? = nil
    var _flowPercentageArtifacts: Double? = nil
    var _fuelingEnabled: Bool? = nil
    var _tankFillingEnabled: Bool? = nil
    var _tankLevel: UInt32? = nil
    var _tankFuels: [Double] = []
    var _tankLimits: [Double] = []
    var _lastFueledShip: Ei_MissionInfo.Spaceship? = nil
    var _inventoryScore: Double? = nil
    var _craftingXp: Double? = nil
    var _enabled: Bool? = nil
    var _introShown: Bool? = nil
    var _infusingEnabledDeprecated: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _infusing = source._infusing
      _itemBeingInfused = source._itemBeingInfused
      _specBeingInfused = source._specBeingInfused
      _eggTypeInfusing = source._eggTypeInfusing
      _infusingEggsRequired = source._infusingEggsRequired
      _eggsInfused = source._eggsInfused
      _flowPercentageArtifacts = source._flowPercentageArtifacts
      _fuelingEnabled = source._fuelingEnabled
      _tankFillingEnabled = source._tankFillingEnabled
      _tankLevel = source._tankLevel
      _tankFuels = source._tankFuels
      _tankLimits = source._tankLimits
      _lastFueledShip = source._lastFueledShip
      _inventoryScore = source._inventoryScore
      _craftingXp = source._craftingXp
      _enabled = source._enabled
      _introShown = source._introShown
      _infusingEnabledDeprecated = source._infusingEnabledDeprecated
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._infusing) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._itemBeingInfused) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._eggTypeInfusing) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._infusingEggsRequired) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._eggsInfused) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._flowPercentageArtifacts) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._fuelingEnabled) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._infusingEnabledDeprecated) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._lastFueledShip) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._inventoryScore) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._enabled) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._introShown) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._specBeingInfused) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._tankFillingEnabled) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._tankLevel) }()
        case 16: try { try decoder.decodeRepeatedDoubleField(value: &_storage._tankFuels) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._craftingXp) }()
        case 18: try { try decoder.decodeRepeatedDoubleField(value: &_storage._tankLimits) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._infusing {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._itemBeingInfused {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._eggTypeInfusing {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._infusingEggsRequired {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._eggsInfused {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._flowPercentageArtifacts {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._fuelingEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._infusingEnabledDeprecated {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._lastFueledShip {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._inventoryScore {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._enabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._introShown {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._specBeingInfused {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._tankFillingEnabled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._tankLevel {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      } }()
      if !_storage._tankFuels.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._tankFuels, fieldNumber: 16)
      }
      try { if let v = _storage._craftingXp {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      if !_storage._tankLimits.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._tankLimits, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Artifacts, rhs: Ei_Backup.Artifacts) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._infusing != rhs_storage._infusing {return false}
        if _storage._itemBeingInfused != rhs_storage._itemBeingInfused {return false}
        if _storage._specBeingInfused != rhs_storage._specBeingInfused {return false}
        if _storage._eggTypeInfusing != rhs_storage._eggTypeInfusing {return false}
        if _storage._infusingEggsRequired != rhs_storage._infusingEggsRequired {return false}
        if _storage._eggsInfused != rhs_storage._eggsInfused {return false}
        if _storage._flowPercentageArtifacts != rhs_storage._flowPercentageArtifacts {return false}
        if _storage._fuelingEnabled != rhs_storage._fuelingEnabled {return false}
        if _storage._tankFillingEnabled != rhs_storage._tankFillingEnabled {return false}
        if _storage._tankLevel != rhs_storage._tankLevel {return false}
        if _storage._tankFuels != rhs_storage._tankFuels {return false}
        if _storage._tankLimits != rhs_storage._tankLimits {return false}
        if _storage._lastFueledShip != rhs_storage._lastFueledShip {return false}
        if _storage._inventoryScore != rhs_storage._inventoryScore {return false}
        if _storage._craftingXp != rhs_storage._craftingXp {return false}
        if _storage._enabled != rhs_storage._enabled {return false}
        if _storage._introShown != rhs_storage._introShown {return false}
        if _storage._infusingEnabledDeprecated != rhs_storage._infusingEnabledDeprecated {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Virtue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Virtue"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}shift_count\0\u{1}resets\0\u{3}eov_earned\0\u{3}eggs_delivered\0\u{1}afx\0\u{3}active_afx\0\u{3}last_sync\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._shiftCount) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._resets) }()
      case 3: try { try decoder.decodeRepeatedUInt32Field(value: &self.eovEarned) }()
      case 4: try { try decoder.decodeRepeatedDoubleField(value: &self.eggsDelivered) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._afx) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.activeAfx) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._lastSync) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._shiftCount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._resets {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    if !self.eovEarned.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.eovEarned, fieldNumber: 3)
    }
    if !self.eggsDelivered.isEmpty {
      try visitor.visitRepeatedDoubleField(value: self.eggsDelivered, fieldNumber: 4)
    }
    try { if let v = self._afx {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    if !self.activeAfx.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.activeAfx, fieldNumber: 6)
    }
    try { if let v = self._lastSync {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Virtue, rhs: Ei_Backup.Virtue) -> Bool {
    if lhs._shiftCount != rhs._shiftCount {return false}
    if lhs._resets != rhs._resets {return false}
    if lhs.eovEarned != rhs.eovEarned {return false}
    if lhs.eggsDelivered != rhs.eggsDelivered {return false}
    if lhs._afx != rhs._afx {return false}
    if lhs.activeAfx != rhs.activeAfx {return false}
    if lhs._lastSync != rhs._lastSync {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Shells: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Shells"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}intro_alert\0\u{3}contracts_intro_alert\0\u{3}num_new\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._introAlert) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._contractsIntroAlert) }()
      case 3: try { try decoder.decodeRepeatedInt32Field(value: &self.numNew) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._introAlert {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._contractsIntroAlert {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    if !self.numNew.isEmpty {
      try visitor.visitRepeatedInt32Field(value: self.numNew, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Shells, rhs: Ei_Backup.Shells) -> Bool {
    if lhs._introAlert != rhs._introAlert {return false}
    if lhs._contractsIntroAlert != rhs._contractsIntroAlert {return false}
    if lhs.numNew != rhs.numNew {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Simulation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Simulation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}egg_type\0\u{3}cash_earned\0\u{3}cash_spent\0\u{3}unclaimed_cash\0\u{3}last_step_time\0\u{3}num_chickens\0\u{3}num_chickens_unsettled\0\u{3}num_chickens_running\0\u{3}eggs_laid\0\u{3}eggs_paid_for\0\u{3}silos_owned\0\u{1}habs\0\u{3}hab_population\0\u{3}hab_population_indound\0\u{3}hab_incubator_popuplation\0\u{3}hatchery_population\0\u{1}vehicles\0\u{3}common_research\0\u{3}farm_type\0\u{3}contract_id\0\u{3}train_length\0\u{3}active_boosts\0\u{3}time_cheats_detected\0\u{3}time_cheat_debt_DEP\0\u{3}boost_tokens_received\0\u{3}boost_tokens_spent\0\u{3}unclaimed_boost_tokens\0\u{3}boost_tokens_given\0\u{3}gametime_until_next_boost_token\0\u{3}eggs_shipped\0\u{3}last_cash_boost_time\0\u{3}total_step_time\0")

  fileprivate class _StorageClass {
    var _eggType: Ei_Egg? = nil
    var _farmType: Ei_FarmType? = nil
    var _contractID: String? = nil
    var _cashEarned: Double? = nil
    var _cashSpent: Double? = nil
    var _unclaimedCash: Double? = nil
    var _lastStepTime: Double? = nil
    var _numChickens: UInt64? = nil
    var _numChickensUnsettled: UInt64? = nil
    var _numChickensRunning: UInt64? = nil
    var _eggsLaid: Double? = nil
    var _eggsShipped: Double? = nil
    var _eggsPaidFor: Double? = nil
    var _silosOwned: UInt32? = nil
    var _habs: [UInt32] = []
    var _habPopulation: [UInt64] = []
    var _habPopulationIndound: [UInt64] = []
    var _habIncubatorPopuplation: [Double] = []
    var _hatcheryPopulation: Double? = nil
    var _vehicles: [UInt32] = []
    var _trainLength: [UInt32] = []
    var _commonResearch: [Ei_Backup.ResearchItem] = []
    var _activeBoosts: [Ei_Backup.ActiveBoost] = []
    var _lastCashBoostTime: Double? = nil
    var _timeCheatsDetected: UInt32? = nil
    var _timeCheatDebtDep: Double? = nil
    var _boostTokensReceived: UInt32? = nil
    var _boostTokensSpent: UInt32? = nil
    var _boostTokensGiven: UInt32? = nil
    var _unclaimedBoostTokens: UInt32? = nil
    var _gametimeUntilNextBoostToken: Double? = nil
    var _totalStepTime: Double? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _eggType = source._eggType
      _farmType = source._farmType
      _contractID = source._contractID
      _cashEarned = source._cashEarned
      _cashSpent = source._cashSpent
      _unclaimedCash = source._unclaimedCash
      _lastStepTime = source._lastStepTime
      _numChickens = source._numChickens
      _numChickensUnsettled = source._numChickensUnsettled
      _numChickensRunning = source._numChickensRunning
      _eggsLaid = source._eggsLaid
      _eggsShipped = source._eggsShipped
      _eggsPaidFor = source._eggsPaidFor
      _silosOwned = source._silosOwned
      _habs = source._habs
      _habPopulation = source._habPopulation
      _habPopulationIndound = source._habPopulationIndound
      _habIncubatorPopuplation = source._habIncubatorPopuplation
      _hatcheryPopulation = source._hatcheryPopulation
      _vehicles = source._vehicles
      _trainLength = source._trainLength
      _commonResearch = source._commonResearch
      _activeBoosts = source._activeBoosts
      _lastCashBoostTime = source._lastCashBoostTime
      _timeCheatsDetected = source._timeCheatsDetected
      _timeCheatDebtDep = source._timeCheatDebtDep
      _boostTokensReceived = source._boostTokensReceived
      _boostTokensSpent = source._boostTokensSpent
      _boostTokensGiven = source._boostTokensGiven
      _unclaimedBoostTokens = source._unclaimedBoostTokens
      _gametimeUntilNextBoostToken = source._gametimeUntilNextBoostToken
      _totalStepTime = source._totalStepTime
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._eggType) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._cashEarned) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._cashSpent) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._unclaimedCash) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._lastStepTime) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._numChickens) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._numChickensUnsettled) }()
        case 8: try { try decoder.decodeSingularUInt64Field(value: &_storage._numChickensRunning) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._eggsLaid) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._eggsPaidFor) }()
        case 11: try { try decoder.decodeSingularUInt32Field(value: &_storage._silosOwned) }()
        case 12: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._habs) }()
        case 13: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._habPopulation) }()
        case 14: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._habPopulationIndound) }()
        case 15: try { try decoder.decodeRepeatedDoubleField(value: &_storage._habIncubatorPopuplation) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._hatcheryPopulation) }()
        case 17: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._vehicles) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._commonResearch) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._farmType) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._contractID) }()
        case 21: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._trainLength) }()
        case 22: try { try decoder.decodeRepeatedMessageField(value: &_storage._activeBoosts) }()
        case 23: try { try decoder.decodeSingularUInt32Field(value: &_storage._timeCheatsDetected) }()
        case 24: try { try decoder.decodeSingularDoubleField(value: &_storage._timeCheatDebtDep) }()
        case 25: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokensReceived) }()
        case 26: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokensSpent) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._unclaimedBoostTokens) }()
        case 28: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokensGiven) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._gametimeUntilNextBoostToken) }()
        case 30: try { try decoder.decodeSingularDoubleField(value: &_storage._eggsShipped) }()
        case 31: try { try decoder.decodeSingularDoubleField(value: &_storage._lastCashBoostTime) }()
        case 32: try { try decoder.decodeSingularDoubleField(value: &_storage._totalStepTime) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._eggType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._cashEarned {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._cashSpent {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._unclaimedCash {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._lastStepTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._numChickens {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._numChickensUnsettled {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._numChickensRunning {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._eggsLaid {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._eggsPaidFor {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._silosOwned {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      } }()
      if !_storage._habs.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._habs, fieldNumber: 12)
      }
      if !_storage._habPopulation.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._habPopulation, fieldNumber: 13)
      }
      if !_storage._habPopulationIndound.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._habPopulationIndound, fieldNumber: 14)
      }
      if !_storage._habIncubatorPopuplation.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._habIncubatorPopuplation, fieldNumber: 15)
      }
      try { if let v = _storage._hatcheryPopulation {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      if !_storage._vehicles.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._vehicles, fieldNumber: 17)
      }
      if !_storage._commonResearch.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commonResearch, fieldNumber: 18)
      }
      try { if let v = _storage._farmType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._contractID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      if !_storage._trainLength.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._trainLength, fieldNumber: 21)
      }
      if !_storage._activeBoosts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._activeBoosts, fieldNumber: 22)
      }
      try { if let v = _storage._timeCheatsDetected {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._timeCheatDebtDep {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._boostTokensReceived {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._boostTokensSpent {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._unclaimedBoostTokens {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._boostTokensGiven {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._gametimeUntilNextBoostToken {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._eggsShipped {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._lastCashBoostTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._totalStepTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 32)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Simulation, rhs: Ei_Backup.Simulation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._eggType != rhs_storage._eggType {return false}
        if _storage._farmType != rhs_storage._farmType {return false}
        if _storage._contractID != rhs_storage._contractID {return false}
        if _storage._cashEarned != rhs_storage._cashEarned {return false}
        if _storage._cashSpent != rhs_storage._cashSpent {return false}
        if _storage._unclaimedCash != rhs_storage._unclaimedCash {return false}
        if _storage._lastStepTime != rhs_storage._lastStepTime {return false}
        if _storage._numChickens != rhs_storage._numChickens {return false}
        if _storage._numChickensUnsettled != rhs_storage._numChickensUnsettled {return false}
        if _storage._numChickensRunning != rhs_storage._numChickensRunning {return false}
        if _storage._eggsLaid != rhs_storage._eggsLaid {return false}
        if _storage._eggsShipped != rhs_storage._eggsShipped {return false}
        if _storage._eggsPaidFor != rhs_storage._eggsPaidFor {return false}
        if _storage._silosOwned != rhs_storage._silosOwned {return false}
        if _storage._habs != rhs_storage._habs {return false}
        if _storage._habPopulation != rhs_storage._habPopulation {return false}
        if _storage._habPopulationIndound != rhs_storage._habPopulationIndound {return false}
        if _storage._habIncubatorPopuplation != rhs_storage._habIncubatorPopuplation {return false}
        if _storage._hatcheryPopulation != rhs_storage._hatcheryPopulation {return false}
        if _storage._vehicles != rhs_storage._vehicles {return false}
        if _storage._trainLength != rhs_storage._trainLength {return false}
        if _storage._commonResearch != rhs_storage._commonResearch {return false}
        if _storage._activeBoosts != rhs_storage._activeBoosts {return false}
        if _storage._lastCashBoostTime != rhs_storage._lastCashBoostTime {return false}
        if _storage._timeCheatsDetected != rhs_storage._timeCheatsDetected {return false}
        if _storage._timeCheatDebtDep != rhs_storage._timeCheatDebtDep {return false}
        if _storage._boostTokensReceived != rhs_storage._boostTokensReceived {return false}
        if _storage._boostTokensSpent != rhs_storage._boostTokensSpent {return false}
        if _storage._boostTokensGiven != rhs_storage._boostTokensGiven {return false}
        if _storage._unclaimedBoostTokens != rhs_storage._unclaimedBoostTokens {return false}
        if _storage._gametimeUntilNextBoostToken != rhs_storage._gametimeUntilNextBoostToken {return false}
        if _storage._totalStepTime != rhs_storage._totalStepTime {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Mission: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Mission"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}current_mission\0\u{3}reference_value\0\u{1}missions\0\u{3}current_missions\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._currentMission) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._referenceValue) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.missions) }()
      case 4: try { try decoder.decodeRepeatedStringField(value: &self.currentMissions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._currentMission {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._referenceValue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    if !self.missions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missions, fieldNumber: 3)
    }
    if !self.currentMissions.isEmpty {
      try visitor.visitRepeatedStringField(value: self.currentMissions, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Mission, rhs: Ei_Backup.Mission) -> Bool {
    if lhs._currentMission != rhs._currentMission {return false}
    if lhs._referenceValue != rhs._referenceValue {return false}
    if lhs.currentMissions != rhs.currentMissions {return false}
    if lhs.missions != rhs.missions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.Misc: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".Misc"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}chicken_btn_pref_big\0\u{3}free_hatchery_refill_given\0\u{3}last_share_farm_value\0\u{3}last_share_swarm_farm_value\0\u{3}last_share_swarm_size\0\u{3}friend_rank\0\u{3}friend_rank_pop\0\u{3}global_rank\0\u{3}global_rank_pop\0\u{3}last_prestige_alert_soul_eggs_DEPRECATED\0\u{3}trophy_alert\0\u{3}ar_alert\0\u{3}contracts_alert\0\u{3}coop_alert\0\u{3}switch_alert\0\u{3}egg_of_prophecy_alert\0\u{3}boost_token_alert\0\u{3}soul_egg_alert\0\u{3}backup_reminder_alert\0\u{3}challenges_alert\0\u{3}contracts_alert_v2\0\u{3}coop_alert_v2\0\u{3}max_button_alert\0\u{3}mission_target_alert\0\u{3}colleggtibles_alert\0\u{3}eov_alert\0")

  fileprivate class _StorageClass {
    var _chickenBtnPrefBig: Bool? = nil
    var _freeHatcheryRefillGiven: Bool? = nil
    var _lastShareFarmValue: Double? = nil
    var _lastShareSwarmFarmValue: Double? = nil
    var _lastShareSwarmSize: Double? = nil
    var _lastPrestigeAlertSoulEggsDeprecated: UInt64? = nil
    var _friendRank: UInt64? = nil
    var _friendRankPop: UInt64? = nil
    var _globalRank: UInt64? = nil
    var _globalRankPop: UInt64? = nil
    var _challengesAlert: Bool? = nil
    var _trophyAlert: Bool? = nil
    var _arAlert: Bool? = nil
    var _contractsAlert: Bool? = nil
    var _contractsAlertV2: Bool? = nil
    var _coopAlert: Bool? = nil
    var _coopAlertV2: Bool? = nil
    var _switchAlert: Bool? = nil
    var _eggOfProphecyAlert: Bool? = nil
    var _boostTokenAlert: Bool? = nil
    var _soulEggAlert: Bool? = nil
    var _backupReminderAlert: Bool? = nil
    var _maxButtonAlert: Bool? = nil
    var _missionTargetAlert: Bool? = nil
    var _colleggtiblesAlert: Bool? = nil
    var _eovAlert: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _chickenBtnPrefBig = source._chickenBtnPrefBig
      _freeHatcheryRefillGiven = source._freeHatcheryRefillGiven
      _lastShareFarmValue = source._lastShareFarmValue
      _lastShareSwarmFarmValue = source._lastShareSwarmFarmValue
      _lastShareSwarmSize = source._lastShareSwarmSize
      _lastPrestigeAlertSoulEggsDeprecated = source._lastPrestigeAlertSoulEggsDeprecated
      _friendRank = source._friendRank
      _friendRankPop = source._friendRankPop
      _globalRank = source._globalRank
      _globalRankPop = source._globalRankPop
      _challengesAlert = source._challengesAlert
      _trophyAlert = source._trophyAlert
      _arAlert = source._arAlert
      _contractsAlert = source._contractsAlert
      _contractsAlertV2 = source._contractsAlertV2
      _coopAlert = source._coopAlert
      _coopAlertV2 = source._coopAlertV2
      _switchAlert = source._switchAlert
      _eggOfProphecyAlert = source._eggOfProphecyAlert
      _boostTokenAlert = source._boostTokenAlert
      _soulEggAlert = source._soulEggAlert
      _backupReminderAlert = source._backupReminderAlert
      _maxButtonAlert = source._maxButtonAlert
      _missionTargetAlert = source._missionTargetAlert
      _colleggtiblesAlert = source._colleggtiblesAlert
      _eovAlert = source._eovAlert
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._chickenBtnPrefBig) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._freeHatcheryRefillGiven) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._lastShareFarmValue) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._lastShareSwarmFarmValue) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._lastShareSwarmSize) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._friendRank) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._friendRankPop) }()
        case 8: try { try decoder.decodeSingularUInt64Field(value: &_storage._globalRank) }()
        case 9: try { try decoder.decodeSingularUInt64Field(value: &_storage._globalRankPop) }()
        case 10: try { try decoder.decodeSingularUInt64Field(value: &_storage._lastPrestigeAlertSoulEggsDeprecated) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._trophyAlert) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._arAlert) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._contractsAlert) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._coopAlert) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._switchAlert) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._eggOfProphecyAlert) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._boostTokenAlert) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._soulEggAlert) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._backupReminderAlert) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._challengesAlert) }()
        case 21: try { try decoder.decodeSingularBoolField(value: &_storage._contractsAlertV2) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._coopAlertV2) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._maxButtonAlert) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._missionTargetAlert) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._colleggtiblesAlert) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._eovAlert) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._chickenBtnPrefBig {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._freeHatcheryRefillGiven {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._lastShareFarmValue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lastShareSwarmFarmValue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._lastShareSwarmSize {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._friendRank {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._friendRankPop {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._globalRank {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._globalRankPop {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._lastPrestigeAlertSoulEggsDeprecated {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._trophyAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._arAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._contractsAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._coopAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._switchAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._eggOfProphecyAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._boostTokenAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._soulEggAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._backupReminderAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._challengesAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._contractsAlertV2 {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._coopAlertV2 {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._maxButtonAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._missionTargetAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._colleggtiblesAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._eovAlert {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.Misc, rhs: Ei_Backup.Misc) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._chickenBtnPrefBig != rhs_storage._chickenBtnPrefBig {return false}
        if _storage._freeHatcheryRefillGiven != rhs_storage._freeHatcheryRefillGiven {return false}
        if _storage._lastShareFarmValue != rhs_storage._lastShareFarmValue {return false}
        if _storage._lastShareSwarmFarmValue != rhs_storage._lastShareSwarmFarmValue {return false}
        if _storage._lastShareSwarmSize != rhs_storage._lastShareSwarmSize {return false}
        if _storage._lastPrestigeAlertSoulEggsDeprecated != rhs_storage._lastPrestigeAlertSoulEggsDeprecated {return false}
        if _storage._friendRank != rhs_storage._friendRank {return false}
        if _storage._friendRankPop != rhs_storage._friendRankPop {return false}
        if _storage._globalRank != rhs_storage._globalRank {return false}
        if _storage._globalRankPop != rhs_storage._globalRankPop {return false}
        if _storage._challengesAlert != rhs_storage._challengesAlert {return false}
        if _storage._trophyAlert != rhs_storage._trophyAlert {return false}
        if _storage._arAlert != rhs_storage._arAlert {return false}
        if _storage._contractsAlert != rhs_storage._contractsAlert {return false}
        if _storage._contractsAlertV2 != rhs_storage._contractsAlertV2 {return false}
        if _storage._coopAlert != rhs_storage._coopAlert {return false}
        if _storage._coopAlertV2 != rhs_storage._coopAlertV2 {return false}
        if _storage._switchAlert != rhs_storage._switchAlert {return false}
        if _storage._eggOfProphecyAlert != rhs_storage._eggOfProphecyAlert {return false}
        if _storage._boostTokenAlert != rhs_storage._boostTokenAlert {return false}
        if _storage._soulEggAlert != rhs_storage._soulEggAlert {return false}
        if _storage._backupReminderAlert != rhs_storage._backupReminderAlert {return false}
        if _storage._maxButtonAlert != rhs_storage._maxButtonAlert {return false}
        if _storage._missionTargetAlert != rhs_storage._missionTargetAlert {return false}
        if _storage._colleggtiblesAlert != rhs_storage._colleggtiblesAlert {return false}
        if _storage._eovAlert != rhs_storage._eovAlert {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.ResearchItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".ResearchItem"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}level\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._level) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._level {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.ResearchItem, rhs: Ei_Backup.ResearchItem) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._level != rhs._level {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.NewsHeadline: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".NewsHeadline"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}read\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._read) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._read {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.NewsHeadline, rhs: Ei_Backup.NewsHeadline) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._read != rhs._read {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.AchievementInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".AchievementInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}achieved\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._achieved) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._achieved {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.AchievementInfo, rhs: Ei_Backup.AchievementInfo) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._achieved != rhs._achieved {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.ActiveBoost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".ActiveBoost"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}boost_id\0\u{3}time_remaining\0\u{3}reference_value\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._boostID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._timeRemaining) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._referenceValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._boostID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timeRemaining {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._referenceValue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.ActiveBoost, rhs: Ei_Backup.ActiveBoost) -> Bool {
    if lhs._boostID != rhs._boostID {return false}
    if lhs._timeRemaining != rhs._timeRemaining {return false}
    if lhs._referenceValue != rhs._referenceValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.OwnedBoost: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".OwnedBoost"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}boost_id\0\u{1}count\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._boostID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._boostID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.OwnedBoost, rhs: Ei_Backup.OwnedBoost) -> Bool {
    if lhs._boostID != rhs._boostID {return false}
    if lhs._count != rhs._count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Backup.MissionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Backup.protoMessageName + ".MissionInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}completed\0\u{3}reference_value\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._completed) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._referenceValue) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._completed {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._referenceValue {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Backup.MissionInfo, rhs: Ei_Backup.MissionInfo) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._completed != rhs._completed {return false}
    if lhs._referenceValue != rhs._referenceValue {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_EggIncFirstContactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EggIncFirstContactRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}client_version\0\u{1}platform\0\u{3}ei_user_id\0\u{3}device_id\0\u{1}username\0\u{3}game_services_id\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._platform) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._deviceID) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._username) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._gameServicesID) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._platform {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._deviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._username {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._gameServicesID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_EggIncFirstContactRequest, rhs: Ei_EggIncFirstContactRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._gameServicesID != rhs._gameServicesID {return false}
    if lhs._deviceID != rhs._deviceID {return false}
    if lhs._username != rhs._username {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_EggIncFirstContactResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EggIncFirstContactResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}backup\0\u{3}ei_user_id\0\u{3}ids_transferred\0\u{3}error_code\0\u{3}error_message\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._backup) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.idsTransferred) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._errorCode) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._errorMessage) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._backup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.idsTransferred.isEmpty {
      try visitor.visitRepeatedStringField(value: self.idsTransferred, fieldNumber: 3)
    }
    try { if let v = self._errorCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._errorMessage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_EggIncFirstContactResponse, rhs: Ei_EggIncFirstContactResponse) -> Bool {
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs.idsTransferred != rhs.idsTransferred {return false}
    if lhs._errorCode != rhs._errorCode {return false}
    if lhs._errorMessage != rhs._errorMessage {return false}
    if lhs._backup != rhs._backup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_EggIncFirstContactResponse.ErrorCodes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NO_ERROR\0\u{1}EXISTING_USER_W_GAMER_ID\0\u{1}USER_NOT_FOUND\0\u{1}BACKUP_CONFLICT\0")
}

extension Ei_EggIncAdConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EggIncAdConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}network_priority\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedEnumField(value: &self.networkPriority) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.networkPriority.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.networkPriority, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_EggIncAdConfig, rhs: Ei_EggIncAdConfig) -> Bool {
    if lhs.networkPriority != rhs.networkPriority {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_DailyGiftInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DailyGiftInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}current_day\0\u{3}seconds_to_next_day\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._currentDay) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._secondsToNextDay) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._currentDay {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._secondsToNextDay {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_DailyGiftInfo, rhs: Ei_DailyGiftInfo) -> Bool {
    if lhs._currentDay != rhs._currentDay {return false}
    if lhs._secondsToNextDay != rhs._secondsToNextDay {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SalesInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SalesInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}piggy_full\0\u{3}piggy_found_full\0\u{3}seconds_full_realtime\0\u{3}seconds_full_gametime\0\u{4}\u{2}lost_increments\0\u{4}\u{3}current_client_version\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._piggyFull) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._piggyFoundFull) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._secondsFullRealtime) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._secondsFullGametime) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._lostIncrements) }()
      case 10: try { try decoder.decodeSingularUInt32Field(value: &self._currentClientVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._piggyFull {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._piggyFoundFull {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._secondsFullRealtime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._secondsFullGametime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._lostIncrements {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._currentClientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SalesInfoRequest, rhs: Ei_SalesInfoRequest) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._piggyFull != rhs._piggyFull {return false}
    if lhs._piggyFoundFull != rhs._piggyFoundFull {return false}
    if lhs._secondsFullRealtime != rhs._secondsFullRealtime {return false}
    if lhs._secondsFullGametime != rhs._secondsFullGametime {return false}
    if lhs._lostIncrements != rhs._lostIncrements {return false}
    if lhs._currentClientVersion != rhs._currentClientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_IAPSaleEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IAPSaleEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}product_id\0\u{3}seconds_remaining\0\u{3}discount_string\0\u{3}sale_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._productID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._secondsRemaining) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._discountString) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._saleID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._productID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._secondsRemaining {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._discountString {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._saleID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_IAPSaleEntry, rhs: Ei_IAPSaleEntry) -> Bool {
    if lhs._productID != rhs._productID {return false}
    if lhs._secondsRemaining != rhs._secondsRemaining {return false}
    if lhs._discountString != rhs._discountString {return false}
    if lhs._saleID != rhs._saleID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SalesInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SalesInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sales\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.sales) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.sales.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.sales, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SalesInfo, rhs: Ei_SalesInfo) -> Bool {
    if lhs.sales != rhs.sales {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_EggIncEvent: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EggIncEvent"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{3}seconds_remaining\0\u{1}type\0\u{1}multiplier\0\u{1}subtitle\0\u{3}start_time\0\u{1}duration\0\u{3}cc_only\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._secondsRemaining) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._type) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._multiplier) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._subtitle) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._startTime) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._duration) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._ccOnly) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._secondsRemaining {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._multiplier {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._subtitle {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._startTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._ccOnly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_EggIncEvent, rhs: Ei_EggIncEvent) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._secondsRemaining != rhs._secondsRemaining {return false}
    if lhs._type != rhs._type {return false}
    if lhs._multiplier != rhs._multiplier {return false}
    if lhs._subtitle != rhs._subtitle {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._ccOnly != rhs._ccOnly {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_EggIncCurrentEvents: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".EggIncCurrentEvents"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}events\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.events) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.events.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.events, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_EggIncCurrentEvents, rhs: Ei_EggIncCurrentEvents) -> Bool {
    if lhs.events != rhs.events {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_DeviceInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DeviceInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_id\0\u{1}platform\0\u{3}form_factor\0\u{3}device_name\0\u{3}platform_version\0\u{3}locale_country\0\u{3}locale_language\0\u{3}gpu_vendor\0\u{3}gpu_model\0\u{3}device_bucket\0\u{3}screen_width\0\u{3}screen_height\0\u{3}advertising_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._deviceID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._platform) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._formFactor) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._deviceName) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._platformVersion) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._localeCountry) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._localeLanguage) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._gpuVendor) }()
      case 9: try { try decoder.decodeSingularStringField(value: &self._gpuModel) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._deviceBucket) }()
      case 11: try { try decoder.decodeSingularUInt32Field(value: &self._screenWidth) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self._screenHeight) }()
      case 13: try { try decoder.decodeSingularStringField(value: &self._advertisingID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._deviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._platform {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._formFactor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._deviceName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._platformVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._localeCountry {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._localeLanguage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._gpuVendor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._gpuModel {
      try visitor.visitSingularStringField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._deviceBucket {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._screenWidth {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._screenHeight {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._advertisingID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 13)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_DeviceInfo, rhs: Ei_DeviceInfo) -> Bool {
    if lhs._deviceID != rhs._deviceID {return false}
    if lhs._advertisingID != rhs._advertisingID {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._formFactor != rhs._formFactor {return false}
    if lhs._deviceName != rhs._deviceName {return false}
    if lhs._platformVersion != rhs._platformVersion {return false}
    if lhs._localeCountry != rhs._localeCountry {return false}
    if lhs._localeLanguage != rhs._localeLanguage {return false}
    if lhs._gpuVendor != rhs._gpuVendor {return false}
    if lhs._gpuModel != rhs._gpuModel {return false}
    if lhs._deviceBucket != rhs._deviceBucket {return false}
    if lhs._screenWidth != rhs._screenWidth {return false}
    if lhs._screenHeight != rhs._screenHeight {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AppInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AppInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}version_str\0\u{1}sessions\0\u{3}num_prestiges\0\u{3}soul_eggs\0\u{3}current_egg\0\u{3}gold_earned\0\u{3}gold_spent\0\u{3}current_mission\0\u{3}piggy_size\0\u{3}num_piggy_breaks\0\u{3}iap_packs_purchased\0\u{3}permit_level\0\u{3}unlimited_chickens_uses\0\u{3}refill_uses\0\u{3}video_doubler_uses\0\u{3}short_warp_uses\0\u{3}long_warp_uses\0\u{3}drone_takedowns\0\u{3}drone_takedowns_elite\0\u{3}trophies_unlocked\0\u{3}egg_level\0\u{3}struggle_factor\0\u{3}piggy_full\0\u{3}piggy_found_full\0\u{3}time_piggy_full_realtime\0\u{3}time_piggy_full_gametime\0\u{3}lost_piggy_increments\0\u{3}sale_id\0\u{3}verified_piggy_breaks\0")

  fileprivate class _StorageClass {
    var _versionStr: String? = nil
    var _sessions: UInt32? = nil
    var _numPrestiges: UInt32? = nil
    var _soulEggs: UInt64? = nil
    var _currentEgg: UInt32? = nil
    var _goldEarned: UInt64? = nil
    var _goldSpent: UInt64? = nil
    var _currentMission: UInt32? = nil
    var _piggySize: UInt32? = nil
    var _numPiggyBreaks: UInt64? = nil
    var _verifiedPiggyBreaks: UInt64? = nil
    var _iapPacksPurchased: UInt64? = nil
    var _permitLevel: UInt32? = nil
    var _videoDoublerUses: UInt64? = nil
    var _droneTakedowns: UInt64? = nil
    var _droneTakedownsElite: UInt64? = nil
    var _trophiesUnlocked: Bool? = nil
    var _eggLevel: Float? = nil
    var _struggleFactor: Float? = nil
    var _piggyFull: Bool? = nil
    var _piggyFoundFull: Bool? = nil
    var _timePiggyFullRealtime: Double? = nil
    var _timePiggyFullGametime: Double? = nil
    var _lostPiggyIncrements: UInt64? = nil
    var _saleID: String? = nil
    var _unlimitedChickensUses: UInt64? = nil
    var _refillUses: UInt64? = nil
    var _shortWarpUses: UInt64? = nil
    var _longWarpUses: UInt64? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _versionStr = source._versionStr
      _sessions = source._sessions
      _numPrestiges = source._numPrestiges
      _soulEggs = source._soulEggs
      _currentEgg = source._currentEgg
      _goldEarned = source._goldEarned
      _goldSpent = source._goldSpent
      _currentMission = source._currentMission
      _piggySize = source._piggySize
      _numPiggyBreaks = source._numPiggyBreaks
      _verifiedPiggyBreaks = source._verifiedPiggyBreaks
      _iapPacksPurchased = source._iapPacksPurchased
      _permitLevel = source._permitLevel
      _videoDoublerUses = source._videoDoublerUses
      _droneTakedowns = source._droneTakedowns
      _droneTakedownsElite = source._droneTakedownsElite
      _trophiesUnlocked = source._trophiesUnlocked
      _eggLevel = source._eggLevel
      _struggleFactor = source._struggleFactor
      _piggyFull = source._piggyFull
      _piggyFoundFull = source._piggyFoundFull
      _timePiggyFullRealtime = source._timePiggyFullRealtime
      _timePiggyFullGametime = source._timePiggyFullGametime
      _lostPiggyIncrements = source._lostPiggyIncrements
      _saleID = source._saleID
      _unlimitedChickensUses = source._unlimitedChickensUses
      _refillUses = source._refillUses
      _shortWarpUses = source._shortWarpUses
      _longWarpUses = source._longWarpUses
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._versionStr) }()
        case 2: try { try decoder.decodeSingularUInt32Field(value: &_storage._sessions) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._numPrestiges) }()
        case 4: try { try decoder.decodeSingularUInt64Field(value: &_storage._soulEggs) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._currentEgg) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._goldEarned) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._goldSpent) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._currentMission) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._piggySize) }()
        case 10: try { try decoder.decodeSingularUInt64Field(value: &_storage._numPiggyBreaks) }()
        case 11: try { try decoder.decodeSingularUInt64Field(value: &_storage._iapPacksPurchased) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._permitLevel) }()
        case 13: try { try decoder.decodeSingularUInt64Field(value: &_storage._unlimitedChickensUses) }()
        case 14: try { try decoder.decodeSingularUInt64Field(value: &_storage._refillUses) }()
        case 15: try { try decoder.decodeSingularUInt64Field(value: &_storage._videoDoublerUses) }()
        case 16: try { try decoder.decodeSingularUInt64Field(value: &_storage._shortWarpUses) }()
        case 17: try { try decoder.decodeSingularUInt64Field(value: &_storage._longWarpUses) }()
        case 18: try { try decoder.decodeSingularUInt64Field(value: &_storage._droneTakedowns) }()
        case 19: try { try decoder.decodeSingularUInt64Field(value: &_storage._droneTakedownsElite) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._trophiesUnlocked) }()
        case 21: try { try decoder.decodeSingularFloatField(value: &_storage._eggLevel) }()
        case 22: try { try decoder.decodeSingularFloatField(value: &_storage._struggleFactor) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._piggyFull) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._piggyFoundFull) }()
        case 25: try { try decoder.decodeSingularDoubleField(value: &_storage._timePiggyFullRealtime) }()
        case 26: try { try decoder.decodeSingularDoubleField(value: &_storage._timePiggyFullGametime) }()
        case 27: try { try decoder.decodeSingularUInt64Field(value: &_storage._lostPiggyIncrements) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._saleID) }()
        case 29: try { try decoder.decodeSingularUInt64Field(value: &_storage._verifiedPiggyBreaks) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._versionStr {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._sessions {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._numPrestiges {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._soulEggs {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._currentEgg {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._goldEarned {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._goldSpent {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._currentMission {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._piggySize {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._numPiggyBreaks {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._iapPacksPurchased {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._permitLevel {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._unlimitedChickensUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._refillUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._videoDoublerUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._shortWarpUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._longWarpUses {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._droneTakedowns {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._droneTakedownsElite {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._trophiesUnlocked {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._eggLevel {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._struggleFactor {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._piggyFull {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._piggyFoundFull {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._timePiggyFullRealtime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._timePiggyFullGametime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._lostPiggyIncrements {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._saleID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._verifiedPiggyBreaks {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 29)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AppInfo, rhs: Ei_AppInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._versionStr != rhs_storage._versionStr {return false}
        if _storage._sessions != rhs_storage._sessions {return false}
        if _storage._numPrestiges != rhs_storage._numPrestiges {return false}
        if _storage._soulEggs != rhs_storage._soulEggs {return false}
        if _storage._currentEgg != rhs_storage._currentEgg {return false}
        if _storage._goldEarned != rhs_storage._goldEarned {return false}
        if _storage._goldSpent != rhs_storage._goldSpent {return false}
        if _storage._currentMission != rhs_storage._currentMission {return false}
        if _storage._piggySize != rhs_storage._piggySize {return false}
        if _storage._numPiggyBreaks != rhs_storage._numPiggyBreaks {return false}
        if _storage._verifiedPiggyBreaks != rhs_storage._verifiedPiggyBreaks {return false}
        if _storage._iapPacksPurchased != rhs_storage._iapPacksPurchased {return false}
        if _storage._permitLevel != rhs_storage._permitLevel {return false}
        if _storage._videoDoublerUses != rhs_storage._videoDoublerUses {return false}
        if _storage._droneTakedowns != rhs_storage._droneTakedowns {return false}
        if _storage._droneTakedownsElite != rhs_storage._droneTakedownsElite {return false}
        if _storage._trophiesUnlocked != rhs_storage._trophiesUnlocked {return false}
        if _storage._eggLevel != rhs_storage._eggLevel {return false}
        if _storage._struggleFactor != rhs_storage._struggleFactor {return false}
        if _storage._piggyFull != rhs_storage._piggyFull {return false}
        if _storage._piggyFoundFull != rhs_storage._piggyFoundFull {return false}
        if _storage._timePiggyFullRealtime != rhs_storage._timePiggyFullRealtime {return false}
        if _storage._timePiggyFullGametime != rhs_storage._timePiggyFullGametime {return false}
        if _storage._lostPiggyIncrements != rhs_storage._lostPiggyIncrements {return false}
        if _storage._saleID != rhs_storage._saleID {return false}
        if _storage._unlimitedChickensUses != rhs_storage._unlimitedChickensUses {return false}
        if _storage._refillUses != rhs_storage._refillUses {return false}
        if _storage._shortWarpUses != rhs_storage._shortWarpUses {return false}
        if _storage._longWarpUses != rhs_storage._longWarpUses {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ActionKeyValuePair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActionKeyValuePair"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}key\0\u{1}value\0")

  public var isInitialized: Bool {
    if self._key == nil {return false}
    if self._value == nil {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._key) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._value) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._key {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ActionKeyValuePair, rhs: Ei_ActionKeyValuePair) -> Bool {
    if lhs._key != rhs._key {return false}
    if lhs._value != rhs._value {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GenericAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenericAction"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}approx_time_DEP\0\u{3}action_name\0\u{1}data\0\u{1}app\0\u{1}device\0\u{3}advertising_id\0\u{3}approx_time\0\u{3}cc_user\0")

  fileprivate class _StorageClass {
    var _userID: String? = nil
    var _ccUser: Bool? = nil
    var _advertisingID: String? = nil
    var _approxTimeDep: Float? = nil
    var _approxTime: Double? = nil
    var _actionName: String? = nil
    var _data: [Ei_ActionKeyValuePair] = []
    var _app: Ei_AppInfo? = nil
    var _device: Ei_DeviceInfo? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _ccUser = source._ccUser
      _advertisingID = source._advertisingID
      _approxTimeDep = source._approxTimeDep
      _approxTime = source._approxTime
      _actionName = source._actionName
      _data = source._data
      _app = source._app
      _device = source._device
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public var isInitialized: Bool {
    return withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if !SwiftProtobuf.Internal.areAllInitialized(_storage._data) {return false}
      return true
    }
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularFloatField(value: &_storage._approxTimeDep) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._actionName) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._data) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._app) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._device) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._advertisingID) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._approxTime) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._ccUser) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._approxTimeDep {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._actionName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      if !_storage._data.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._data, fieldNumber: 4)
      }
      try { if let v = _storage._app {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._device {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._advertisingID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._approxTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._ccUser {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_GenericAction, rhs: Ei_GenericAction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._ccUser != rhs_storage._ccUser {return false}
        if _storage._advertisingID != rhs_storage._advertisingID {return false}
        if _storage._approxTimeDep != rhs_storage._approxTimeDep {return false}
        if _storage._approxTime != rhs_storage._approxTime {return false}
        if _storage._actionName != rhs_storage._actionName {return false}
        if _storage._data != rhs_storage._data {return false}
        if _storage._app != rhs_storage._app {return false}
        if _storage._device != rhs_storage._device {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GenericActionBatchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GenericActionBatchRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{1}actions\0")

  public var isInitialized: Bool {
    if !SwiftProtobuf.Internal.areAllInitialized(self.actions) {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.actions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.actions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_GenericActionBatchRequest, rhs: Ei_GenericActionBatchRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_VerifyPurchaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyPurchaseRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sku\0\u{3}transaction_id\0\u{1}receipt\0\u{1}platform\0\u{1}log\0\u{1}rinfo\0\u{1}sandbox\0\u{3}original_transaction_id\0")

  public var isInitialized: Bool {
    if let v = self._log, !v.isInitialized {return false}
    return true
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._sku) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._transactionID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._receipt) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._platform) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._log) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._sandbox) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._originalTransactionID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._sku {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._transactionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._receipt {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._platform {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._log {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._sandbox {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._originalTransactionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_VerifyPurchaseRequest, rhs: Ei_VerifyPurchaseRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._sku != rhs._sku {return false}
    if lhs._transactionID != rhs._transactionID {return false}
    if lhs._originalTransactionID != rhs._originalTransactionID {return false}
    if lhs._receipt != rhs._receipt {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs._log != rhs._log {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_VerifyPurchaseResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VerifyPurchaseResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}verified\0\u{1}message\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._verified) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._verified {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_VerifyPurchaseResponse, rhs: Ei_VerifyPurchaseResponse) -> Bool {
    if lhs._verified != rhs._verified {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CurrencyFlowLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CurrencyFlowLog"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}approx_time\0\u{1}currency\0\u{1}amount\0\u{1}location\0\u{1}version\0\u{1}platform\0\u{3}soul_eggs\0\u{3}tickets_spent\0\u{3}gold_spent\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._approxTime) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._currency) }()
      case 4: try { try decoder.decodeSingularInt64Field(value: &self._amount) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._location) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._version) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._platform) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._soulEggs) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self._ticketsSpent) }()
      case 10: try { try decoder.decodeSingularUInt64Field(value: &self._goldSpent) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._approxTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._currency {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._amount {
      try visitor.visitSingularInt64Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._location {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._platform {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._soulEggs {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._ticketsSpent {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._goldSpent {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CurrencyFlowLog, rhs: Ei_CurrencyFlowLog) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._approxTime != rhs._approxTime {return false}
    if lhs._currency != rhs._currency {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._location != rhs._location {return false}
    if lhs._version != rhs._version {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._soulEggs != rhs._soulEggs {return false}
    if lhs._ticketsSpent != rhs._ticketsSpent {return false}
    if lhs._goldSpent != rhs._goldSpent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CurrencyFlowBatchRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CurrencyFlowBatchRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}logs\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.logs) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.logs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.logs, fieldNumber: 1)
    }
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CurrencyFlowBatchRequest, rhs: Ei_CurrencyFlowBatchRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs.logs != rhs.logs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Reward: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Reward"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}reward_type\0\u{3}reward_sub_type\0\u{3}reward_amount\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._rewardType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._rewardSubType) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._rewardAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rewardType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rewardSubType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._rewardAmount {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Reward, rhs: Ei_Reward) -> Bool {
    if lhs._rewardType != rhs._rewardType {return false}
    if lhs._rewardSubType != rhs._rewardSubType {return false}
    if lhs._rewardAmount != rhs._rewardAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GameModifier: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GameModifier"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}dimension\0\u{1}value\0\u{1}description\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._dimension) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dimension {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_GameModifier, rhs: Ei_GameModifier) -> Bool {
    if lhs._dimension != rhs._dimension {return false}
    if lhs._value != rhs._value {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GameModifier.GameDimension: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0INVALID\0\u{1}EARNINGS\0\u{1}AWAY_EARNINGS\0\u{1}INTERNAL_HATCHERY_RATE\0\u{1}EGG_LAYING_RATE\0\u{1}SHIPPING_CAPACITY\0\u{1}HAB_CAPACITY\0\u{1}VEHICLE_COST\0\u{1}HAB_COST\0\u{1}RESEARCH_COST\0")
}

extension Ei_CustomEgg: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CustomEgg"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{1}name\0\u{1}description\0\u{1}value\0\u{3}hatchery_id\0\u{3}hatchery_max_x\0\u{1}icon\0\u{1}buffs\0\u{4}\u{d}icon_width\0\u{3}icon_height\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._hatcheryID) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._hatcheryMaxX) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._icon) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.buffs) }()
      case 21: try { try decoder.decodeSingularDoubleField(value: &self._iconWidth) }()
      case 22: try { try decoder.decodeSingularDoubleField(value: &self._iconHeight) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._hatcheryID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._hatcheryMaxX {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._icon {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    if !self.buffs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.buffs, fieldNumber: 8)
    }
    try { if let v = self._iconWidth {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 21)
    } }()
    try { if let v = self._iconHeight {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 22)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CustomEgg, rhs: Ei_CustomEgg) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._name != rhs._name {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._value != rhs._value {return false}
    if lhs._hatcheryID != rhs._hatcheryID {return false}
    if lhs._hatcheryMaxX != rhs._hatcheryMaxX {return false}
    if lhs._icon != rhs._icon {return false}
    if lhs._iconWidth != rhs._iconWidth {return false}
    if lhs._iconHeight != rhs._iconHeight {return false}
    if lhs.buffs != rhs.buffs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Contract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".Contract"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{1}egg\0\u{1}goals\0\u{3}coop_allowed\0\u{3}max_coop_size\0\u{3}expiration_time\0\u{3}length_seconds\0\u{2}\u{2}name\0\u{1}description\0\u{1}debug\0\u{3}max_boosts\0\u{3}max_soul_eggs\0\u{3}min_client_version\0\u{3}minutes_per_token\0\u{3}goal_sets\0\u{3}start_time\0\u{3}chicken_run_cooldown_minutes\0\u{1}leggacy\0\u{3}grade_specs\0\u{1}key\0\u{3}cc_only\0\u{3}season_id\0\u{3}default_shell_ids\0\u{3}custom_egg_id\0")

  fileprivate class _StorageClass {
    var _identifier: String? = nil
    var _name: String? = nil
    var _description_p: String? = nil
    var _egg: Ei_Egg? = nil
    var _customEggID: String? = nil
    var _goals: [Ei_Contract.Goal] = []
    var _goalSets: [Ei_Contract.GoalSet] = []
    var _gradeSpecs: [Ei_Contract.GradeSpec] = []
    var _seasonID: String? = nil
    var _coopAllowed: Bool? = nil
    var _maxCoopSize: UInt32? = nil
    var _maxBoosts: UInt32? = nil
    var _minutesPerToken: Double? = nil
    var _chickenRunCooldownMinutes: Double? = nil
    var _startTime: Double? = nil
    var _expirationTime: Double? = nil
    var _lengthSeconds: Double? = nil
    var _maxSoulEggs: Double? = nil
    var _minClientVersion: UInt32? = nil
    var _leggacy: Bool? = nil
    var _ccOnly: Bool? = nil
    var _defaultShellIds: [String] = []
    var _debug: Bool? = nil
    var _key: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identifier = source._identifier
      _name = source._name
      _description_p = source._description_p
      _egg = source._egg
      _customEggID = source._customEggID
      _goals = source._goals
      _goalSets = source._goalSets
      _gradeSpecs = source._gradeSpecs
      _seasonID = source._seasonID
      _coopAllowed = source._coopAllowed
      _maxCoopSize = source._maxCoopSize
      _maxBoosts = source._maxBoosts
      _minutesPerToken = source._minutesPerToken
      _chickenRunCooldownMinutes = source._chickenRunCooldownMinutes
      _startTime = source._startTime
      _expirationTime = source._expirationTime
      _lengthSeconds = source._lengthSeconds
      _maxSoulEggs = source._maxSoulEggs
      _minClientVersion = source._minClientVersion
      _leggacy = source._leggacy
      _ccOnly = source._ccOnly
      _defaultShellIds = source._defaultShellIds
      _debug = source._debug
      _key = source._key
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._identifier) }()
        case 2: try { try decoder.decodeSingularEnumField(value: &_storage._egg) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._goals) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._coopAllowed) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._maxCoopSize) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._expirationTime) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._lengthSeconds) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._debug) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._maxBoosts) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._maxSoulEggs) }()
        case 14: try { try decoder.decodeSingularUInt32Field(value: &_storage._minClientVersion) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._minutesPerToken) }()
        case 16: try { try decoder.decodeRepeatedMessageField(value: &_storage._goalSets) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._startTime) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._chickenRunCooldownMinutes) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._leggacy) }()
        case 20: try { try decoder.decodeRepeatedMessageField(value: &_storage._gradeSpecs) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._key) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._ccOnly) }()
        case 23: try { try decoder.decodeSingularStringField(value: &_storage._seasonID) }()
        case 24: try { try decoder.decodeRepeatedStringField(value: &_storage._defaultShellIds) }()
        case 25: try { try decoder.decodeSingularStringField(value: &_storage._customEggID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._identifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._egg {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
      } }()
      if !_storage._goals.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._goals, fieldNumber: 3)
      }
      try { if let v = _storage._coopAllowed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._maxCoopSize {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._expirationTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._lengthSeconds {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._debug {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._maxBoosts {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._maxSoulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._minClientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._minutesPerToken {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 15)
      } }()
      if !_storage._goalSets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._goalSets, fieldNumber: 16)
      }
      try { if let v = _storage._startTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._chickenRunCooldownMinutes {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._leggacy {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      if !_storage._gradeSpecs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gradeSpecs, fieldNumber: 20)
      }
      try { if let v = _storage._key {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._ccOnly {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._seasonID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 23)
      } }()
      if !_storage._defaultShellIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._defaultShellIds, fieldNumber: 24)
      }
      try { if let v = _storage._customEggID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 25)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Contract, rhs: Ei_Contract) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._egg != rhs_storage._egg {return false}
        if _storage._customEggID != rhs_storage._customEggID {return false}
        if _storage._goals != rhs_storage._goals {return false}
        if _storage._goalSets != rhs_storage._goalSets {return false}
        if _storage._gradeSpecs != rhs_storage._gradeSpecs {return false}
        if _storage._seasonID != rhs_storage._seasonID {return false}
        if _storage._coopAllowed != rhs_storage._coopAllowed {return false}
        if _storage._maxCoopSize != rhs_storage._maxCoopSize {return false}
        if _storage._maxBoosts != rhs_storage._maxBoosts {return false}
        if _storage._minutesPerToken != rhs_storage._minutesPerToken {return false}
        if _storage._chickenRunCooldownMinutes != rhs_storage._chickenRunCooldownMinutes {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._expirationTime != rhs_storage._expirationTime {return false}
        if _storage._lengthSeconds != rhs_storage._lengthSeconds {return false}
        if _storage._maxSoulEggs != rhs_storage._maxSoulEggs {return false}
        if _storage._minClientVersion != rhs_storage._minClientVersion {return false}
        if _storage._leggacy != rhs_storage._leggacy {return false}
        if _storage._ccOnly != rhs_storage._ccOnly {return false}
        if _storage._defaultShellIds != rhs_storage._defaultShellIds {return false}
        if _storage._debug != rhs_storage._debug {return false}
        if _storage._key != rhs_storage._key {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Contract.PlayerGrade: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0GRADE_UNSET\0\u{1}GRADE_C\0\u{1}GRADE_B\0\u{1}GRADE_A\0\u{1}GRADE_AA\0\u{1}GRADE_AAA\0")
}

extension Ei_Contract.Goal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Contract.protoMessageName + ".Goal"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}type\0\u{3}target_amount\0\u{3}reward_type\0\u{3}reward_sub_type\0\u{3}reward_amount\0\u{3}target_soul_eggs\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._targetAmount) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._rewardType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._rewardSubType) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._rewardAmount) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._targetSoulEggs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._targetAmount {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._rewardType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._rewardSubType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rewardAmount {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._targetSoulEggs {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Contract.Goal, rhs: Ei_Contract.Goal) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._targetAmount != rhs._targetAmount {return false}
    if lhs._rewardType != rhs._rewardType {return false}
    if lhs._rewardSubType != rhs._rewardSubType {return false}
    if lhs._rewardAmount != rhs._rewardAmount {return false}
    if lhs._targetSoulEggs != rhs._targetSoulEggs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Contract.GoalSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Contract.protoMessageName + ".GoalSet"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}goals\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.goals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.goals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Contract.GoalSet, rhs: Ei_Contract.GoalSet) -> Bool {
    if lhs.goals != rhs.goals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_Contract.GradeSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_Contract.protoMessageName + ".GradeSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}grade\0\u{1}goals\0\u{1}modifiers\0\u{3}length_seconds\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.goals) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.modifiers) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._lengthSeconds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.goals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goals, fieldNumber: 2)
    }
    if !self.modifiers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.modifiers, fieldNumber: 3)
    }
    try { if let v = self._lengthSeconds {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_Contract.GradeSpec, rhs: Ei_Contract.GradeSpec) -> Bool {
    if lhs._grade != rhs._grade {return false}
    if lhs.goals != rhs.goals {return false}
    if lhs.modifiers != rhs.modifiers {return false}
    if lhs._lengthSeconds != rhs._lengthSeconds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSeasonGoal: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSeasonGoal"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}cxp\0\u{4}\u{2}reward_type\0\u{3}reward_sub_type\0\u{3}reward_amount\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._cxp) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._rewardType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._rewardSubType) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._rewardAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._cxp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rewardType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._rewardSubType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rewardAmount {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSeasonGoal, rhs: Ei_ContractSeasonGoal) -> Bool {
    if lhs._cxp != rhs._cxp {return false}
    if lhs._rewardType != rhs._rewardType {return false}
    if lhs._rewardSubType != rhs._rewardSubType {return false}
    if lhs._rewardAmount != rhs._rewardAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSeasonRewardConfirmationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSeasonRewardConfirmationRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{3}season_id\0\u{1}goal\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._seasonID) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._goal) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._seasonID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._goal {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSeasonRewardConfirmationRequest, rhs: Ei_ContractSeasonRewardConfirmationRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._seasonID != rhs._seasonID {return false}
    if lhs._goal != rhs._goal {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSeasonInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSeasonInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{3}grade_goals\0\u{1}name\0\u{3}start_time\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.gradeGoals) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._startTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.gradeGoals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gradeGoals, fieldNumber: 2)
    }
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._startTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSeasonInfo, rhs: Ei_ContractSeasonInfo) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._name != rhs._name {return false}
    if lhs._startTime != rhs._startTime {return false}
    if lhs.gradeGoals != rhs.gradeGoals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSeasonInfo.GoalSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractSeasonInfo.protoMessageName + ".GoalSet"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}grade\0\u{1}goals\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.goals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.goals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goals, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSeasonInfo.GoalSet, rhs: Ei_ContractSeasonInfo.GoalSet) -> Bool {
    if lhs._grade != rhs._grade {return false}
    if lhs.goals != rhs.goals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSeasonInfos: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSeasonInfos"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}infos\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.infos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.infos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.infos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSeasonInfos, rhs: Ei_ContractSeasonInfos) -> Bool {
    if lhs.infos != rhs.infos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractPlayerInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractPlayerInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}grade\0\u{3}total_cxp\0\u{1}status\0\u{3}last_evaluation_time\0\u{3}last_evaluation_version\0\u{3}unread_evaluations\0\u{3}grade_score\0\u{3}target_soul_power\0\u{3}target_grade_score\0\u{3}soul_power\0\u{1}issues\0\u{3}grade_progress\0\u{3}season_cxp\0\u{3}issue_score\0\u{3}season_progress\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._totalCxp) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._lastEvaluationTime) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._lastEvaluationVersion) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.unreadEvaluations) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._gradeScore) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._targetSoulPower) }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self._targetGradeScore) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self._soulPower) }()
      case 11: try { try decoder.decodeRepeatedEnumField(value: &self.issues) }()
      case 12: try { try decoder.decodeSingularDoubleField(value: &self._gradeProgress) }()
      case 13: try { try decoder.decodeSingularDoubleField(value: &self._seasonCxp) }()
      case 14: try { try decoder.decodeSingularDoubleField(value: &self._issueScore) }()
      case 15: try { try decoder.decodeRepeatedMessageField(value: &self.seasonProgress) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._totalCxp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lastEvaluationTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._lastEvaluationVersion {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    if !self.unreadEvaluations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.unreadEvaluations, fieldNumber: 6)
    }
    try { if let v = self._gradeScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._targetSoulPower {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._targetGradeScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._soulPower {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
    } }()
    if !self.issues.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.issues, fieldNumber: 11)
    }
    try { if let v = self._gradeProgress {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._seasonCxp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._issueScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
    } }()
    if !self.seasonProgress.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seasonProgress, fieldNumber: 15)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractPlayerInfo, rhs: Ei_ContractPlayerInfo) -> Bool {
    if lhs._grade != rhs._grade {return false}
    if lhs._totalCxp != rhs._totalCxp {return false}
    if lhs._seasonCxp != rhs._seasonCxp {return false}
    if lhs._gradeScore != rhs._gradeScore {return false}
    if lhs._targetGradeScore != rhs._targetGradeScore {return false}
    if lhs._soulPower != rhs._soulPower {return false}
    if lhs._targetSoulPower != rhs._targetSoulPower {return false}
    if lhs._gradeProgress != rhs._gradeProgress {return false}
    if lhs.issues != rhs.issues {return false}
    if lhs._issueScore != rhs._issueScore {return false}
    if lhs._status != rhs._status {return false}
    if lhs._lastEvaluationTime != rhs._lastEvaluationTime {return false}
    if lhs._lastEvaluationVersion != rhs._lastEvaluationVersion {return false}
    if lhs.unreadEvaluations != rhs.unreadEvaluations {return false}
    if lhs.seasonProgress != rhs.seasonProgress {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractPlayerInfo.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN\0\u{1}CALCULATING\0\u{1}OUT_OF_DATE\0\u{1}COMPLETE\0\u{1}INCOMPLETE\0")
}

extension Ei_ContractPlayerInfo.SeasonProgress: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractPlayerInfo.protoMessageName + ".SeasonProgress"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}season_id\0\u{3}active_DEP\0\u{3}starting_grade\0\u{3}total_cxp\0\u{3}cxp_last_reward_given\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._seasonID) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._activeDep) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._startingGrade) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._totalCxp) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._cxpLastRewardGiven) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._seasonID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._activeDep {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._startingGrade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._totalCxp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._cxpLastRewardGiven {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractPlayerInfo.SeasonProgress, rhs: Ei_ContractPlayerInfo.SeasonProgress) -> Bool {
    if lhs._seasonID != rhs._seasonID {return false}
    if lhs._activeDep != rhs._activeDep {return false}
    if lhs._startingGrade != rhs._startingGrade {return false}
    if lhs._totalCxp != rhs._totalCxp {return false}
    if lhs._cxpLastRewardGiven != rhs._cxpLastRewardGiven {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractEvaluation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractEvaluation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}cxp\0\u{3}grade_performance\0\u{1}grade\0\u{3}contribution_ratio\0\u{3}completion_percent\0\u{3}completion_time\0\u{3}chicken_runs_sent\0\u{3}gift_tokens_sent\0\u{3}old_league\0\u{3}old_goals\0\u{3}original_length\0\u{1}notes\0\u{3}teamwork_score\0\u{3}other_bonuses\0\u{3}gift_tokens_received\0\u{3}boost_token_allotment\0\u{3}buff_time_value\0\u{3}coop_size\0\u{1}issues\0\u{3}counted_in_season\0\u{3}season_id\0\u{3}last_contribution_time\0\u{3}soul_power\0\u{1}replay\0\u{3}cxp_change\0\u{1}solo\0\u{3}time_cheats\0\u{3}gift_token_value_sent\0\u{3}gift_token_value_received\0\u{3}extra_players\0\u{4}\u{a}contract_identifier\0\u{3}coop_identifier\0\u{2}\u{9}version\0\u{3}evaluation_start_time\0\u{1}status\0")

  fileprivate class _StorageClass {
    var _contractIdentifier: String? = nil
    var _coopIdentifier: String? = nil
    var _cxp: Double? = nil
    var _replay: Bool? = nil
    var _cxpChange: Double? = nil
    var _gradePerformance: Int32? = nil
    var _oldLeague: Int32? = nil
    var _oldGoals: Bool? = nil
    var _grade: Ei_Contract.PlayerGrade? = nil
    var _contributionRatio: Double? = nil
    var _completionPercent: Double? = nil
    var _originalLength: Double? = nil
    var _coopSize: UInt32? = nil
    var _solo: Bool? = nil
    var _soulPower: Double? = nil
    var _lastContributionTime: Double? = nil
    var _completionTime: Double? = nil
    var _chickenRunsSent: UInt32? = nil
    var _giftTokensSent: UInt32? = nil
    var _giftTokensReceived: UInt32? = nil
    var _giftTokenValueSent: Double? = nil
    var _giftTokenValueReceived: Double? = nil
    var _boostTokenAllotment: UInt32? = nil
    var _buffTimeValue: Double? = nil
    var _teamworkScore: Double? = nil
    var _otherBonuses: Double? = nil
    var _countedInSeason: Bool? = nil
    var _seasonID: String? = nil
    var _timeCheats: UInt32? = nil
    var _extraPlayers: UInt32? = nil
    var _issues: [Ei_ContractEvaluation.PoorBehavior] = []
    var _notes: [String] = []
    var _version: String? = nil
    var _evaluationStartTime: Double? = nil
    var _status: Ei_ContractEvaluation.Status? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _contractIdentifier = source._contractIdentifier
      _coopIdentifier = source._coopIdentifier
      _cxp = source._cxp
      _replay = source._replay
      _cxpChange = source._cxpChange
      _gradePerformance = source._gradePerformance
      _oldLeague = source._oldLeague
      _oldGoals = source._oldGoals
      _grade = source._grade
      _contributionRatio = source._contributionRatio
      _completionPercent = source._completionPercent
      _originalLength = source._originalLength
      _coopSize = source._coopSize
      _solo = source._solo
      _soulPower = source._soulPower
      _lastContributionTime = source._lastContributionTime
      _completionTime = source._completionTime
      _chickenRunsSent = source._chickenRunsSent
      _giftTokensSent = source._giftTokensSent
      _giftTokensReceived = source._giftTokensReceived
      _giftTokenValueSent = source._giftTokenValueSent
      _giftTokenValueReceived = source._giftTokenValueReceived
      _boostTokenAllotment = source._boostTokenAllotment
      _buffTimeValue = source._buffTimeValue
      _teamworkScore = source._teamworkScore
      _otherBonuses = source._otherBonuses
      _countedInSeason = source._countedInSeason
      _seasonID = source._seasonID
      _timeCheats = source._timeCheats
      _extraPlayers = source._extraPlayers
      _issues = source._issues
      _notes = source._notes
      _version = source._version
      _evaluationStartTime = source._evaluationStartTime
      _status = source._status
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._cxp) }()
        case 2: try { try decoder.decodeSingularInt32Field(value: &_storage._gradePerformance) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._grade) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._contributionRatio) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._completionPercent) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._completionTime) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._chickenRunsSent) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._giftTokensSent) }()
        case 9: try { try decoder.decodeSingularInt32Field(value: &_storage._oldLeague) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._oldGoals) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._originalLength) }()
        case 12: try { try decoder.decodeRepeatedStringField(value: &_storage._notes) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._teamworkScore) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._otherBonuses) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._giftTokensReceived) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokenAllotment) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._buffTimeValue) }()
        case 18: try { try decoder.decodeSingularUInt32Field(value: &_storage._coopSize) }()
        case 19: try { try decoder.decodeRepeatedEnumField(value: &_storage._issues) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._countedInSeason) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._seasonID) }()
        case 22: try { try decoder.decodeSingularDoubleField(value: &_storage._lastContributionTime) }()
        case 23: try { try decoder.decodeSingularDoubleField(value: &_storage._soulPower) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._replay) }()
        case 25: try { try decoder.decodeSingularDoubleField(value: &_storage._cxpChange) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._solo) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._timeCheats) }()
        case 28: try { try decoder.decodeSingularDoubleField(value: &_storage._giftTokenValueSent) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._giftTokenValueReceived) }()
        case 30: try { try decoder.decodeSingularUInt32Field(value: &_storage._extraPlayers) }()
        case 40: try { try decoder.decodeSingularStringField(value: &_storage._contractIdentifier) }()
        case 41: try { try decoder.decodeSingularStringField(value: &_storage._coopIdentifier) }()
        case 50: try { try decoder.decodeSingularStringField(value: &_storage._version) }()
        case 51: try { try decoder.decodeSingularDoubleField(value: &_storage._evaluationStartTime) }()
        case 52: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._cxp {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._gradePerformance {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._grade {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._contributionRatio {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._completionPercent {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._completionTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._chickenRunsSent {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._giftTokensSent {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._oldLeague {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._oldGoals {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._originalLength {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      if !_storage._notes.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._notes, fieldNumber: 12)
      }
      try { if let v = _storage._teamworkScore {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._otherBonuses {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._giftTokensReceived {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._boostTokenAllotment {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._buffTimeValue {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._coopSize {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 18)
      } }()
      if !_storage._issues.isEmpty {
        try visitor.visitRepeatedEnumField(value: _storage._issues, fieldNumber: 19)
      }
      try { if let v = _storage._countedInSeason {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._seasonID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._lastContributionTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._soulPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._replay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._cxpChange {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._solo {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._timeCheats {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._giftTokenValueSent {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._giftTokenValueReceived {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._extraPlayers {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._contractIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 40)
      } }()
      try { if let v = _storage._coopIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 41)
      } }()
      try { if let v = _storage._version {
        try visitor.visitSingularStringField(value: v, fieldNumber: 50)
      } }()
      try { if let v = _storage._evaluationStartTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 51)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 52)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractEvaluation, rhs: Ei_ContractEvaluation) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._contractIdentifier != rhs_storage._contractIdentifier {return false}
        if _storage._coopIdentifier != rhs_storage._coopIdentifier {return false}
        if _storage._cxp != rhs_storage._cxp {return false}
        if _storage._replay != rhs_storage._replay {return false}
        if _storage._cxpChange != rhs_storage._cxpChange {return false}
        if _storage._gradePerformance != rhs_storage._gradePerformance {return false}
        if _storage._oldLeague != rhs_storage._oldLeague {return false}
        if _storage._oldGoals != rhs_storage._oldGoals {return false}
        if _storage._grade != rhs_storage._grade {return false}
        if _storage._contributionRatio != rhs_storage._contributionRatio {return false}
        if _storage._completionPercent != rhs_storage._completionPercent {return false}
        if _storage._originalLength != rhs_storage._originalLength {return false}
        if _storage._coopSize != rhs_storage._coopSize {return false}
        if _storage._solo != rhs_storage._solo {return false}
        if _storage._soulPower != rhs_storage._soulPower {return false}
        if _storage._lastContributionTime != rhs_storage._lastContributionTime {return false}
        if _storage._completionTime != rhs_storage._completionTime {return false}
        if _storage._chickenRunsSent != rhs_storage._chickenRunsSent {return false}
        if _storage._giftTokensSent != rhs_storage._giftTokensSent {return false}
        if _storage._giftTokensReceived != rhs_storage._giftTokensReceived {return false}
        if _storage._giftTokenValueSent != rhs_storage._giftTokenValueSent {return false}
        if _storage._giftTokenValueReceived != rhs_storage._giftTokenValueReceived {return false}
        if _storage._boostTokenAllotment != rhs_storage._boostTokenAllotment {return false}
        if _storage._buffTimeValue != rhs_storage._buffTimeValue {return false}
        if _storage._teamworkScore != rhs_storage._teamworkScore {return false}
        if _storage._otherBonuses != rhs_storage._otherBonuses {return false}
        if _storage._countedInSeason != rhs_storage._countedInSeason {return false}
        if _storage._seasonID != rhs_storage._seasonID {return false}
        if _storage._timeCheats != rhs_storage._timeCheats {return false}
        if _storage._extraPlayers != rhs_storage._extraPlayers {return false}
        if _storage._issues != rhs_storage._issues {return false}
        if _storage._notes != rhs_storage._notes {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._evaluationStartTime != rhs_storage._evaluationStartTime {return false}
        if _storage._status != rhs_storage._status {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractEvaluation.PoorBehavior: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NONE\0\u{1}LOW_CONTRIBUTION\0\u{1}BAD_CONTRIBUTION\0\u{1}DISHONORABLY_DISCHARGED\0\u{1}POOR_TEAMWORK\0\u{1}ABANDONED_COOP\0\u{1}TIME_CHEAT\0")
}

extension Ei_ContractEvaluation.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN\0\u{1}PENDING\0\u{1}EVALUATING\0\u{1}COMPLETE\0")
}

extension Ei_ContractCitation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractCitation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}issue\0\u{1}timestamp\0\u{1}grade\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._issue) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._timestamp) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._issue {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timestamp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCitation, rhs: Ei_ContractCitation) -> Bool {
    if lhs._issue != rhs._issue {return false}
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._grade != rhs._grade {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractEvaluationBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractEvaluationBatch"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}evals\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.evals) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.evals.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.evals, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractEvaluationBatch, rhs: Ei_ContractEvaluationBatch) -> Bool {
    if lhs.evals != rhs.evals {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractEvaluationBatch.Pair: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractEvaluationBatch.protoMessageName + ".Pair"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{1}cev\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._cev) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._cev {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractEvaluationBatch.Pair, rhs: Ei_ContractEvaluationBatch.Pair) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._cev != rhs._cev {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CoopCompletionSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoopCompletionSnapshot"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}contributors\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.contributors) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.contributors.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contributors, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CoopCompletionSnapshot, rhs: Ei_CoopCompletionSnapshot) -> Bool {
    if lhs.contributors != rhs.contributors {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CoopCompletionSnapshot.ContributorSnapshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_CoopCompletionSnapshot.protoMessageName + ".ContributorSnapshot"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}contribution\0\u{3}soul_power\0\u{3}user_id\0\u{1}tokens\0\u{3}tokens_spent\0\u{3}last_contribution_time\0\u{1}finalized\0\u{3}total_step_time\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._contribution) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._soulPower) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._tokens) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._tokensSpent) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._lastContributionTime) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._finalized) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._totalStepTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contribution {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._soulPower {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._tokens {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._tokensSpent {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._lastContributionTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._finalized {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._totalStepTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CoopCompletionSnapshot.ContributorSnapshot, rhs: Ei_CoopCompletionSnapshot.ContributorSnapshot) -> Bool {
    if lhs._contribution != rhs._contribution {return false}
    if lhs._totalStepTime != rhs._totalStepTime {return false}
    if lhs._lastContributionTime != rhs._lastContributionTime {return false}
    if lhs._finalized != rhs._finalized {return false}
    if lhs._soulPower != rhs._soulPower {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._tokens != rhs._tokens {return false}
    if lhs._tokensSpent != rhs._tokensSpent {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_BasicRequestInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".BasicRequestInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}ei_user_id\0\u{3}client_version\0\u{1}version\0\u{1}build\0\u{1}platform\0\u{1}country\0\u{1}language\0\u{1}debug\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._version) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._build) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._platform) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._country) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._language) }()
      case 8: try { try decoder.decodeSingularBoolField(value: &self._debug) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._build {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._platform {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._country {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._language {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._debug {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_BasicRequestInfo, rhs: Ei_BasicRequestInfo) -> Bool {
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs._version != rhs._version {return false}
    if lhs._build != rhs._build {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._country != rhs._country {return false}
    if lhs._language != rhs._language {return false}
    if lhs._debug != rhs._debug {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSimConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSimConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}grade_configs\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.gradeConfigs) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gradeConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gradeConfigs, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSimConfig, rhs: Ei_ContractSimConfig) -> Bool {
    if lhs.gradeConfigs != rhs.gradeConfigs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSimConfig.ContractGradeSimConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractSimConfig.protoMessageName + ".ContractGradeSimConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}grade\0\u{3}goal_params\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.goalParams) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    if !self.goalParams.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goalParams, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSimConfig.ContractGradeSimConfig, rhs: Ei_ContractSimConfig.ContractGradeSimConfig) -> Bool {
    if lhs._grade != rhs._grade {return false}
    if lhs.goalParams != rhs.goalParams {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSimConfig.ContractGradeSimConfig.GoalParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractSimConfig.ContractGradeSimConfig.protoMessageName + ".GoalParams"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}target_se\0\u{3}cps_mult\0\u{3}earnings_mult\0\u{3}time_efficacy\0\u{3}hab_capacity_mult\0\u{3}epic_research_budget\0\u{3}elr_mult\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._targetSe) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._cpsMult) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._earningsMult) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._timeEfficacy) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._habCapacityMult) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._epicResearchBudget) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._elrMult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._targetSe {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._cpsMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._earningsMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._timeEfficacy {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._habCapacityMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._epicResearchBudget {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._elrMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSimConfig.ContractGradeSimConfig.GoalParams, rhs: Ei_ContractSimConfig.ContractGradeSimConfig.GoalParams) -> Bool {
    if lhs._targetSe != rhs._targetSe {return false}
    if lhs._cpsMult != rhs._cpsMult {return false}
    if lhs._elrMult != rhs._elrMult {return false}
    if lhs._earningsMult != rhs._earningsMult {return false}
    if lhs._timeEfficacy != rhs._timeEfficacy {return false}
    if lhs._habCapacityMult != rhs._habCapacityMult {return false}
    if lhs._epicResearchBudget != rhs._epicResearchBudget {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSimPoll: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSimPoll"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}client_version\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSimPoll, rhs: Ei_ContractSimPoll) -> Bool {
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSimPollResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSimPollResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_to_simulate\0\u{3}sim_config\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._contractToSimulate) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._simConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractToSimulate {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._simConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSimPollResponse, rhs: Ei_ContractSimPollResponse) -> Bool {
    if lhs._contractToSimulate != rhs._contractToSimulate {return false}
    if lhs._simConfig != rhs._simConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSimResultUpdate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractSimResultUpdate"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_id\0\u{3}goal_infos\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractID) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.goalInfos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.goalInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.goalInfos, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSimResultUpdate, rhs: Ei_ContractSimResultUpdate) -> Bool {
    if lhs._contractID != rhs._contractID {return false}
    if lhs.goalInfos != rhs.goalInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractSimResultUpdate.GoalInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractSimResultUpdate.protoMessageName + ".GoalInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}grade\0\u{3}goal_index\0\u{3}projected_eggs_laid\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._goalIndex) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._projectedEggsLaid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._goalIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._projectedEggsLaid {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractSimResultUpdate.GoalInfo, rhs: Ei_ContractSimResultUpdate.GoalInfo) -> Bool {
    if lhs._grade != rhs._grade {return false}
    if lhs._goalIndex != rhs._goalIndex {return false}
    if lhs._projectedEggsLaid != rhs._projectedEggsLaid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}soul_eggs\0\u{3}user_id\0\u{4}\u{3}client_version\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._soulEggs) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._soulEggs {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractsRequest, rhs: Ei_ContractsRequest) -> Bool {
    if lhs._soulEggs != rhs._soulEggs {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}contracts\0\u{3}server_time\0\u{3}max_eop\0\u{3}warning_message\0\u{3}total_eop\0\u{3}custom_eggs\0\u{3}current_season\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.contracts) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._serverTime) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._maxEop) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._warningMessage) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._totalEop) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.customEggs) }()
      case 7: try { try decoder.decodeSingularMessageField(value: &self._currentSeason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.contracts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contracts, fieldNumber: 1)
    }
    try { if let v = self._serverTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._maxEop {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._warningMessage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._totalEop {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    if !self.customEggs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.customEggs, fieldNumber: 6)
    }
    try { if let v = self._currentSeason {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractsResponse, rhs: Ei_ContractsResponse) -> Bool {
    if lhs.contracts != rhs.contracts {return false}
    if lhs.customEggs != rhs.customEggs {return false}
    if lhs._warningMessage != rhs._warningMessage {return false}
    if lhs._totalEop != rhs._totalEop {return false}
    if lhs._serverTime != rhs._serverTime {return false}
    if lhs._maxEop != rhs._maxEop {return false}
    if lhs._currentSeason != rhs._currentSeason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractCoopStatusRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractCoopStatusRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}user_id\0\u{3}client_version\0\u{1}rinfo\0\u{3}client_timestamp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._clientTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._clientTimestamp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCoopStatusRequest, rhs: Ei_ContractCoopStatusRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs._clientTimestamp != rhs._clientTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_FarmProductionParams: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".FarmProductionParams"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}farm_population\0\u{3}farm_capacity\0\u{1}elr\0\u{1}ihr\0\u{1}sr\0\u{1}delivered\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._farmPopulation) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._farmCapacity) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._elr) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._ihr) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._sr) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._delivered) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._farmPopulation {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._farmCapacity {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._elr {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._ihr {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._sr {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._delivered {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_FarmProductionParams, rhs: Ei_FarmProductionParams) -> Bool {
    if lhs._farmPopulation != rhs._farmPopulation {return false}
    if lhs._farmCapacity != rhs._farmCapacity {return false}
    if lhs._elr != rhs._elr {return false}
    if lhs._ihr != rhs._ihr {return false}
    if lhs._sr != rhs._sr {return false}
    if lhs._delivered != rhs._delivered {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_PlayerFarmInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerFarmInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}soul_eggs\0\u{3}eggs_of_prophecy\0\u{3}permit_level\0\u{3}hyperloop_station\0\u{3}egg_medal_level\0\u{3}epic_research\0\u{3}egg_type\0\u{3}cash_on_hand\0\u{1}habs\0\u{3}hab_population\0\u{1}vehicles\0\u{3}train_length\0\u{3}silos_owned\0\u{3}common_research\0\u{3}active_boosts\0\u{3}boost_tokens_on_hand\0\u{3}equipped_artifacts\0\u{3}artifact_inventory_score\0\u{3}farm_appearance\0\u{3}client_version\0\u{3}hab_capacity\0\u{1}timestamp\0")

  fileprivate class _StorageClass {
    var _clientVersion: UInt32? = nil
    var _soulEggs: Double? = nil
    var _eggsOfProphecy: UInt64? = nil
    var _permitLevel: UInt32? = nil
    var _hyperloopStation: Bool? = nil
    var _eggMedalLevel: [UInt32] = []
    var _epicResearch: [Ei_Backup.ResearchItem] = []
    var _eggType: Ei_Egg? = nil
    var _cashOnHand: Double? = nil
    var _habs: [UInt32] = []
    var _habPopulation: [UInt64] = []
    var _habCapacity: [UInt64] = []
    var _vehicles: [UInt32] = []
    var _trainLength: [UInt32] = []
    var _silosOwned: UInt32? = nil
    var _commonResearch: [Ei_Backup.ResearchItem] = []
    var _activeBoosts: [Ei_Backup.ActiveBoost] = []
    var _boostTokensOnHand: UInt32? = nil
    var _equippedArtifacts: [Ei_CompleteArtifact] = []
    var _artifactInventoryScore: UInt64? = nil
    var _farmAppearance: Ei_ShellDB.FarmConfiguration? = nil
    var _timestamp: Double? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _clientVersion = source._clientVersion
      _soulEggs = source._soulEggs
      _eggsOfProphecy = source._eggsOfProphecy
      _permitLevel = source._permitLevel
      _hyperloopStation = source._hyperloopStation
      _eggMedalLevel = source._eggMedalLevel
      _epicResearch = source._epicResearch
      _eggType = source._eggType
      _cashOnHand = source._cashOnHand
      _habs = source._habs
      _habPopulation = source._habPopulation
      _habCapacity = source._habCapacity
      _vehicles = source._vehicles
      _trainLength = source._trainLength
      _silosOwned = source._silosOwned
      _commonResearch = source._commonResearch
      _activeBoosts = source._activeBoosts
      _boostTokensOnHand = source._boostTokensOnHand
      _equippedArtifacts = source._equippedArtifacts
      _artifactInventoryScore = source._artifactInventoryScore
      _farmAppearance = source._farmAppearance
      _timestamp = source._timestamp
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._soulEggs) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._eggsOfProphecy) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._permitLevel) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._hyperloopStation) }()
        case 5: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._eggMedalLevel) }()
        case 6: try { try decoder.decodeRepeatedMessageField(value: &_storage._epicResearch) }()
        case 7: try { try decoder.decodeSingularEnumField(value: &_storage._eggType) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._cashOnHand) }()
        case 9: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._habs) }()
        case 10: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._habPopulation) }()
        case 11: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._vehicles) }()
        case 12: try { try decoder.decodeRepeatedUInt32Field(value: &_storage._trainLength) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._silosOwned) }()
        case 14: try { try decoder.decodeRepeatedMessageField(value: &_storage._commonResearch) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._activeBoosts) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokensOnHand) }()
        case 17: try { try decoder.decodeRepeatedMessageField(value: &_storage._equippedArtifacts) }()
        case 18: try { try decoder.decodeSingularUInt64Field(value: &_storage._artifactInventoryScore) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._farmAppearance) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientVersion) }()
        case 21: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._habCapacity) }()
        case 22: try { try decoder.decodeSingularDoubleField(value: &_storage._timestamp) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._soulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._eggsOfProphecy {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._permitLevel {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._hyperloopStation {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      if !_storage._eggMedalLevel.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._eggMedalLevel, fieldNumber: 5)
      }
      if !_storage._epicResearch.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._epicResearch, fieldNumber: 6)
      }
      try { if let v = _storage._eggType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._cashOnHand {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      if !_storage._habs.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._habs, fieldNumber: 9)
      }
      if !_storage._habPopulation.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._habPopulation, fieldNumber: 10)
      }
      if !_storage._vehicles.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._vehicles, fieldNumber: 11)
      }
      if !_storage._trainLength.isEmpty {
        try visitor.visitRepeatedUInt32Field(value: _storage._trainLength, fieldNumber: 12)
      }
      try { if let v = _storage._silosOwned {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      } }()
      if !_storage._commonResearch.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._commonResearch, fieldNumber: 14)
      }
      if !_storage._activeBoosts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._activeBoosts, fieldNumber: 15)
      }
      try { if let v = _storage._boostTokensOnHand {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      } }()
      if !_storage._equippedArtifacts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._equippedArtifacts, fieldNumber: 17)
      }
      try { if let v = _storage._artifactInventoryScore {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._farmAppearance {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._clientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      if !_storage._habCapacity.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._habCapacity, fieldNumber: 21)
      }
      try { if let v = _storage._timestamp {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 22)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_PlayerFarmInfo, rhs: Ei_PlayerFarmInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._clientVersion != rhs_storage._clientVersion {return false}
        if _storage._soulEggs != rhs_storage._soulEggs {return false}
        if _storage._eggsOfProphecy != rhs_storage._eggsOfProphecy {return false}
        if _storage._permitLevel != rhs_storage._permitLevel {return false}
        if _storage._hyperloopStation != rhs_storage._hyperloopStation {return false}
        if _storage._eggMedalLevel != rhs_storage._eggMedalLevel {return false}
        if _storage._epicResearch != rhs_storage._epicResearch {return false}
        if _storage._eggType != rhs_storage._eggType {return false}
        if _storage._cashOnHand != rhs_storage._cashOnHand {return false}
        if _storage._habs != rhs_storage._habs {return false}
        if _storage._habPopulation != rhs_storage._habPopulation {return false}
        if _storage._habCapacity != rhs_storage._habCapacity {return false}
        if _storage._vehicles != rhs_storage._vehicles {return false}
        if _storage._trainLength != rhs_storage._trainLength {return false}
        if _storage._silosOwned != rhs_storage._silosOwned {return false}
        if _storage._commonResearch != rhs_storage._commonResearch {return false}
        if _storage._activeBoosts != rhs_storage._activeBoosts {return false}
        if _storage._boostTokensOnHand != rhs_storage._boostTokensOnHand {return false}
        if _storage._equippedArtifacts != rhs_storage._equippedArtifacts {return false}
        if _storage._artifactInventoryScore != rhs_storage._artifactInventoryScore {return false}
        if _storage._farmAppearance != rhs_storage._farmAppearance {return false}
        if _storage._timestamp != rhs_storage._timestamp {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractCoopStatusResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractCoopStatusResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}total_amount\0\u{3}coop_identifier\0\u{1}contributors\0\u{3}seconds_remaining\0\u{3}all_members_reporting\0\u{3}grace_period_seconds_remaining\0\u{3}auto_generated\0\u{3}creator_id\0\u{1}public\0\u{1}gifts\0\u{3}client_timestamp\0\u{3}chicken_runs\0\u{3}all_goals_achieved\0\u{3}cleared_for_exit\0\u{3}seconds_since_all_goals_achieved\0\u{1}grade\0\u{3}last_sync_DEP\0\u{3}response_status\0\u{3}background_sync\0")

  fileprivate class _StorageClass {
    var _responseStatus: Ei_ContractCoopStatusResponse.ResponseStatus? = nil
    var _contractIdentifier: String? = nil
    var _totalAmount: Double? = nil
    var _coopIdentifier: String? = nil
    var _grade: Ei_Contract.PlayerGrade? = nil
    var _contributors: [Ei_ContractCoopStatusResponse.ContributionInfo] = []
    var _autoGenerated: Bool? = nil
    var _public: Bool? = nil
    var _creatorID: String? = nil
    var _secondsRemaining: Double? = nil
    var _secondsSinceAllGoalsAchieved: Double? = nil
    var _allGoalsAchieved: Bool? = nil
    var _allMembersReporting: Bool? = nil
    var _gracePeriodSecondsRemaining: Double? = nil
    var _clearedForExit: Bool? = nil
    var _gifts: [Ei_ContractCoopStatusResponse.CoopGift] = []
    var _chickenRuns: [Ei_ContractCoopStatusResponse.ChickenRun] = []
    var _clientTimestamp: Double? = nil
    var _backgroundSync: Bool? = nil
    var _lastSyncDep: Double? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _responseStatus = source._responseStatus
      _contractIdentifier = source._contractIdentifier
      _totalAmount = source._totalAmount
      _coopIdentifier = source._coopIdentifier
      _grade = source._grade
      _contributors = source._contributors
      _autoGenerated = source._autoGenerated
      _public = source._public
      _creatorID = source._creatorID
      _secondsRemaining = source._secondsRemaining
      _secondsSinceAllGoalsAchieved = source._secondsSinceAllGoalsAchieved
      _allGoalsAchieved = source._allGoalsAchieved
      _allMembersReporting = source._allMembersReporting
      _gracePeriodSecondsRemaining = source._gracePeriodSecondsRemaining
      _clearedForExit = source._clearedForExit
      _gifts = source._gifts
      _chickenRuns = source._chickenRuns
      _clientTimestamp = source._clientTimestamp
      _backgroundSync = source._backgroundSync
      _lastSyncDep = source._lastSyncDep
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._contractIdentifier) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._totalAmount) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._coopIdentifier) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._contributors) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsRemaining) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._allMembersReporting) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._gracePeriodSecondsRemaining) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._autoGenerated) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._creatorID) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._public) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._gifts) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._clientTimestamp) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._chickenRuns) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._allGoalsAchieved) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._clearedForExit) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsSinceAllGoalsAchieved) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._grade) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._lastSyncDep) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._responseStatus) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._backgroundSync) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._contractIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._totalAmount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._coopIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      if !_storage._contributors.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contributors, fieldNumber: 4)
      }
      try { if let v = _storage._secondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._allMembersReporting {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._gracePeriodSecondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._autoGenerated {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._creatorID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._public {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      if !_storage._gifts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gifts, fieldNumber: 11)
      }
      try { if let v = _storage._clientTimestamp {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      if !_storage._chickenRuns.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._chickenRuns, fieldNumber: 13)
      }
      try { if let v = _storage._allGoalsAchieved {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._clearedForExit {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._secondsSinceAllGoalsAchieved {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._grade {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._lastSyncDep {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._responseStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._backgroundSync {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCoopStatusResponse, rhs: Ei_ContractCoopStatusResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._responseStatus != rhs_storage._responseStatus {return false}
        if _storage._contractIdentifier != rhs_storage._contractIdentifier {return false}
        if _storage._totalAmount != rhs_storage._totalAmount {return false}
        if _storage._coopIdentifier != rhs_storage._coopIdentifier {return false}
        if _storage._grade != rhs_storage._grade {return false}
        if _storage._contributors != rhs_storage._contributors {return false}
        if _storage._autoGenerated != rhs_storage._autoGenerated {return false}
        if _storage._public != rhs_storage._public {return false}
        if _storage._creatorID != rhs_storage._creatorID {return false}
        if _storage._secondsRemaining != rhs_storage._secondsRemaining {return false}
        if _storage._secondsSinceAllGoalsAchieved != rhs_storage._secondsSinceAllGoalsAchieved {return false}
        if _storage._allGoalsAchieved != rhs_storage._allGoalsAchieved {return false}
        if _storage._allMembersReporting != rhs_storage._allMembersReporting {return false}
        if _storage._gracePeriodSecondsRemaining != rhs_storage._gracePeriodSecondsRemaining {return false}
        if _storage._clearedForExit != rhs_storage._clearedForExit {return false}
        if _storage._gifts != rhs_storage._gifts {return false}
        if _storage._chickenRuns != rhs_storage._chickenRuns {return false}
        if _storage._clientTimestamp != rhs_storage._clientTimestamp {return false}
        if _storage._backgroundSync != rhs_storage._backgroundSync {return false}
        if _storage._lastSyncDep != rhs_storage._lastSyncDep {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractCoopStatusResponse.ResponseStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NO_ERROR\0\u{1}MISSING_USER\0\u{1}MISSING_COOP_ID\0\u{1}MISSING_CONTRACT_ID\0\u{1}MEMBERSHIP_NOT_FOUND\0\u{1}COOP_NOT_FOUND\0\u{1}CONTRACT_NOT_FOUND\0\u{1}INVALID_MEMBERSHIP\0\u{2}m\u{7}NO_HTTP_RESPONSE\0")
}

extension Ei_ContractCoopStatusResponse.MemberStatus: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0VALID\0\u{1}KICKED_INACTIVE\0\u{1}KICKED_PRIVATE\0\u{1}KICKED_CHEATS\0\u{1}KICKED_LEECH\0")
}

extension Ei_ContractCoopStatusResponse.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN\0\u{1}LOBBY\0\u{1}ACTIVE\0\u{1}COMPLETE\0\u{1}FINALIZED\0")
}

extension Ei_ContractCoopStatusResponse.ContributionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractCoopStatusResponse.protoMessageName + ".ContributionInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}user_name\0\u{3}contribution_amount\0\u{1}active\0\u{1}platform\0\u{3}contribution_rate\0\u{3}time_cheat_detected\0\u{3}rank_change\0\u{3}push_id\0\u{3}ban_votes\0\u{3}soul_power\0\u{3}boost_tokens\0\u{3}buff_history\0\u{3}boost_tokens_spent\0\u{3}production_params\0\u{1}leech\0\u{1}autojoined\0\u{3}farm_info\0\u{3}contract_identifier\0\u{3}chicken_run_cooldown\0\u{1}uuid\0\u{1}finalized\0\u{3}recently_active\0\u{3}cc_member\0")

  fileprivate class _StorageClass {
    var _uuid: String? = nil
    var _userID: String? = nil
    var _userName: String? = nil
    var _contractIdentifier: String? = nil
    var _contributionAmount: Double? = nil
    var _contributionRate: Double? = nil
    var _soulPower: Double? = nil
    var _productionParams: Ei_FarmProductionParams? = nil
    var _farmInfo: Ei_PlayerFarmInfo? = nil
    var _rankChange: Int32? = nil
    var _recentlyActive: Bool? = nil
    var _active: Bool? = nil
    var _ccMember: Bool? = nil
    var _leech: Bool? = nil
    var _finalized: Bool? = nil
    var _timeCheatDetected: Bool? = nil
    var _platform: Ei_Platform? = nil
    var _pushID: String? = nil
    var _banVotes: UInt32? = nil
    var _autojoined: Bool? = nil
    var _boostTokens: UInt32? = nil
    var _boostTokensSpent: UInt32? = nil
    var _buffHistory: [Ei_CoopBuffState] = []
    var _chickenRunCooldown: Double? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _uuid = source._uuid
      _userID = source._userID
      _userName = source._userName
      _contractIdentifier = source._contractIdentifier
      _contributionAmount = source._contributionAmount
      _contributionRate = source._contributionRate
      _soulPower = source._soulPower
      _productionParams = source._productionParams
      _farmInfo = source._farmInfo
      _rankChange = source._rankChange
      _recentlyActive = source._recentlyActive
      _active = source._active
      _ccMember = source._ccMember
      _leech = source._leech
      _finalized = source._finalized
      _timeCheatDetected = source._timeCheatDetected
      _platform = source._platform
      _pushID = source._pushID
      _banVotes = source._banVotes
      _autojoined = source._autojoined
      _boostTokens = source._boostTokens
      _boostTokensSpent = source._boostTokensSpent
      _buffHistory = source._buffHistory
      _chickenRunCooldown = source._chickenRunCooldown
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userName) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._contributionAmount) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._active) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._platform) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._contributionRate) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._timeCheatDetected) }()
        case 8: try { try decoder.decodeSingularInt32Field(value: &_storage._rankChange) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._pushID) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._banVotes) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._soulPower) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokens) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._buffHistory) }()
        case 14: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokensSpent) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._productionParams) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._leech) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._autojoined) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._farmInfo) }()
        case 19: try { try decoder.decodeSingularStringField(value: &_storage._contractIdentifier) }()
        case 20: try { try decoder.decodeSingularDoubleField(value: &_storage._chickenRunCooldown) }()
        case 21: try { try decoder.decodeSingularStringField(value: &_storage._uuid) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._finalized) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._recentlyActive) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._ccMember) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._userName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._contributionAmount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._active {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._platform {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._contributionRate {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._timeCheatDetected {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._rankChange {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._pushID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._banVotes {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._soulPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._boostTokens {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      if !_storage._buffHistory.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._buffHistory, fieldNumber: 13)
      }
      try { if let v = _storage._boostTokensSpent {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._productionParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._leech {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._autojoined {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._farmInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._contractIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._chickenRunCooldown {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._uuid {
        try visitor.visitSingularStringField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._finalized {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._recentlyActive {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._ccMember {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCoopStatusResponse.ContributionInfo, rhs: Ei_ContractCoopStatusResponse.ContributionInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._uuid != rhs_storage._uuid {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._contractIdentifier != rhs_storage._contractIdentifier {return false}
        if _storage._contributionAmount != rhs_storage._contributionAmount {return false}
        if _storage._contributionRate != rhs_storage._contributionRate {return false}
        if _storage._soulPower != rhs_storage._soulPower {return false}
        if _storage._productionParams != rhs_storage._productionParams {return false}
        if _storage._farmInfo != rhs_storage._farmInfo {return false}
        if _storage._rankChange != rhs_storage._rankChange {return false}
        if _storage._recentlyActive != rhs_storage._recentlyActive {return false}
        if _storage._active != rhs_storage._active {return false}
        if _storage._ccMember != rhs_storage._ccMember {return false}
        if _storage._leech != rhs_storage._leech {return false}
        if _storage._finalized != rhs_storage._finalized {return false}
        if _storage._timeCheatDetected != rhs_storage._timeCheatDetected {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._pushID != rhs_storage._pushID {return false}
        if _storage._banVotes != rhs_storage._banVotes {return false}
        if _storage._autojoined != rhs_storage._autojoined {return false}
        if _storage._boostTokens != rhs_storage._boostTokens {return false}
        if _storage._boostTokensSpent != rhs_storage._boostTokensSpent {return false}
        if _storage._buffHistory != rhs_storage._buffHistory {return false}
        if _storage._chickenRunCooldown != rhs_storage._chickenRunCooldown {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractCoopStatusResponse.CoopGift: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractCoopStatusResponse.protoMessageName + ".CoopGift"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{1}amount\0\u{3}user_name\0\u{1}tracking\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._userName) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._tracking) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._amount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._userName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._tracking {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCoopStatusResponse.CoopGift, rhs: Ei_ContractCoopStatusResponse.CoopGift) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._userName != rhs._userName {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._tracking != rhs._tracking {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractCoopStatusResponse.ChickenRun: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ContractCoopStatusResponse.protoMessageName + ".ChickenRun"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{1}amount\0\u{3}user_name\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._userName) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._amount {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._userName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCoopStatusResponse.ChickenRun, rhs: Ei_ContractCoopStatusResponse.ChickenRun) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._userName != rhs._userName {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LocalContract: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LocalContract"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}contract\0\u{3}coop_identifier\0\u{3}time_accepted\0\u{1}cancelled\0\u{3}coop_shared_end_time\0\u{3}last_amount_when_reward_given\0\u{1}accepted\0\u{1}new\0\u{3}coop_grace_period_end_time\0\u{3}coop_contribution_finalized\0\u{3}coop_last_uploaded_contribution\0\u{3}boosts_used\0\u{3}coop_user_id\0\u{3}num_goals_achieved\0\u{1}league\0\u{3}last_nag_time\0\u{3}coop_share_farm\0\u{1}grade\0\u{1}evaluation\0\u{3}points_replay\0\u{3}reported_uuids\0\u{3}coop_simulation_end_time\0\u{3}max_farm_size_reached\0")

  fileprivate class _StorageClass {
    var _contract: Ei_Contract? = nil
    var _coopIdentifier: String? = nil
    var _accepted: Bool? = nil
    var _timeAccepted: Double? = nil
    var _cancelled: Bool? = nil
    var _new: Bool? = nil
    var _coopSharedEndTime: Double? = nil
    var _coopSimulationEndTime: Double? = nil
    var _coopGracePeriodEndTime: Double? = nil
    var _coopContributionFinalized: Bool? = nil
    var _coopLastUploadedContribution: Double? = nil
    var _coopUserID: String? = nil
    var _coopShareFarm: Bool? = nil
    var _lastAmountWhenRewardGiven: Double? = nil
    var _numGoalsAchieved: UInt32? = nil
    var _maxFarmSizeReached: Double? = nil
    var _boostsUsed: UInt32? = nil
    var _pointsReplay: Bool? = nil
    var _league: UInt32? = nil
    var _grade: Ei_Contract.PlayerGrade? = nil
    var _lastNagTime: Double? = nil
    var _evaluation: Ei_ContractEvaluation? = nil
    var _reportedUuids: [String] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _contract = source._contract
      _coopIdentifier = source._coopIdentifier
      _accepted = source._accepted
      _timeAccepted = source._timeAccepted
      _cancelled = source._cancelled
      _new = source._new
      _coopSharedEndTime = source._coopSharedEndTime
      _coopSimulationEndTime = source._coopSimulationEndTime
      _coopGracePeriodEndTime = source._coopGracePeriodEndTime
      _coopContributionFinalized = source._coopContributionFinalized
      _coopLastUploadedContribution = source._coopLastUploadedContribution
      _coopUserID = source._coopUserID
      _coopShareFarm = source._coopShareFarm
      _lastAmountWhenRewardGiven = source._lastAmountWhenRewardGiven
      _numGoalsAchieved = source._numGoalsAchieved
      _maxFarmSizeReached = source._maxFarmSizeReached
      _boostsUsed = source._boostsUsed
      _pointsReplay = source._pointsReplay
      _league = source._league
      _grade = source._grade
      _lastNagTime = source._lastNagTime
      _evaluation = source._evaluation
      _reportedUuids = source._reportedUuids
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._contract) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coopIdentifier) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._timeAccepted) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._cancelled) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._coopSharedEndTime) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._lastAmountWhenRewardGiven) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._accepted) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._new) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._coopGracePeriodEndTime) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._coopContributionFinalized) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._coopLastUploadedContribution) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostsUsed) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._coopUserID) }()
        case 14: try { try decoder.decodeSingularUInt32Field(value: &_storage._numGoalsAchieved) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._league) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._lastNagTime) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._coopShareFarm) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._grade) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._evaluation) }()
        case 20: try { try decoder.decodeSingularBoolField(value: &_storage._pointsReplay) }()
        case 21: try { try decoder.decodeRepeatedStringField(value: &_storage._reportedUuids) }()
        case 22: try { try decoder.decodeSingularDoubleField(value: &_storage._coopSimulationEndTime) }()
        case 23: try { try decoder.decodeSingularDoubleField(value: &_storage._maxFarmSizeReached) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._contract {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._coopIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._timeAccepted {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._cancelled {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._coopSharedEndTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._lastAmountWhenRewardGiven {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._accepted {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._new {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._coopGracePeriodEndTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._coopContributionFinalized {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._coopLastUploadedContribution {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._boostsUsed {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._coopUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._numGoalsAchieved {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._league {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._lastNagTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._coopShareFarm {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._grade {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._evaluation {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._pointsReplay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 20)
      } }()
      if !_storage._reportedUuids.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._reportedUuids, fieldNumber: 21)
      }
      try { if let v = _storage._coopSimulationEndTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._maxFarmSizeReached {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 23)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LocalContract, rhs: Ei_LocalContract) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._contract != rhs_storage._contract {return false}
        if _storage._coopIdentifier != rhs_storage._coopIdentifier {return false}
        if _storage._accepted != rhs_storage._accepted {return false}
        if _storage._timeAccepted != rhs_storage._timeAccepted {return false}
        if _storage._cancelled != rhs_storage._cancelled {return false}
        if _storage._new != rhs_storage._new {return false}
        if _storage._coopSharedEndTime != rhs_storage._coopSharedEndTime {return false}
        if _storage._coopSimulationEndTime != rhs_storage._coopSimulationEndTime {return false}
        if _storage._coopGracePeriodEndTime != rhs_storage._coopGracePeriodEndTime {return false}
        if _storage._coopContributionFinalized != rhs_storage._coopContributionFinalized {return false}
        if _storage._coopLastUploadedContribution != rhs_storage._coopLastUploadedContribution {return false}
        if _storage._coopUserID != rhs_storage._coopUserID {return false}
        if _storage._coopShareFarm != rhs_storage._coopShareFarm {return false}
        if _storage._lastAmountWhenRewardGiven != rhs_storage._lastAmountWhenRewardGiven {return false}
        if _storage._numGoalsAchieved != rhs_storage._numGoalsAchieved {return false}
        if _storage._maxFarmSizeReached != rhs_storage._maxFarmSizeReached {return false}
        if _storage._boostsUsed != rhs_storage._boostsUsed {return false}
        if _storage._pointsReplay != rhs_storage._pointsReplay {return false}
        if _storage._league != rhs_storage._league {return false}
        if _storage._grade != rhs_storage._grade {return false}
        if _storage._lastNagTime != rhs_storage._lastNagTime {return false}
        if _storage._evaluation != rhs_storage._evaluation {return false}
        if _storage._reportedUuids != rhs_storage._reportedUuids {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MyContracts: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MyContracts"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}contracts\0\u{1}archive\0\u{3}contract_ids_seen\0\u{3}current_coop_statuses\0\u{3}last_cpi\0\u{3}initial_grade_revealed\0\u{3}last_grade_progress_shown\0\u{3}show_advanced_evaluations\0\u{3}custom_egg_info\0")

  fileprivate class _StorageClass {
    var _contractIdsSeen: [String] = []
    var _contracts: [Ei_LocalContract] = []
    var _archive: [Ei_LocalContract] = []
    var _currentCoopStatuses: [Ei_ContractCoopStatusResponse] = []
    var _lastCpi: Ei_ContractPlayerInfo? = nil
    var _initialGradeRevealed: Bool? = nil
    var _lastGradeProgressShown: Double? = nil
    var _showAdvancedEvaluations: Bool? = nil
    var _customEggInfo: [Ei_CustomEgg] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _contractIdsSeen = source._contractIdsSeen
      _contracts = source._contracts
      _archive = source._archive
      _currentCoopStatuses = source._currentCoopStatuses
      _lastCpi = source._lastCpi
      _initialGradeRevealed = source._initialGradeRevealed
      _lastGradeProgressShown = source._lastGradeProgressShown
      _showAdvancedEvaluations = source._showAdvancedEvaluations
      _customEggInfo = source._customEggInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._contracts) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._archive) }()
        case 3: try { try decoder.decodeRepeatedStringField(value: &_storage._contractIdsSeen) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._currentCoopStatuses) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._lastCpi) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._initialGradeRevealed) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._lastGradeProgressShown) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._showAdvancedEvaluations) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._customEggInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._contracts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._contracts, fieldNumber: 1)
      }
      if !_storage._archive.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._archive, fieldNumber: 2)
      }
      if !_storage._contractIdsSeen.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._contractIdsSeen, fieldNumber: 3)
      }
      if !_storage._currentCoopStatuses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._currentCoopStatuses, fieldNumber: 4)
      }
      try { if let v = _storage._lastCpi {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._initialGradeRevealed {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._lastGradeProgressShown {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._showAdvancedEvaluations {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      if !_storage._customEggInfo.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._customEggInfo, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MyContracts, rhs: Ei_MyContracts) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._contractIdsSeen != rhs_storage._contractIdsSeen {return false}
        if _storage._contracts != rhs_storage._contracts {return false}
        if _storage._archive != rhs_storage._archive {return false}
        if _storage._currentCoopStatuses != rhs_storage._currentCoopStatuses {return false}
        if _storage._lastCpi != rhs_storage._lastCpi {return false}
        if _storage._initialGradeRevealed != rhs_storage._initialGradeRevealed {return false}
        if _storage._lastGradeProgressShown != rhs_storage._lastGradeProgressShown {return false}
        if _storage._showAdvancedEvaluations != rhs_storage._showAdvancedEvaluations {return false}
        if _storage._customEggInfo != rhs_storage._customEggInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_QueryCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}client_version\0\u{1}league\0\u{1}rinfo\0\u{1}grade\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._league) }()
      case 5: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._league {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_QueryCoopRequest, rhs: Ei_QueryCoopRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._league != rhs._league {return false}
    if lhs._grade != rhs._grade {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_QueryCoopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".QueryCoopResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}exists\0\u{1}full\0\u{1}banned\0\u{3}different_league\0\u{1}expired\0\u{3}different_grade\0\u{3}cc_only\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._exists) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._full) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._banned) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._differentLeague) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._expired) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._differentGrade) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._ccOnly) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._exists {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._full {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._banned {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._differentLeague {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._expired {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._differentGrade {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._ccOnly {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_QueryCoopResponse, rhs: Ei_QueryCoopResponse) -> Bool {
    if lhs._exists != rhs._exists {return false}
    if lhs._full != rhs._full {return false}
    if lhs._expired != rhs._expired {return false}
    if lhs._differentLeague != rhs._differentLeague {return false}
    if lhs._differentGrade != rhs._differentGrade {return false}
    if lhs._ccOnly != rhs._ccOnly {return false}
    if lhs._banned != rhs._banned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CreateCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}seconds_remaining\0\u{3}user_id\0\u{3}user_name\0\u{1}platform\0\u{3}client_version\0\u{3}soul_power\0\u{1}league\0\u{1}rinfo\0\u{1}eop\0\u{1}grade\0\u{1}public\0\u{3}cc_only\0\u{3}points_replay\0\u{3}allow_all_grades\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _contractIdentifier: String? = nil
    var _coopIdentifier: String? = nil
    var _public: Bool? = nil
    var _ccOnly: Bool? = nil
    var _allowAllGrades: Bool? = nil
    var _secondsRemaining: Double? = nil
    var _userID: String? = nil
    var _userName: String? = nil
    var _soulPower: Double? = nil
    var _eop: Double? = nil
    var _league: UInt32? = nil
    var _grade: Ei_Contract.PlayerGrade? = nil
    var _pointsReplay: Bool? = nil
    var _platform: Ei_Platform? = nil
    var _clientVersion: UInt32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _contractIdentifier = source._contractIdentifier
      _coopIdentifier = source._coopIdentifier
      _public = source._public
      _ccOnly = source._ccOnly
      _allowAllGrades = source._allowAllGrades
      _secondsRemaining = source._secondsRemaining
      _userID = source._userID
      _userName = source._userName
      _soulPower = source._soulPower
      _eop = source._eop
      _league = source._league
      _grade = source._grade
      _pointsReplay = source._pointsReplay
      _platform = source._platform
      _clientVersion = source._clientVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._contractIdentifier) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coopIdentifier) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsRemaining) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._userName) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._platform) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientVersion) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._soulPower) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._league) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._eop) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._grade) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._public) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._ccOnly) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._pointsReplay) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._allowAllGrades) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._contractIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._coopIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._secondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._userName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._platform {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._clientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._soulPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._league {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._eop {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._grade {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._public {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._ccOnly {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._pointsReplay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._allowAllGrades {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CreateCoopRequest, rhs: Ei_CreateCoopRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._contractIdentifier != rhs_storage._contractIdentifier {return false}
        if _storage._coopIdentifier != rhs_storage._coopIdentifier {return false}
        if _storage._public != rhs_storage._public {return false}
        if _storage._ccOnly != rhs_storage._ccOnly {return false}
        if _storage._allowAllGrades != rhs_storage._allowAllGrades {return false}
        if _storage._secondsRemaining != rhs_storage._secondsRemaining {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._soulPower != rhs_storage._soulPower {return false}
        if _storage._eop != rhs_storage._eop {return false}
        if _storage._league != rhs_storage._league {return false}
        if _storage._grade != rhs_storage._grade {return false}
        if _storage._pointsReplay != rhs_storage._pointsReplay {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._clientVersion != rhs_storage._clientVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CreateCoopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CreateCoopResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{1}message\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CreateCoopResponse, rhs: Ei_CreateCoopResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_JoinCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}user_id\0\u{3}user_name\0\u{1}platform\0\u{4}\u{2}client_version\0\u{3}soul_power\0\u{1}league\0\u{1}rinfo\0\u{3}seconds_remaining\0\u{1}eop\0\u{1}grade\0\u{3}points_replay\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _contractIdentifier: String? = nil
    var _coopIdentifier: String? = nil
    var _userID: String? = nil
    var _userName: String? = nil
    var _soulPower: Double? = nil
    var _eop: Double? = nil
    var _league: UInt32? = nil
    var _grade: Ei_Contract.PlayerGrade? = nil
    var _pointsReplay: Bool? = nil
    var _platform: Ei_Platform? = nil
    var _secondsRemaining: Double? = nil
    var _clientVersion: UInt32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _contractIdentifier = source._contractIdentifier
      _coopIdentifier = source._coopIdentifier
      _userID = source._userID
      _userName = source._userName
      _soulPower = source._soulPower
      _eop = source._eop
      _league = source._league
      _grade = source._grade
      _pointsReplay = source._pointsReplay
      _platform = source._platform
      _secondsRemaining = source._secondsRemaining
      _clientVersion = source._clientVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._contractIdentifier) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._coopIdentifier) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._userName) }()
        case 5: try { try decoder.decodeSingularEnumField(value: &_storage._platform) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientVersion) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._soulPower) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._league) }()
        case 10: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsRemaining) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._eop) }()
        case 13: try { try decoder.decodeSingularEnumField(value: &_storage._grade) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._pointsReplay) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._contractIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._coopIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._userName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._platform {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._clientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._soulPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._league {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._secondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._eop {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._grade {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._pointsReplay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_JoinCoopRequest, rhs: Ei_JoinCoopRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._contractIdentifier != rhs_storage._contractIdentifier {return false}
        if _storage._coopIdentifier != rhs_storage._coopIdentifier {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._soulPower != rhs_storage._soulPower {return false}
        if _storage._eop != rhs_storage._eop {return false}
        if _storage._league != rhs_storage._league {return false}
        if _storage._grade != rhs_storage._grade {return false}
        if _storage._pointsReplay != rhs_storage._pointsReplay {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._secondsRemaining != rhs_storage._secondsRemaining {return false}
        if _storage._clientVersion != rhs_storage._clientVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_JoinCoopResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".JoinCoopResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{1}message\0\u{3}seconds_remaining\0\u{1}banned\0\u{3}coop_identifier\0\u{3}match_percent\0\u{3}num_members\0\u{1}status\0\u{1}grade\0\u{3}can_start\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._secondsRemaining) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._banned) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._matchPercent) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._numMembers) }()
      case 8: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._canStart) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._secondsRemaining {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._banned {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._matchPercent {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._numMembers {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._canStart {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_JoinCoopResponse, rhs: Ei_JoinCoopResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._message != rhs._message {return false}
    if lhs._banned != rhs._banned {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._secondsRemaining != rhs._secondsRemaining {return false}
    if lhs._matchPercent != rhs._matchPercent {return false}
    if lhs._numMembers != rhs._numMembers {return false}
    if lhs._status != rhs._status {return false}
    if lhs._grade != rhs._grade {return false}
    if lhs._canStart != rhs._canStart {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AutoJoinCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AutoJoinCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}user_id\0\u{3}user_name\0\u{3}soul_power\0\u{3}seconds_remaining\0\u{1}platform\0\u{3}client_version\0\u{1}league\0\u{1}rinfo\0\u{1}eop\0\u{2}\u{2}grade\0\u{4}\u{2}points_replay\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _contractIdentifier: String? = nil
    var _userID: String? = nil
    var _userName: String? = nil
    var _soulPower: Double? = nil
    var _eop: Double? = nil
    var _league: UInt32? = nil
    var _grade: Ei_Contract.PlayerGrade? = nil
    var _pointsReplay: Bool? = nil
    var _secondsRemaining: Double? = nil
    var _platform: Ei_Platform? = nil
    var _clientVersion: UInt32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _contractIdentifier = source._contractIdentifier
      _userID = source._userID
      _userName = source._userName
      _soulPower = source._soulPower
      _eop = source._eop
      _league = source._league
      _grade = source._grade
      _pointsReplay = source._pointsReplay
      _secondsRemaining = source._secondsRemaining
      _platform = source._platform
      _clientVersion = source._clientVersion
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._contractIdentifier) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._userName) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._soulPower) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsRemaining) }()
        case 6: try { try decoder.decodeSingularEnumField(value: &_storage._platform) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientVersion) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._league) }()
        case 9: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._eop) }()
        case 12: try { try decoder.decodeSingularEnumField(value: &_storage._grade) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._pointsReplay) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._contractIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._userName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._soulPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._secondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._platform {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._clientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._league {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._eop {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._grade {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._pointsReplay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AutoJoinCoopRequest, rhs: Ei_AutoJoinCoopRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._contractIdentifier != rhs_storage._contractIdentifier {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._userName != rhs_storage._userName {return false}
        if _storage._soulPower != rhs_storage._soulPower {return false}
        if _storage._eop != rhs_storage._eop {return false}
        if _storage._league != rhs_storage._league {return false}
        if _storage._grade != rhs_storage._grade {return false}
        if _storage._pointsReplay != rhs_storage._pointsReplay {return false}
        if _storage._secondsRemaining != rhs_storage._secondsRemaining {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._clientVersion != rhs_storage._clientVersion {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_UpdateCoopPermissionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCoopPermissionsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}requesting_user_id\0\u{1}public\0\u{3}client_version\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._requestingUserID) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._public) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 6: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._requestingUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._public {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_UpdateCoopPermissionsRequest, rhs: Ei_UpdateCoopPermissionsRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._requestingUserID != rhs._requestingUserID {return false}
    if lhs._public != rhs._public {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_UpdateCoopPermissionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UpdateCoopPermissionsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{1}message\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_UpdateCoopPermissionsResponse, rhs: Ei_UpdateCoopPermissionsResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaveCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeaveCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}player_identifier\0\u{4}\u{4}client_version\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._playerIdentifier) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._playerIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaveCoopRequest, rhs: Ei_LeaveCoopRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._playerIdentifier != rhs._playerIdentifier {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GiftPlayerCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GiftPlayerCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}player_identifier\0\u{3}requesting_user_id\0\u{1}amount\0\u{3}requesting_user_name\0\u{3}client_version\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._playerIdentifier) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._requestingUserID) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._amount) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._requestingUserName) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._playerIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._requestingUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._amount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._requestingUserName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_GiftPlayerCoopRequest, rhs: Ei_GiftPlayerCoopRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._playerIdentifier != rhs._playerIdentifier {return false}
    if lhs._requestingUserID != rhs._requestingUserID {return false}
    if lhs._requestingUserName != rhs._requestingUserName {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SendChickenRunCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SendChickenRunCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}player_identifier\0\u{3}requesting_user_id\0\u{3}farm_pop\0\u{3}requesting_user_name\0\u{3}client_version\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._playerIdentifier) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._requestingUserID) }()
      case 5: try { try decoder.decodeSingularUInt64Field(value: &self._farmPop) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._requestingUserName) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._playerIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._requestingUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._farmPop {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._requestingUserName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SendChickenRunCoopRequest, rhs: Ei_SendChickenRunCoopRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._playerIdentifier != rhs._playerIdentifier {return false}
    if lhs._requestingUserID != rhs._requestingUserID {return false}
    if lhs._requestingUserName != rhs._requestingUserName {return false}
    if lhs._farmPop != rhs._farmPop {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ReportPlayerCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReportPlayerCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}user_id\0\u{1}reason\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._reason {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ReportPlayerCoopRequest, rhs: Ei_ReportPlayerCoopRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._reason != rhs._reason {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ReportPlayerCoopRequest.Reason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN\0\u{1}OFFENSIVE_NAME\0\u{1}CHEATING\0\u{1}LEECHING\0")
}

extension Ei_KickPlayerCoopRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".KickPlayerCoopRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{3}player_identifier\0\u{3}requesting_user_id\0\u{4}\u{3}client_version\0\u{1}rinfo\0\u{1}reason\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._coopIdentifier) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._playerIdentifier) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._requestingUserID) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 8: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 9: try { try decoder.decodeSingularEnumField(value: &self._reason) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._coopIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._playerIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._requestingUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._reason {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_KickPlayerCoopRequest, rhs: Ei_KickPlayerCoopRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._coopIdentifier != rhs._coopIdentifier {return false}
    if lhs._playerIdentifier != rhs._playerIdentifier {return false}
    if lhs._requestingUserID != rhs._requestingUserID {return false}
    if lhs._reason != rhs._reason {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_KickPlayerCoopRequest.Reason: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0INVALID\0\u{1}CHEATER\0\u{1}IDLE\0\u{1}LEECH\0\u{1}PRIVATE\0")
}

extension Ei_IdleSessionSummary: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".IdleSessionSummary"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}time_away\0\u{3}time_simulated\0\u{3}silos_owned\0\u{3}average_elr\0\u{3}average_msr\0\u{3}average_egg_delivery_rate\0\u{3}farm_index\0\u{3}last_egg_delivery_rate\0\u{3}eggs_delivered\0\u{1}stats\0\u{1}success\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._timeAway) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._timeSimulated) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._silosOwned) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._averageElr) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._averageMsr) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._averageEggDeliveryRate) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._farmIndex) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._lastEggDeliveryRate) }()
      case 9: try { try decoder.decodeSingularDoubleField(value: &self._eggsDelivered) }()
      case 10: try { try decoder.decodeRepeatedMessageField(value: &self.stats) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timeAway {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._timeSimulated {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._silosOwned {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._averageElr {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._averageMsr {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._averageEggDeliveryRate {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._farmIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._lastEggDeliveryRate {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._eggsDelivered {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
    } }()
    if !self.stats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stats, fieldNumber: 10)
    }
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_IdleSessionSummary, rhs: Ei_IdleSessionSummary) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._timeAway != rhs._timeAway {return false}
    if lhs._timeSimulated != rhs._timeSimulated {return false}
    if lhs._silosOwned != rhs._silosOwned {return false}
    if lhs._averageElr != rhs._averageElr {return false}
    if lhs._averageMsr != rhs._averageMsr {return false}
    if lhs._averageEggDeliveryRate != rhs._averageEggDeliveryRate {return false}
    if lhs._lastEggDeliveryRate != rhs._lastEggDeliveryRate {return false}
    if lhs._eggsDelivered != rhs._eggsDelivered {return false}
    if lhs.stats != rhs.stats {return false}
    if lhs._farmIndex != rhs._farmIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_IdleSessionSummary.Stat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_IdleSessionSummary.protoMessageName + ".Stat"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}min\0\u{1}max\0\u{1}avg\0\u{3}total_time\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._min) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._max) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._avg) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._totalTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._min {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._max {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._avg {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._totalTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_IdleSessionSummary.Stat, rhs: Ei_IdleSessionSummary.Stat) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._min != rhs._min {return false}
    if lhs._max != rhs._max {return false}
    if lhs._avg != rhs._avg {return false}
    if lhs._totalTime != rhs._totalTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractCoopStatusUpdateRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractCoopStatusUpdateRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}contract_identifier\0\u{3}coop_identifier\0\u{1}amount\0\u{1}rate\0\u{3}time_cheats_detected\0\u{3}soul_power\0\u{3}push_user_id\0\u{3}boost_tokens\0\u{3}egg_laying_rate_buff\0\u{3}earnings_buff\0\u{1}rinfo\0\u{3}boost_tokens_spent\0\u{3}production_params\0\u{1}eop\0\u{3}farm_info\0\u{3}hide_cc_status\0\u{3}last_idle_summary\0\u{3}total_step_time\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _userID: String? = nil
    var _contractIdentifier: String? = nil
    var _coopIdentifier: String? = nil
    var _pushUserID: String? = nil
    var _amount: Double? = nil
    var _rate: Double? = nil
    var _timeCheatsDetected: UInt32? = nil
    var _totalStepTime: Double? = nil
    var _soulPower: Double? = nil
    var _eop: UInt32? = nil
    var _boostTokens: UInt32? = nil
    var _boostTokensSpent: UInt32? = nil
    var _hideCcStatus: Bool? = nil
    var _productionParams: Ei_FarmProductionParams? = nil
    var _farmInfo: Ei_PlayerFarmInfo? = nil
    var _lastIdleSummary: Ei_IdleSessionSummary? = nil
    var _eggLayingRateBuff: Double? = nil
    var _earningsBuff: Double? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _userID = source._userID
      _contractIdentifier = source._contractIdentifier
      _coopIdentifier = source._coopIdentifier
      _pushUserID = source._pushUserID
      _amount = source._amount
      _rate = source._rate
      _timeCheatsDetected = source._timeCheatsDetected
      _totalStepTime = source._totalStepTime
      _soulPower = source._soulPower
      _eop = source._eop
      _boostTokens = source._boostTokens
      _boostTokensSpent = source._boostTokensSpent
      _hideCcStatus = source._hideCcStatus
      _productionParams = source._productionParams
      _farmInfo = source._farmInfo
      _lastIdleSummary = source._lastIdleSummary
      _eggLayingRateBuff = source._eggLayingRateBuff
      _earningsBuff = source._earningsBuff
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._contractIdentifier) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._coopIdentifier) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._amount) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._rate) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._timeCheatsDetected) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._soulPower) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._pushUserID) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokens) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._eggLayingRateBuff) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._earningsBuff) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 13: try { try decoder.decodeSingularUInt32Field(value: &_storage._boostTokensSpent) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._productionParams) }()
        case 15: try { try decoder.decodeSingularUInt32Field(value: &_storage._eop) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._farmInfo) }()
        case 17: try { try decoder.decodeSingularBoolField(value: &_storage._hideCcStatus) }()
        case 18: try { try decoder.decodeSingularMessageField(value: &_storage._lastIdleSummary) }()
        case 19: try { try decoder.decodeSingularDoubleField(value: &_storage._totalStepTime) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._contractIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._coopIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._amount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._rate {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._timeCheatsDetected {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._soulPower {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._pushUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._boostTokens {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._eggLayingRateBuff {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._earningsBuff {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._boostTokensSpent {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._productionParams {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._eop {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._farmInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._hideCcStatus {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._lastIdleSummary {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._totalStepTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCoopStatusUpdateRequest, rhs: Ei_ContractCoopStatusUpdateRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._contractIdentifier != rhs_storage._contractIdentifier {return false}
        if _storage._coopIdentifier != rhs_storage._coopIdentifier {return false}
        if _storage._pushUserID != rhs_storage._pushUserID {return false}
        if _storage._amount != rhs_storage._amount {return false}
        if _storage._rate != rhs_storage._rate {return false}
        if _storage._timeCheatsDetected != rhs_storage._timeCheatsDetected {return false}
        if _storage._totalStepTime != rhs_storage._totalStepTime {return false}
        if _storage._soulPower != rhs_storage._soulPower {return false}
        if _storage._eop != rhs_storage._eop {return false}
        if _storage._boostTokens != rhs_storage._boostTokens {return false}
        if _storage._boostTokensSpent != rhs_storage._boostTokensSpent {return false}
        if _storage._hideCcStatus != rhs_storage._hideCcStatus {return false}
        if _storage._productionParams != rhs_storage._productionParams {return false}
        if _storage._farmInfo != rhs_storage._farmInfo {return false}
        if _storage._lastIdleSummary != rhs_storage._lastIdleSummary {return false}
        if _storage._eggLayingRateBuff != rhs_storage._eggLayingRateBuff {return false}
        if _storage._earningsBuff != rhs_storage._earningsBuff {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractCoopStatusUpdateResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractCoopStatusUpdateResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}finalized\0\u{1}exists\0\u{1}status\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._finalized) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._exists) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._finalized {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._exists {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractCoopStatusUpdateResponse, rhs: Ei_ContractCoopStatusUpdateResponse) -> Bool {
    if lhs._finalized != rhs._finalized {return false}
    if lhs._exists != rhs._exists {return false}
    if lhs._status != rhs._status {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CoopBuffState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoopBuffState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}egg_laying_rate\0\u{1}earnings\0\u{3}server_timestamp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._eggLayingRate) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._earnings) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._serverTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._eggLayingRate {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._earnings {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._serverTimestamp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CoopBuffState, rhs: Ei_CoopBuffState) -> Bool {
    if lhs._eggLayingRate != rhs._eggLayingRate {return false}
    if lhs._earnings != rhs._earnings {return false}
    if lhs._serverTimestamp != rhs._serverTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CoopBuffHistory: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoopBuffHistory"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}history\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.history) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.history.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.history, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CoopBuffHistory, rhs: Ei_CoopBuffHistory) -> Bool {
    if lhs.history != rhs.history {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CoopChickenRunEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoopChickenRunEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}server_timestamp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._serverTimestamp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._serverTimestamp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CoopChickenRunEntry, rhs: Ei_CoopChickenRunEntry) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._serverTimestamp != rhs._serverTimestamp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_PlayerLastChickenRunTimes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PlayerLastChickenRunTimes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\u{3}entries\0\u{3}user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 3)
    }
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_PlayerLastChickenRunTimes, rhs: Ei_PlayerLastChickenRunTimes) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CoopLastChickenRunTimes: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CoopLastChickenRunTimes"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}entries\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.entries) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.entries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.entries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CoopLastChickenRunTimes, rhs: Ei_CoopLastChickenRunTimes) -> Bool {
    if lhs.entries != rhs.entries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaderboardAnalysis: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeaderboardAnalysis"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}chunks\0\u{1}count\0\u{3}high_score\0\u{3}low_score\0\u{1}cursor\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.chunks) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._count) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._highScore) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._lowScore) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._cursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.chunks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chunks, fieldNumber: 1)
    }
    try { if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._highScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lowScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._cursor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaderboardAnalysis, rhs: Ei_LeaderboardAnalysis) -> Bool {
    if lhs.chunks != rhs.chunks {return false}
    if lhs._count != rhs._count {return false}
    if lhs._highScore != rhs._highScore {return false}
    if lhs._lowScore != rhs._lowScore {return false}
    if lhs._cursor != rhs._cursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaderboardAnalysis.Chunk: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LeaderboardAnalysis.protoMessageName + ".Chunk"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}start_index\0\u{3}end_index\0\u{3}high_score\0\u{3}low_score\0\u{3}start_cursor\0\u{3}end_cursor\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._startIndex) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._endIndex) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._highScore) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._lowScore) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._startCursor) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._endCursor) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._startIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._endIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._highScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._lowScore {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._startCursor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._endCursor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaderboardAnalysis.Chunk, rhs: Ei_LeaderboardAnalysis.Chunk) -> Bool {
    if lhs._startIndex != rhs._startIndex {return false}
    if lhs._endIndex != rhs._endIndex {return false}
    if lhs._highScore != rhs._highScore {return false}
    if lhs._lowScore != rhs._lowScore {return false}
    if lhs._startCursor != rhs._startCursor {return false}
    if lhs._endCursor != rhs._endCursor {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaderboardInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeaderboardInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}seasons\0\u{3}all_time_scope\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.seasons) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._allTimeScope) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.seasons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.seasons, fieldNumber: 1)
    }
    try { if let v = self._allTimeScope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaderboardInfo, rhs: Ei_LeaderboardInfo) -> Bool {
    if lhs.seasons != rhs.seasons {return false}
    if lhs._allTimeScope != rhs._allTimeScope {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaderboardInfo.Season: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LeaderboardInfo.protoMessageName + ".Season"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}scope\0\u{1}name\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._scope) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaderboardInfo.Season, rhs: Ei_LeaderboardInfo.Season) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs._name != rhs._name {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaderboardRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeaderboardRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{1}scope\0\u{1}grade\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._scope) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaderboardRequest, rhs: Ei_LeaderboardRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._scope != rhs._scope {return false}
    if lhs._grade != rhs._grade {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaderboardResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LeaderboardResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}scope\0\u{1}grade\0\u{3}top_entries\0\u{1}count\0\u{1}rank\0\u{1}score\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._scope) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.topEntries) }()
      case 4: try { try decoder.decodeSingularUInt32Field(value: &self._count) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._rank) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._score) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._scope {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    if !self.topEntries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.topEntries, fieldNumber: 3)
    }
    try { if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rank {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._score {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaderboardResponse, rhs: Ei_LeaderboardResponse) -> Bool {
    if lhs._scope != rhs._scope {return false}
    if lhs._grade != rhs._grade {return false}
    if lhs.topEntries != rhs.topEntries {return false}
    if lhs._count != rhs._count {return false}
    if lhs._rank != rhs._rank {return false}
    if lhs._score != rhs._score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LeaderboardResponse.Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LeaderboardResponse.protoMessageName + ".Entry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rank\0\u{1}alias\0\u{1}score\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._rank) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._alias) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._score) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rank {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._alias {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._score {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LeaderboardResponse.Entry, rhs: Ei_LeaderboardResponse.Entry) -> Bool {
    if lhs._rank != rhs._rank {return false}
    if lhs._alias != rhs._alias {return false}
    if lhs._score != rhs._score {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractsArchive: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractsArchive"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}archive\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.archive) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.archive.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.archive, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractsArchive, rhs: Ei_ContractsArchive) -> Bool {
    if lhs.archive != rhs.archive {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ContractAction: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ContractAction"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}action_name\0\u{3}approx_time\0\u{3}dest_user_id\0\u{3}contract_id\0\u{3}coop_id\0\u{1}autojoin\0\u{1}grade\0\u{1}replay\0\u{3}points_replay\0\u{3}reward_type\0\u{3}reward_subtype\0\u{3}reward_amount\0\u{3}goal_index\0\u{3}boost_id\0\u{1}tokens\0\u{3}kick_reason\0\u{1}public\0\u{3}cc_only\0")

  fileprivate class _StorageClass {
    var _userID: String? = nil
    var _actionName: String? = nil
    var _approxTime: Double? = nil
    var _destUserID: String? = nil
    var _contractID: String? = nil
    var _coopID: String? = nil
    var _autojoin: Bool? = nil
    var _grade: UInt32? = nil
    var _replay: Bool? = nil
    var _pointsReplay: Bool? = nil
    var _rewardType: UInt32? = nil
    var _rewardSubtype: String? = nil
    var _rewardAmount: Double? = nil
    var _goalIndex: UInt32? = nil
    var _boostID: String? = nil
    var _tokens: UInt32? = nil
    var _kickReason: UInt32? = nil
    var _public: Bool? = nil
    var _ccOnly: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _userID = source._userID
      _actionName = source._actionName
      _approxTime = source._approxTime
      _destUserID = source._destUserID
      _contractID = source._contractID
      _coopID = source._coopID
      _autojoin = source._autojoin
      _grade = source._grade
      _replay = source._replay
      _pointsReplay = source._pointsReplay
      _rewardType = source._rewardType
      _rewardSubtype = source._rewardSubtype
      _rewardAmount = source._rewardAmount
      _goalIndex = source._goalIndex
      _boostID = source._boostID
      _tokens = source._tokens
      _kickReason = source._kickReason
      _public = source._public
      _ccOnly = source._ccOnly
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._actionName) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._approxTime) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._destUserID) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._contractID) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._coopID) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._autojoin) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._grade) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._replay) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._pointsReplay) }()
        case 11: try { try decoder.decodeSingularUInt32Field(value: &_storage._rewardType) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._rewardSubtype) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._rewardAmount) }()
        case 14: try { try decoder.decodeSingularUInt32Field(value: &_storage._goalIndex) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._boostID) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._tokens) }()
        case 17: try { try decoder.decodeSingularUInt32Field(value: &_storage._kickReason) }()
        case 18: try { try decoder.decodeSingularBoolField(value: &_storage._public) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._ccOnly) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._actionName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._approxTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._destUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._contractID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._coopID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._autojoin {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._grade {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._replay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._pointsReplay {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._rewardType {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._rewardSubtype {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._rewardAmount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._goalIndex {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._boostID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._tokens {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._kickReason {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._public {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._ccOnly {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ContractAction, rhs: Ei_ContractAction) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._actionName != rhs_storage._actionName {return false}
        if _storage._approxTime != rhs_storage._approxTime {return false}
        if _storage._destUserID != rhs_storage._destUserID {return false}
        if _storage._contractID != rhs_storage._contractID {return false}
        if _storage._coopID != rhs_storage._coopID {return false}
        if _storage._autojoin != rhs_storage._autojoin {return false}
        if _storage._grade != rhs_storage._grade {return false}
        if _storage._replay != rhs_storage._replay {return false}
        if _storage._pointsReplay != rhs_storage._pointsReplay {return false}
        if _storage._rewardType != rhs_storage._rewardType {return false}
        if _storage._rewardSubtype != rhs_storage._rewardSubtype {return false}
        if _storage._rewardAmount != rhs_storage._rewardAmount {return false}
        if _storage._goalIndex != rhs_storage._goalIndex {return false}
        if _storage._boostID != rhs_storage._boostID {return false}
        if _storage._tokens != rhs_storage._tokens {return false}
        if _storage._kickReason != rhs_storage._kickReason {return false}
        if _storage._public != rhs_storage._public {return false}
        if _storage._ccOnly != rhs_storage._ccOnly {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_UserDataInfoRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDataInfoRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}device_id\0\u{3}backup_checksum\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._deviceID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._backupChecksum) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._deviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._backupChecksum {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_UserDataInfoRequest, rhs: Ei_UserDataInfoRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._deviceID != rhs._deviceID {return false}
    if lhs._backupChecksum != rhs._backupChecksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_UserDataInfoResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserDataInfoResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}backup_checksum\0\u{3}backup_total_cash\0\u{3}coop_memberships\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._backupChecksum) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._backupTotalCash) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.coopMemberships) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._backupChecksum {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._backupTotalCash {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    if !self.coopMemberships.isEmpty {
      try visitor.visitRepeatedStringField(value: self.coopMemberships, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_UserDataInfoResponse, rhs: Ei_UserDataInfoResponse) -> Bool {
    if lhs._backupChecksum != rhs._backupChecksum {return false}
    if lhs._backupTotalCash != rhs._backupTotalCash {return false}
    if lhs.coopMemberships != rhs.coopMemberships {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ClearAllUserDataRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ClearAllUserDataRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}device_id\0\u{3}backup_checksum\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._deviceID) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._backupChecksum) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._deviceID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._backupChecksum {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ClearAllUserDataRequest, rhs: Ei_ClearAllUserDataRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._deviceID != rhs._deviceID {return false}
    if lhs._backupChecksum != rhs._backupChecksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ServerGift: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ServerGift"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{4}\u{2}reward_type\0\u{3}reward_sub_type\0\u{3}reward_amount\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._rewardType) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._rewardSubType) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._rewardAmount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rewardType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._rewardSubType {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._rewardAmount {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ServerGift, rhs: Ei_ServerGift) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._rewardType != rhs._rewardType {return false}
    if lhs._rewardSubType != rhs._rewardSubType {return false}
    if lhs._rewardAmount != rhs._rewardAmount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LiveConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}config_id\0\u{3}boosts_config\0\u{3}gift_config\0\u{3}misc_config\0\u{3}help_config\0")

  fileprivate class _StorageClass {
    var _configID: String? = nil
    var _boostsConfig: Ei_LiveConfig.BoostsConfig? = nil
    var _giftConfig: Ei_LiveConfig.GiftConfig? = nil
    var _miscConfig: Ei_LiveConfig.MiscConfig? = nil
    var _helpConfig: Ei_LiveConfig.HelpConfig? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _configID = source._configID
      _boostsConfig = source._boostsConfig
      _giftConfig = source._giftConfig
      _miscConfig = source._miscConfig
      _helpConfig = source._helpConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._configID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._boostsConfig) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._giftConfig) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._miscConfig) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._helpConfig) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._configID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._boostsConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._giftConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._miscConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._helpConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig, rhs: Ei_LiveConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._configID != rhs_storage._configID {return false}
        if _storage._boostsConfig != rhs_storage._boostsConfig {return false}
        if _storage._giftConfig != rhs_storage._giftConfig {return false}
        if _storage._miscConfig != rhs_storage._miscConfig {return false}
        if _storage._helpConfig != rhs_storage._helpConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.BoostsConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.protoMessageName + ".BoostsConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}item_configs\0\u{3}cash_boost_cooloff_time\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.itemConfigs) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._cashBoostCooloffTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.itemConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.itemConfigs, fieldNumber: 1)
    }
    try { if let v = self._cashBoostCooloffTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.BoostsConfig, rhs: Ei_LiveConfig.BoostsConfig) -> Bool {
    if lhs.itemConfigs != rhs.itemConfigs {return false}
    if lhs._cashBoostCooloffTime != rhs._cashBoostCooloffTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.BoostsConfig.ItemConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.BoostsConfig.protoMessageName + ".ItemConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}boost_id\0\u{1}price\0\u{3}token_price\0\u{3}se_required\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._boostID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._price) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._tokenPrice) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._seRequired) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._boostID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._price {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._tokenPrice {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._seRequired {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.BoostsConfig.ItemConfig, rhs: Ei_LiveConfig.BoostsConfig.ItemConfig) -> Bool {
    if lhs._boostID != rhs._boostID {return false}
    if lhs._price != rhs._price {return false}
    if lhs._tokenPrice != rhs._tokenPrice {return false}
    if lhs._seRequired != rhs._seRequired {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.GiftConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.protoMessageName + ".GiftConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}package_interval\0\u{3}video_offer_interval\0\u{3}video_offer_interval_contract\0\u{3}video_offer_interval_piggy_full\0\u{3}video_offer_interval_piggy_extra_full\0\u{3}package_interval_contract\0\u{3}package_interval_piggy_full\0\u{3}package_interval_piggy_extra_full\0\u{3}gift_configs\0\u{3}gift_mu_min_spent\0\u{3}gift_mu_max_spent\0\u{3}gift_mu_overall_mult\0\u{3}package_reset_on_idle\0\u{3}video_reset_on_idle\0\u{3}random_gift_mu_config\0\u{3}video_gift_mu_config\0")

  fileprivate class _StorageClass {
    var _giftConfigs: [Ei_LiveConfig.GiftConfig.GiftValueConfig] = []
    var _giftMuMinSpent: Double? = nil
    var _giftMuMaxSpent: Double? = nil
    var _giftMuOverallMult: Double? = nil
    var _randomGiftMuConfig: Ei_LiveConfig.GiftConfig.GiftMuConfig? = nil
    var _videoGiftMuConfig: Ei_LiveConfig.GiftConfig.GiftMuConfig? = nil
    var _packageInterval: Double? = nil
    var _videoOfferInterval: Double? = nil
    var _videoOfferIntervalContract: Double? = nil
    var _videoOfferIntervalPiggyFull: Double? = nil
    var _videoOfferIntervalPiggyExtraFull: Double? = nil
    var _videoResetOnIdle: Bool? = nil
    var _packageIntervalContract: Double? = nil
    var _packageIntervalPiggyFull: Double? = nil
    var _packageIntervalPiggyExtraFull: Double? = nil
    var _packageResetOnIdle: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _giftConfigs = source._giftConfigs
      _giftMuMinSpent = source._giftMuMinSpent
      _giftMuMaxSpent = source._giftMuMaxSpent
      _giftMuOverallMult = source._giftMuOverallMult
      _randomGiftMuConfig = source._randomGiftMuConfig
      _videoGiftMuConfig = source._videoGiftMuConfig
      _packageInterval = source._packageInterval
      _videoOfferInterval = source._videoOfferInterval
      _videoOfferIntervalContract = source._videoOfferIntervalContract
      _videoOfferIntervalPiggyFull = source._videoOfferIntervalPiggyFull
      _videoOfferIntervalPiggyExtraFull = source._videoOfferIntervalPiggyExtraFull
      _videoResetOnIdle = source._videoResetOnIdle
      _packageIntervalContract = source._packageIntervalContract
      _packageIntervalPiggyFull = source._packageIntervalPiggyFull
      _packageIntervalPiggyExtraFull = source._packageIntervalPiggyExtraFull
      _packageResetOnIdle = source._packageResetOnIdle
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularDoubleField(value: &_storage._packageInterval) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._videoOfferInterval) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._videoOfferIntervalContract) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._videoOfferIntervalPiggyFull) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._videoOfferIntervalPiggyExtraFull) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._packageIntervalContract) }()
        case 7: try { try decoder.decodeSingularDoubleField(value: &_storage._packageIntervalPiggyFull) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._packageIntervalPiggyExtraFull) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._giftConfigs) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._giftMuMinSpent) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._giftMuMaxSpent) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._giftMuOverallMult) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._packageResetOnIdle) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._videoResetOnIdle) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._randomGiftMuConfig) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._videoGiftMuConfig) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._packageInterval {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._videoOfferInterval {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._videoOfferIntervalContract {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._videoOfferIntervalPiggyFull {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._videoOfferIntervalPiggyExtraFull {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._packageIntervalContract {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._packageIntervalPiggyFull {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._packageIntervalPiggyExtraFull {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      if !_storage._giftConfigs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._giftConfigs, fieldNumber: 9)
      }
      try { if let v = _storage._giftMuMinSpent {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._giftMuMaxSpent {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._giftMuOverallMult {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._packageResetOnIdle {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._videoResetOnIdle {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._randomGiftMuConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._videoGiftMuConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.GiftConfig, rhs: Ei_LiveConfig.GiftConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._giftConfigs != rhs_storage._giftConfigs {return false}
        if _storage._giftMuMinSpent != rhs_storage._giftMuMinSpent {return false}
        if _storage._giftMuMaxSpent != rhs_storage._giftMuMaxSpent {return false}
        if _storage._giftMuOverallMult != rhs_storage._giftMuOverallMult {return false}
        if _storage._randomGiftMuConfig != rhs_storage._randomGiftMuConfig {return false}
        if _storage._videoGiftMuConfig != rhs_storage._videoGiftMuConfig {return false}
        if _storage._packageInterval != rhs_storage._packageInterval {return false}
        if _storage._videoOfferInterval != rhs_storage._videoOfferInterval {return false}
        if _storage._videoOfferIntervalContract != rhs_storage._videoOfferIntervalContract {return false}
        if _storage._videoOfferIntervalPiggyFull != rhs_storage._videoOfferIntervalPiggyFull {return false}
        if _storage._videoOfferIntervalPiggyExtraFull != rhs_storage._videoOfferIntervalPiggyExtraFull {return false}
        if _storage._videoResetOnIdle != rhs_storage._videoResetOnIdle {return false}
        if _storage._packageIntervalContract != rhs_storage._packageIntervalContract {return false}
        if _storage._packageIntervalPiggyFull != rhs_storage._packageIntervalPiggyFull {return false}
        if _storage._packageIntervalPiggyExtraFull != rhs_storage._packageIntervalPiggyExtraFull {return false}
        if _storage._packageResetOnIdle != rhs_storage._packageResetOnIdle {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.GiftConfig.GiftValueConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.GiftConfig.protoMessageName + ".GiftValueConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}gift_id\0\u{3}rand_min\0\u{3}rand_max\0\u{1}amount\0\u{3}video_min\0\u{3}video_max\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._giftID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._randMin) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._randMax) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._amount) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._videoMin) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._videoMax) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._giftID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._randMin {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._randMax {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._amount {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._videoMin {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._videoMax {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.GiftConfig.GiftValueConfig, rhs: Ei_LiveConfig.GiftConfig.GiftValueConfig) -> Bool {
    if lhs._giftID != rhs._giftID {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs._randMin != rhs._randMin {return false}
    if lhs._randMax != rhs._randMax {return false}
    if lhs._videoMin != rhs._videoMin {return false}
    if lhs._videoMax != rhs._videoMax {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.GiftConfig.GiftMuConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.GiftConfig.protoMessageName + ".GiftMuConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}min_spent\0\u{3}max_spent\0\u{3}overall_mult\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._minSpent) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._maxSpent) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._overallMult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._minSpent {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._maxSpent {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._overallMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.GiftConfig.GiftMuConfig, rhs: Ei_LiveConfig.GiftConfig.GiftMuConfig) -> Bool {
    if lhs._minSpent != rhs._minSpent {return false}
    if lhs._maxSpent != rhs._maxSpent {return false}
    if lhs._overallMult != rhs._overallMult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.MiscConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.protoMessageName + ".MiscConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}ask_to_track\0\u{3}ask_to_track_min_soul_eggs\0\u{3}ask_to_track_message\0\u{3}ask_to_track_show_pre_dialog\0\u{3}ask_to_track_after_privacy\0\u{3}chicken_run_boost_percentage\0\u{3}shells_intro_tickets\0\u{3}shells_max_free_chicken_configs\0\u{3}shells_intro_alert_threshold\0\u{3}contracts_expert_league_min_soul_power\0\u{3}new_player_event_duration\0\u{3}contracts_club_available\0\u{3}contracts_beta\0\u{3}shells_lighting_controls_price\0\u{3}season_rewards_enabled\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._askToTrack) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._askToTrackMinSoulEggs) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._askToTrackMessage) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._askToTrackShowPreDialog) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._askToTrackAfterPrivacy) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._chickenRunBoostPercentage) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._shellsIntroTickets) }()
      case 8: try { try decoder.decodeSingularUInt32Field(value: &self._shellsMaxFreeChickenConfigs) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._shellsIntroAlertThreshold) }()
      case 10: try { try decoder.decodeSingularDoubleField(value: &self._contractsExpertLeagueMinSoulPower) }()
      case 11: try { try decoder.decodeSingularDoubleField(value: &self._newPlayerEventDuration) }()
      case 12: try { try decoder.decodeSingularBoolField(value: &self._contractsClubAvailable) }()
      case 13: try { try decoder.decodeSingularBoolField(value: &self._contractsBeta) }()
      case 14: try { try decoder.decodeSingularUInt32Field(value: &self._shellsLightingControlsPrice) }()
      case 15: try { try decoder.decodeSingularBoolField(value: &self._seasonRewardsEnabled) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._askToTrack {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._askToTrackMinSoulEggs {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._askToTrackMessage {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._askToTrackShowPreDialog {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._askToTrackAfterPrivacy {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._chickenRunBoostPercentage {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._shellsIntroTickets {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._shellsMaxFreeChickenConfigs {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._shellsIntroAlertThreshold {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._contractsExpertLeagueMinSoulPower {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._newPlayerEventDuration {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._contractsClubAvailable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._contractsBeta {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._shellsLightingControlsPrice {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._seasonRewardsEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.MiscConfig, rhs: Ei_LiveConfig.MiscConfig) -> Bool {
    if lhs._askToTrack != rhs._askToTrack {return false}
    if lhs._askToTrackMinSoulEggs != rhs._askToTrackMinSoulEggs {return false}
    if lhs._askToTrackMessage != rhs._askToTrackMessage {return false}
    if lhs._askToTrackShowPreDialog != rhs._askToTrackShowPreDialog {return false}
    if lhs._askToTrackAfterPrivacy != rhs._askToTrackAfterPrivacy {return false}
    if lhs._chickenRunBoostPercentage != rhs._chickenRunBoostPercentage {return false}
    if lhs._shellsIntroTickets != rhs._shellsIntroTickets {return false}
    if lhs._shellsMaxFreeChickenConfigs != rhs._shellsMaxFreeChickenConfigs {return false}
    if lhs._shellsIntroAlertThreshold != rhs._shellsIntroAlertThreshold {return false}
    if lhs._shellsLightingControlsPrice != rhs._shellsLightingControlsPrice {return false}
    if lhs._contractsExpertLeagueMinSoulPower != rhs._contractsExpertLeagueMinSoulPower {return false}
    if lhs._newPlayerEventDuration != rhs._newPlayerEventDuration {return false}
    if lhs._contractsClubAvailable != rhs._contractsClubAvailable {return false}
    if lhs._contractsBeta != rhs._contractsBeta {return false}
    if lhs._seasonRewardsEnabled != rhs._seasonRewardsEnabled {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.HelpConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.protoMessageName + ".HelpConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}video_infos\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.videoInfos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.videoInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.videoInfos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.HelpConfig, rhs: Ei_LiveConfig.HelpConfig) -> Bool {
    if lhs.videoInfos != rhs.videoInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.HelpConfig.HowToVideoInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_LiveConfig.HelpConfig.protoMessageName + ".HowToVideoInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}description\0\u{1}url\0\u{3}soul_eggs\0\u{1}duration\0\u{1}type\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._description_p) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._url) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._soulEggs) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._duration) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._description_p {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._soulEggs {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._duration {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LiveConfig.HelpConfig.HowToVideoInfo, rhs: Ei_LiveConfig.HelpConfig.HowToVideoInfo) -> Bool {
    if lhs._type != rhs._type {return false}
    if lhs._name != rhs._name {return false}
    if lhs._description_p != rhs._description_p {return false}
    if lhs._duration != rhs._duration {return false}
    if lhs._url != rhs._url {return false}
    if lhs._soulEggs != rhs._soulEggs {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LiveConfig.HelpConfig.HowToVideoInfo.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0VIDEO\0\u{1}ARTICLE\0")
}

extension Ei_InGameMail: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InGameMail"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}title\0\u{1}message\0\u{1}action\0\u{1}url\0\u{3}gold_tip\0\u{1}platform\0\u{1}date\0\u{1}builds\0\u{3}min_client_version\0\u{3}min_soul_eggs\0\u{3}max_client_version\0\u{3}min_mystical_bonus\0\u{3}app_link\0\u{3}app_link_extra\0\u{1}image\0\u{3}user_type\0\u{4}\u{3}min_piggy_breaks\0\u{3}image_width\0\u{3}image_height\0\u{1}tip\0\u{3}min_days_since_last_tip\0\u{3}max_retries\0\u{3}days_until_retry\0\u{1}priority\0\u{1}category\0\u{3}max_soul_eggs\0")

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _title: String? = nil
    var _date: String? = nil
    var _message: String? = nil
    var _action: String? = nil
    var _url: String? = nil
    var _appLink: Ei_UILocation? = nil
    var _appLinkExtra: String? = nil
    var _image: Ei_DLCItem? = nil
    var _imageWidth: Double? = nil
    var _imageHeight: Double? = nil
    var _platform: UInt32? = nil
    var _builds: [String] = []
    var _minClientVersion: UInt32? = nil
    var _maxClientVersion: UInt32? = nil
    var _minSoulEggs: Double? = nil
    var _maxSoulEggs: Double? = nil
    var _minMysticalBonus: Double? = nil
    var _userType: Ei_UserType? = nil
    var _minPiggyBreaks: UInt32? = nil
    var _goldTip: Double? = nil
    var _tip: Bool? = nil
    var _priority: UInt32? = nil
    var _minDaysSinceLastTip: Double? = nil
    var _maxRetries: UInt32? = nil
    var _daysUntilRetry: Double? = nil
    var _category: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _title = source._title
      _date = source._date
      _message = source._message
      _action = source._action
      _url = source._url
      _appLink = source._appLink
      _appLinkExtra = source._appLinkExtra
      _image = source._image
      _imageWidth = source._imageWidth
      _imageHeight = source._imageHeight
      _platform = source._platform
      _builds = source._builds
      _minClientVersion = source._minClientVersion
      _maxClientVersion = source._maxClientVersion
      _minSoulEggs = source._minSoulEggs
      _maxSoulEggs = source._maxSoulEggs
      _minMysticalBonus = source._minMysticalBonus
      _userType = source._userType
      _minPiggyBreaks = source._minPiggyBreaks
      _goldTip = source._goldTip
      _tip = source._tip
      _priority = source._priority
      _minDaysSinceLastTip = source._minDaysSinceLastTip
      _maxRetries = source._maxRetries
      _daysUntilRetry = source._daysUntilRetry
      _category = source._category
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._title) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._message) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._action) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._url) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._goldTip) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._platform) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._date) }()
        case 9: try { try decoder.decodeRepeatedStringField(value: &_storage._builds) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._minClientVersion) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._minSoulEggs) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._maxClientVersion) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._minMysticalBonus) }()
        case 14: try { try decoder.decodeSingularEnumField(value: &_storage._appLink) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._appLinkExtra) }()
        case 16: try { try decoder.decodeSingularMessageField(value: &_storage._image) }()
        case 17: try { try decoder.decodeSingularEnumField(value: &_storage._userType) }()
        case 20: try { try decoder.decodeSingularUInt32Field(value: &_storage._minPiggyBreaks) }()
        case 21: try { try decoder.decodeSingularDoubleField(value: &_storage._imageWidth) }()
        case 22: try { try decoder.decodeSingularDoubleField(value: &_storage._imageHeight) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._tip) }()
        case 24: try { try decoder.decodeSingularDoubleField(value: &_storage._minDaysSinceLastTip) }()
        case 25: try { try decoder.decodeSingularUInt32Field(value: &_storage._maxRetries) }()
        case 26: try { try decoder.decodeSingularDoubleField(value: &_storage._daysUntilRetry) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._priority) }()
        case 28: try { try decoder.decodeSingularStringField(value: &_storage._category) }()
        case 29: try { try decoder.decodeSingularDoubleField(value: &_storage._maxSoulEggs) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._title {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._message {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._action {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._url {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._goldTip {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._platform {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._date {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      if !_storage._builds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._builds, fieldNumber: 9)
      }
      try { if let v = _storage._minClientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._minSoulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._maxClientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._minMysticalBonus {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._appLink {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._appLinkExtra {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._image {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._userType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._minPiggyBreaks {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._imageWidth {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._imageHeight {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._tip {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._minDaysSinceLastTip {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._maxRetries {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._daysUntilRetry {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._priority {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._category {
        try visitor.visitSingularStringField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._maxSoulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 29)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_InGameMail, rhs: Ei_InGameMail) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._message != rhs_storage._message {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._appLink != rhs_storage._appLink {return false}
        if _storage._appLinkExtra != rhs_storage._appLinkExtra {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._imageWidth != rhs_storage._imageWidth {return false}
        if _storage._imageHeight != rhs_storage._imageHeight {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._builds != rhs_storage._builds {return false}
        if _storage._minClientVersion != rhs_storage._minClientVersion {return false}
        if _storage._maxClientVersion != rhs_storage._maxClientVersion {return false}
        if _storage._minSoulEggs != rhs_storage._minSoulEggs {return false}
        if _storage._maxSoulEggs != rhs_storage._maxSoulEggs {return false}
        if _storage._minMysticalBonus != rhs_storage._minMysticalBonus {return false}
        if _storage._userType != rhs_storage._userType {return false}
        if _storage._minPiggyBreaks != rhs_storage._minPiggyBreaks {return false}
        if _storage._goldTip != rhs_storage._goldTip {return false}
        if _storage._tip != rhs_storage._tip {return false}
        if _storage._priority != rhs_storage._priority {return false}
        if _storage._minDaysSinceLastTip != rhs_storage._minDaysSinceLastTip {return false}
        if _storage._maxRetries != rhs_storage._maxRetries {return false}
        if _storage._daysUntilRetry != rhs_storage._daysUntilRetry {return false}
        if _storage._category != rhs_storage._category {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MailDB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MailDB"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}mail\0\u{3}tips_db_data\0\u{3}tips_checksum\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.mail) }()
      case 2: try { try decoder.decodeSingularBytesField(value: &self._tipsDbData) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._tipsChecksum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.mail.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.mail, fieldNumber: 1)
    }
    try { if let v = self._tipsDbData {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._tipsChecksum {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MailDB, rhs: Ei_MailDB) -> Bool {
    if lhs.mail != rhs.mail {return false}
    if lhs._tipsDbData != rhs._tipsDbData {return false}
    if lhs._tipsChecksum != rhs._tipsChecksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_TipsDB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".TipsDB"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}tips\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.tips) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.tips.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tips, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_TipsDB, rhs: Ei_TipsDB) -> Bool {
    if lhs.tips != rhs.tips {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MailState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MailState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}read_mail_ids\0\u{3}tips_states\0\u{3}tips_checksum\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.readMailIds) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.tipsStates) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._tipsChecksum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.readMailIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.readMailIds, fieldNumber: 1)
    }
    if !self.tipsStates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.tipsStates, fieldNumber: 2)
    }
    try { if let v = self._tipsChecksum {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MailState, rhs: Ei_MailState) -> Bool {
    if lhs.readMailIds != rhs.readMailIds {return false}
    if lhs.tipsStates != rhs.tipsStates {return false}
    if lhs._tipsChecksum != rhs._tipsChecksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MailState.TipState: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_MailState.protoMessageName + ".TipState"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}reads\0\u{3}time_read\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._reads) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._timeRead) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._reads {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._timeRead {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MailState.TipState, rhs: Ei_MailState.TipState) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._reads != rhs._reads {return false}
    if lhs._timeRead != rhs._timeRead {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_PeriodicalsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PeriodicalsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}sales\0\u{1}events\0\u{1}contracts\0\u{1}gifts\0\u{3}live_config\0\u{3}mail_bag\0\u{3}contract_player_info\0\u{1}evaluations\0\u{3}artifact_cases\0\u{3}showcase_royalties\0")

  fileprivate class _StorageClass {
    var _sales: Ei_SalesInfo? = nil
    var _events: Ei_EggIncCurrentEvents? = nil
    var _contracts: Ei_ContractsResponse? = nil
    var _evaluations: [Ei_ContractEvaluation] = []
    var _gifts: [Ei_ServerGift] = []
    var _artifactCases: [Ei_CompleteMissionResponse] = []
    var _liveConfig: Ei_LiveConfig? = nil
    var _mailBag: Ei_MailDB? = nil
    var _contractPlayerInfo: Ei_ContractPlayerInfo? = nil
    var _showcaseRoyalties: [Ei_PeriodicalsResponse.RoyaltyInfo] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _sales = source._sales
      _events = source._events
      _contracts = source._contracts
      _evaluations = source._evaluations
      _gifts = source._gifts
      _artifactCases = source._artifactCases
      _liveConfig = source._liveConfig
      _mailBag = source._mailBag
      _contractPlayerInfo = source._contractPlayerInfo
      _showcaseRoyalties = source._showcaseRoyalties
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._sales) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._events) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._contracts) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._gifts) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._liveConfig) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._mailBag) }()
        case 7: try { try decoder.decodeSingularMessageField(value: &_storage._contractPlayerInfo) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._evaluations) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._artifactCases) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._showcaseRoyalties) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._sales {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._events {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._contracts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      if !_storage._gifts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gifts, fieldNumber: 4)
      }
      try { if let v = _storage._liveConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._mailBag {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._contractPlayerInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      } }()
      if !_storage._evaluations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._evaluations, fieldNumber: 8)
      }
      if !_storage._artifactCases.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artifactCases, fieldNumber: 9)
      }
      if !_storage._showcaseRoyalties.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._showcaseRoyalties, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_PeriodicalsResponse, rhs: Ei_PeriodicalsResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._sales != rhs_storage._sales {return false}
        if _storage._events != rhs_storage._events {return false}
        if _storage._contracts != rhs_storage._contracts {return false}
        if _storage._evaluations != rhs_storage._evaluations {return false}
        if _storage._gifts != rhs_storage._gifts {return false}
        if _storage._artifactCases != rhs_storage._artifactCases {return false}
        if _storage._liveConfig != rhs_storage._liveConfig {return false}
        if _storage._mailBag != rhs_storage._mailBag {return false}
        if _storage._contractPlayerInfo != rhs_storage._contractPlayerInfo {return false}
        if _storage._showcaseRoyalties != rhs_storage._showcaseRoyalties {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_PeriodicalsResponse.RoyaltyInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_PeriodicalsResponse.protoMessageName + ".RoyaltyInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}amount\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._amount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_PeriodicalsResponse.RoyaltyInfo, rhs: Ei_PeriodicalsResponse.RoyaltyInfo) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GetPeriodicalsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetPeriodicalsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}piggy_full\0\u{3}piggy_found_full\0\u{3}seconds_full_realtime\0\u{3}seconds_full_gametime\0\u{4}\u{2}lost_increments\0\u{3}soul_eggs\0\u{4}\u{2}current_client_version\0\u{1}debug\0\u{1}rinfo\0\u{3}mystical_earnings_mult\0\u{1}eop\0\u{3}contracts_unlocked\0\u{3}artifacts_unlocked\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _userID: String? = nil
    var _piggyFull: Bool? = nil
    var _piggyFoundFull: Bool? = nil
    var _secondsFullRealtime: Double? = nil
    var _secondsFullGametime: Double? = nil
    var _lostIncrements: UInt32? = nil
    var _soulEggs: Double? = nil
    var _mysticalEarningsMult: Double? = nil
    var _eop: UInt32? = nil
    var _contractsUnlocked: Bool? = nil
    var _artifactsUnlocked: Bool? = nil
    var _currentClientVersion: UInt32? = nil
    var _debug: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _userID = source._userID
      _piggyFull = source._piggyFull
      _piggyFoundFull = source._piggyFoundFull
      _secondsFullRealtime = source._secondsFullRealtime
      _secondsFullGametime = source._secondsFullGametime
      _lostIncrements = source._lostIncrements
      _soulEggs = source._soulEggs
      _mysticalEarningsMult = source._mysticalEarningsMult
      _eop = source._eop
      _contractsUnlocked = source._contractsUnlocked
      _artifactsUnlocked = source._artifactsUnlocked
      _currentClientVersion = source._currentClientVersion
      _debug = source._debug
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularBoolField(value: &_storage._piggyFull) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._piggyFoundFull) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsFullRealtime) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsFullGametime) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._lostIncrements) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._soulEggs) }()
        case 10: try { try decoder.decodeSingularUInt32Field(value: &_storage._currentClientVersion) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._debug) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._mysticalEarningsMult) }()
        case 14: try { try decoder.decodeSingularUInt32Field(value: &_storage._eop) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._contractsUnlocked) }()
        case 16: try { try decoder.decodeSingularBoolField(value: &_storage._artifactsUnlocked) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._piggyFull {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._piggyFoundFull {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._secondsFullRealtime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._secondsFullGametime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._lostIncrements {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._soulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._currentClientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._debug {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._mysticalEarningsMult {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._eop {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._contractsUnlocked {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._artifactsUnlocked {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 16)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_GetPeriodicalsRequest, rhs: Ei_GetPeriodicalsRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._piggyFull != rhs_storage._piggyFull {return false}
        if _storage._piggyFoundFull != rhs_storage._piggyFoundFull {return false}
        if _storage._secondsFullRealtime != rhs_storage._secondsFullRealtime {return false}
        if _storage._secondsFullGametime != rhs_storage._secondsFullGametime {return false}
        if _storage._lostIncrements != rhs_storage._lostIncrements {return false}
        if _storage._soulEggs != rhs_storage._soulEggs {return false}
        if _storage._mysticalEarningsMult != rhs_storage._mysticalEarningsMult {return false}
        if _storage._eop != rhs_storage._eop {return false}
        if _storage._contractsUnlocked != rhs_storage._contractsUnlocked {return false}
        if _storage._artifactsUnlocked != rhs_storage._artifactsUnlocked {return false}
        if _storage._currentClientVersion != rhs_storage._currentClientVersion {return false}
        if _storage._debug != rhs_storage._debug {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ConfigRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{3}soul_eggs\0\u{3}artifacts_unlocked\0\u{3}fuel_tank_unlocked\0\u{3}contracts_unlocked\0\u{3}pro_permit\0\u{1}ultra\0\u{3}tips_checksum\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._soulEggs) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._artifactsUnlocked) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._fuelTankUnlocked) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._contractsUnlocked) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._proPermit) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._ultra) }()
      case 8: try { try decoder.decodeSingularStringField(value: &self._tipsChecksum) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._soulEggs {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._artifactsUnlocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._fuelTankUnlocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._contractsUnlocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._proPermit {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._ultra {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._tipsChecksum {
      try visitor.visitSingularStringField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ConfigRequest, rhs: Ei_ConfigRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._soulEggs != rhs._soulEggs {return false}
    if lhs._contractsUnlocked != rhs._contractsUnlocked {return false}
    if lhs._artifactsUnlocked != rhs._artifactsUnlocked {return false}
    if lhs._fuelTankUnlocked != rhs._fuelTankUnlocked {return false}
    if lhs._proPermit != rhs._proPermit {return false}
    if lhs._ultra != rhs._ultra {return false}
    if lhs._tipsChecksum != rhs._tipsChecksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ConfigResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConfigResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}live_config\0\u{3}mail_bag\0\u{3}dlc_catalog\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._liveConfig) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._mailBag) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._dlcCatalog) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._liveConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._mailBag {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._dlcCatalog {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ConfigResponse, rhs: Ei_ConfigResponse) -> Bool {
    if lhs._liveConfig != rhs._liveConfig {return false}
    if lhs._mailBag != rhs._mailBag {return false}
    if lhs._dlcCatalog != rhs._dlcCatalog {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AdAttributionRawData: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdAttributionRawData"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_ad_id\0\u{3}ad_network\0\u{3}json_data\0\u{3}user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._deviceAdID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._adNetwork) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._jsonData) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._deviceAdID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._adNetwork {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._jsonData {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AdAttributionRawData, rhs: Ei_AdAttributionRawData) -> Bool {
    if lhs._deviceAdID != rhs._deviceAdID {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs._adNetwork != rhs._adNetwork {return false}
    if lhs._jsonData != rhs._jsonData {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AdAttributionRow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdAttributionRow"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{3}ad_id\0\u{3}ad_network\0\u{1}campaign\0\u{1}keyword\0\u{1}extra\0\u{3}click_date\0\u{3}download_date\0\u{3}approx_time\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._adID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._adNetwork) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._campaign) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._keyword) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._extra) }()
      case 7: try { try decoder.decodeSingularFloatField(value: &self._clickDate) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self._downloadDate) }()
      case 9: try { try decoder.decodeSingularFloatField(value: &self._approxTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._adID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._adNetwork {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._campaign {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._keyword {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._extra {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._clickDate {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._downloadDate {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._approxTime {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AdAttributionRow, rhs: Ei_AdAttributionRow) -> Bool {
    if lhs._userID != rhs._userID {return false}
    if lhs._adID != rhs._adID {return false}
    if lhs._adNetwork != rhs._adNetwork {return false}
    if lhs._campaign != rhs._campaign {return false}
    if lhs._keyword != rhs._keyword {return false}
    if lhs._extra != rhs._extra {return false}
    if lhs._clickDate != rhs._clickDate {return false}
    if lhs._downloadDate != rhs._downloadDate {return false}
    if lhs._approxTime != rhs._approxTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AdAttributionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AdAttributionInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}device_ad_id\0\u{3}network_name\0\u{1}attribution\0\u{3}org_name\0\u{3}org_id\0\u{3}campaign_name\0\u{3}campaign_id\0\u{3}click_date\0\u{3}conversion_date\0\u{3}conversion_type\0\u{1}geo\0\u{3}adgroup_name\0\u{3}adgroup_id\0\u{1}keyword\0\u{3}keyword_id\0\u{3}keyword_extra\0\u{3}creativeset_name\0\u{3}creativeset_id\0")

  fileprivate class _StorageClass {
    var _deviceAdID: String? = nil
    var _networkName: String? = nil
    var _attribution: Bool? = nil
    var _orgName: String? = nil
    var _orgID: String? = nil
    var _campaignName: String? = nil
    var _campaignID: String? = nil
    var _clickDate: String? = nil
    var _conversionDate: String? = nil
    var _conversionType: String? = nil
    var _geo: String? = nil
    var _adgroupName: String? = nil
    var _adgroupID: String? = nil
    var _keyword: String? = nil
    var _keywordID: String? = nil
    var _keywordExtra: String? = nil
    var _creativesetName: String? = nil
    var _creativesetID: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _deviceAdID = source._deviceAdID
      _networkName = source._networkName
      _attribution = source._attribution
      _orgName = source._orgName
      _orgID = source._orgID
      _campaignName = source._campaignName
      _campaignID = source._campaignID
      _clickDate = source._clickDate
      _conversionDate = source._conversionDate
      _conversionType = source._conversionType
      _geo = source._geo
      _adgroupName = source._adgroupName
      _adgroupID = source._adgroupID
      _keyword = source._keyword
      _keywordID = source._keywordID
      _keywordExtra = source._keywordExtra
      _creativesetName = source._creativesetName
      _creativesetID = source._creativesetID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._deviceAdID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._networkName) }()
        case 3: try { try decoder.decodeSingularBoolField(value: &_storage._attribution) }()
        case 4: try { try decoder.decodeSingularStringField(value: &_storage._orgName) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._orgID) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._campaignName) }()
        case 7: try { try decoder.decodeSingularStringField(value: &_storage._campaignID) }()
        case 8: try { try decoder.decodeSingularStringField(value: &_storage._clickDate) }()
        case 9: try { try decoder.decodeSingularStringField(value: &_storage._conversionDate) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._conversionType) }()
        case 11: try { try decoder.decodeSingularStringField(value: &_storage._geo) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._adgroupName) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._adgroupID) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._keyword) }()
        case 15: try { try decoder.decodeSingularStringField(value: &_storage._keywordID) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._keywordExtra) }()
        case 17: try { try decoder.decodeSingularStringField(value: &_storage._creativesetName) }()
        case 18: try { try decoder.decodeSingularStringField(value: &_storage._creativesetID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._deviceAdID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._networkName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._attribution {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._orgName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._orgID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._campaignName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._campaignID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._clickDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._conversionDate {
        try visitor.visitSingularStringField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._conversionType {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._geo {
        try visitor.visitSingularStringField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._adgroupName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._adgroupID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._keyword {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._keywordID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._keywordExtra {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._creativesetName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._creativesetID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 18)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AdAttributionInfo, rhs: Ei_AdAttributionInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._deviceAdID != rhs_storage._deviceAdID {return false}
        if _storage._networkName != rhs_storage._networkName {return false}
        if _storage._attribution != rhs_storage._attribution {return false}
        if _storage._orgName != rhs_storage._orgName {return false}
        if _storage._orgID != rhs_storage._orgID {return false}
        if _storage._campaignName != rhs_storage._campaignName {return false}
        if _storage._campaignID != rhs_storage._campaignID {return false}
        if _storage._clickDate != rhs_storage._clickDate {return false}
        if _storage._conversionDate != rhs_storage._conversionDate {return false}
        if _storage._conversionType != rhs_storage._conversionType {return false}
        if _storage._geo != rhs_storage._geo {return false}
        if _storage._adgroupName != rhs_storage._adgroupName {return false}
        if _storage._adgroupID != rhs_storage._adgroupID {return false}
        if _storage._keyword != rhs_storage._keyword {return false}
        if _storage._keywordID != rhs_storage._keywordID {return false}
        if _storage._keywordExtra != rhs_storage._keywordExtra {return false}
        if _storage._creativesetName != rhs_storage._creativesetName {return false}
        if _storage._creativesetID != rhs_storage._creativesetID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsClientInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArtifactsClientInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}mission_capacity_mult\0\u{3}mission_duration_mult\0\u{3}launch_counts\0\u{3}mission_ftl_duration_research_mult\0\u{3}last_server_launch_count_sum_time\0\u{3}mission_capacity_research_mult\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._missionCapacityMult) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._missionDurationMult) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.launchCounts) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._missionFtlDurationResearchMult) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._lastServerLaunchCountSumTime) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._missionCapacityResearchMult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._missionCapacityMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._missionDurationMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    if !self.launchCounts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.launchCounts, fieldNumber: 3)
    }
    try { if let v = self._missionFtlDurationResearchMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._lastServerLaunchCountSumTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._missionCapacityResearchMult {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsClientInfo, rhs: Ei_ArtifactsClientInfo) -> Bool {
    if lhs._missionCapacityMult != rhs._missionCapacityMult {return false}
    if lhs._missionDurationMult != rhs._missionDurationMult {return false}
    if lhs._missionFtlDurationResearchMult != rhs._missionFtlDurationResearchMult {return false}
    if lhs._missionCapacityResearchMult != rhs._missionCapacityResearchMult {return false}
    if lhs.launchCounts != rhs.launchCounts {return false}
    if lhs._lastServerLaunchCountSumTime != rhs._lastServerLaunchCountSumTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsClientInfo.LaunchCount: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsClientInfo.protoMessageName + ".LaunchCount"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}ship\0\u{3}num_launches\0\u{3}launch_points\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._ship) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._numLaunches) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._launchPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ship {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._numLaunches {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._launchPoints {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsClientInfo.LaunchCount, rhs: Ei_ArtifactsClientInfo.LaunchCount) -> Bool {
    if lhs._ship != rhs._ship {return false}
    if lhs._numLaunches != rhs._numLaunches {return false}
    if lhs._launchPoints != rhs._launchPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MissionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}ship\0\u{1}status\0\u{3}duration_type\0\u{1}fuel\0\u{3}duration_seconds\0\u{3}seconds_remaining\0\u{1}identifier\0\u{3}start_time_derived\0\u{1}capacity\0\u{3}mission_log\0\u{3}quality_bump\0\u{1}level\0\u{3}target_artifact\0\u{1}type\0\u{3}reset_index\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._ship) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._durationType) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.fuel) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._durationSeconds) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._secondsRemaining) }()
      case 7: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._startTimeDerived) }()
      case 9: try { try decoder.decodeSingularUInt32Field(value: &self._capacity) }()
      case 10: try { try decoder.decodeSingularStringField(value: &self._missionLog) }()
      case 11: try { try decoder.decodeSingularDoubleField(value: &self._qualityBump) }()
      case 12: try { try decoder.decodeSingularUInt32Field(value: &self._level) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self._targetArtifact) }()
      case 14: try { try decoder.decodeSingularEnumField(value: &self._type) }()
      case 15: try { try decoder.decodeSingularUInt32Field(value: &self._resetIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ship {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._durationType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    if !self.fuel.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fuel, fieldNumber: 4)
    }
    try { if let v = self._durationSeconds {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._secondsRemaining {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._startTimeDerived {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._capacity {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
    } }()
    try { if let v = self._missionLog {
      try visitor.visitSingularStringField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._qualityBump {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._level {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
    } }()
    try { if let v = self._targetArtifact {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._type {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._resetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 15)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MissionInfo, rhs: Ei_MissionInfo) -> Bool {
    if lhs._ship != rhs._ship {return false}
    if lhs._status != rhs._status {return false}
    if lhs._durationType != rhs._durationType {return false}
    if lhs._type != rhs._type {return false}
    if lhs._resetIndex != rhs._resetIndex {return false}
    if lhs.fuel != rhs.fuel {return false}
    if lhs._level != rhs._level {return false}
    if lhs._durationSeconds != rhs._durationSeconds {return false}
    if lhs._capacity != rhs._capacity {return false}
    if lhs._qualityBump != rhs._qualityBump {return false}
    if lhs._targetArtifact != rhs._targetArtifact {return false}
    if lhs._secondsRemaining != rhs._secondsRemaining {return false}
    if lhs._startTimeDerived != rhs._startTimeDerived {return false}
    if lhs._missionLog != rhs._missionLog {return false}
    if lhs._identifier != rhs._identifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MissionInfo.Spaceship: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0CHICKEN_ONE\0\u{1}CHICKEN_NINE\0\u{1}CHICKEN_HEAVY\0\u{1}BCR\0\u{1}MILLENIUM_CHICKEN\0\u{1}CORELLIHEN_CORVETTE\0\u{1}GALEGGTICA\0\u{1}CHICKFIANT\0\u{1}VOYEGGER\0\u{1}HENERPRISE\0\u{1}ATREGGIES\0")
}

extension Ei_MissionInfo.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0FUELING\0\u{2}\u{5}PREPARE_TO_LAUNCH\0\u{2}\u{5}EXPLORING\0\u{2}\u{5}RETURNED\0\u{1}ANALYZING\0\u{2}\u{4}COMPLETE\0\u{2}\u{5}ARCHIVED\0\u{2}\u{5}ABORTED\0")
}

extension Ei_MissionInfo.DurationType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0SHORT\0\u{1}LONG\0\u{1}EPIC\0\u{1}TUTORIAL\0")
}

extension Ei_MissionInfo.MissionType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STANDARD\0\u{1}VIRTUE\0")
}

extension Ei_MissionInfo.Fuel: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_MissionInfo.protoMessageName + ".Fuel"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}egg\0\u{1}amount\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._egg) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._amount) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._egg {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._amount {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MissionInfo.Fuel, rhs: Ei_MissionInfo.Fuel) -> Bool {
    if lhs._egg != rhs._egg {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArtifactSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}level\0\u{1}rarity\0\u{1}egg\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._level) }()
      case 3: try { try decoder.decodeSingularEnumField(value: &self._rarity) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._egg) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._level {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._rarity {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._egg {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactSpec, rhs: Ei_ArtifactSpec) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._level != rhs._level {return false}
    if lhs._rarity != rhs._rarity {return false}
    if lhs._egg != rhs._egg {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactSpec.Name: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0LUNAR_TOTEM\0\u{1}TACHYON_STONE\0\u{1}TACHYON_STONE_FRAGMENT\0\u{1}NEODYMIUM_MEDALLION\0\u{1}BEAK_OF_MIDAS\0\u{1}LIGHT_OF_EGGENDIL\0\u{1}DEMETERS_NECKLACE\0\u{1}VIAL_MARTIAN_DUST\0\u{1}ORNATE_GUSSET\0\u{1}THE_CHALICE\0\u{1}BOOK_OF_BASAN\0\u{1}PHOENIX_FEATHER\0\u{1}TUNGSTEN_ANKH\0\u{1}EXTRATERRESTRIAL_ALUMINUM\0\u{1}ANCIENT_TUNGSTEN\0\u{1}SPACE_ROCKS\0\u{1}ALIEN_WOOD\0\u{1}GOLD_METEORITE\0\u{1}TAU_CETI_GEODE\0\u{1}CENTAURIAN_STEEL\0\u{1}ERIDANI_FEATHER\0\u{1}AURELIAN_BROOCH\0\u{1}CARVED_RAINSTICK\0\u{1}PUZZLE_CUBE\0\u{1}QUANTUM_METRONOME\0\u{1}SHIP_IN_A_BOTTLE\0\u{1}TACHYON_DEFLECTOR\0\u{1}INTERSTELLAR_COMPASS\0\u{1}DILITHIUM_MONOCLE\0\u{1}TITANIUM_ACTUATOR\0\u{1}MERCURYS_LENS\0\u{1}DILITHIUM_STONE\0\u{1}SHELL_STONE\0\u{1}LUNAR_STONE\0\u{1}SOUL_STONE\0\u{1}DRONE_PARTS\0\u{1}QUANTUM_STONE\0\u{1}TERRA_STONE\0\u{1}LIFE_STONE\0\u{1}PROPHECY_STONE\0\u{1}CLARITY_STONE\0\u{1}CELESTIAL_BRONZE\0\u{1}LALANDE_HIDE\0\u{1}SOLAR_TITANIUM\0\u{1}DILITHIUM_STONE_FRAGMENT\0\u{1}SHELL_STONE_FRAGMENT\0\u{1}LUNAR_STONE_FRAGMENT\0\u{1}SOUL_STONE_FRAGMENT\0\u{1}PROPHECY_STONE_FRAGMENT\0\u{1}QUANTUM_STONE_FRAGMENT\0\u{1}TERRA_STONE_FRAGMENT\0\u{1}LIFE_STONE_FRAGMENT\0\u{1}CLARITY_STONE_FRAGMENT\0\u{2}\\[\u{2}UNKNOWN\0")
}

extension Ei_ArtifactSpec.Level: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0INFERIOR\0\u{1}LESSER\0\u{1}NORMAL\0\u{1}GREATER\0\u{1}SUPERIOR\0")
}

extension Ei_ArtifactSpec.Rarity: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0COMMON\0\u{1}RARE\0\u{1}EPIC\0\u{1}LEGENDARY\0")
}

extension Ei_ArtifactSpec.TypeEnum: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0ARTIFACT\0\u{1}STONE\0\u{1}INGREDIENT\0\u{1}STONE_INGREDIENT\0")
}

extension Ei_CompleteArtifact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompleteArtifact"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}spec\0\u{1}stones\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.stones) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.stones.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.stones, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CompleteArtifact, rhs: Ei_CompleteArtifact) -> Bool {
    if lhs._spec != rhs._spec {return false}
    if lhs.stones != rhs.stones {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactInventoryItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArtifactInventoryItem"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}item_id\0\u{1}artifact\0\u{1}quantity\0\u{3}server_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._itemID) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._artifact) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._quantity) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._serverID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._itemID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._artifact {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._quantity {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._serverID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactInventoryItem, rhs: Ei_ArtifactInventoryItem) -> Bool {
    if lhs._itemID != rhs._itemID {return false}
    if lhs._artifact != rhs._artifact {return false}
    if lhs._quantity != rhs._quantity {return false}
    if lhs._serverID != rhs._serverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_InventorySlot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".InventorySlot"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}occupied\0\u{3}item_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._occupied) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._itemID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._occupied {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._itemID {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_InventorySlot, rhs: Ei_InventorySlot) -> Bool {
    if lhs._occupied != rhs._occupied {return false}
    if lhs._itemID != rhs._itemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsConfigurationRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArtifactsConfigurationRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}client_version\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt32Field(value: &self._clientVersion) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._clientVersion {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsConfigurationRequest, rhs: Ei_ArtifactsConfigurationRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._clientVersion != rhs._clientVersion {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsConfigurationResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArtifactsConfigurationResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}mission_parameters\0\u{3}artifact_parameters\0\u{3}crafting_level_infos\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.missionParameters) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.artifactParameters) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.craftingLevelInfos) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.missionParameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.missionParameters, fieldNumber: 1)
    }
    if !self.artifactParameters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.artifactParameters, fieldNumber: 2)
    }
    if !self.craftingLevelInfos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.craftingLevelInfos, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsConfigurationResponse, rhs: Ei_ArtifactsConfigurationResponse) -> Bool {
    if lhs.missionParameters != rhs.missionParameters {return false}
    if lhs.artifactParameters != rhs.artifactParameters {return false}
    if lhs.craftingLevelInfos != rhs.craftingLevelInfos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsConfigurationResponse.MissionParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsConfigurationResponse.protoMessageName + ".MissionParameters"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}ship\0\u{3}capacity_DEPRECATED\0\u{1}durations\0\u{3}level_mission_requirements\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._ship) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._capacityDeprecated) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.durations) }()
      case 4: try { try decoder.decodeRepeatedUInt32Field(value: &self.levelMissionRequirements) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._ship {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._capacityDeprecated {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    if !self.durations.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.durations, fieldNumber: 3)
    }
    if !self.levelMissionRequirements.isEmpty {
      try visitor.visitRepeatedUInt32Field(value: self.levelMissionRequirements, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsConfigurationResponse.MissionParameters, rhs: Ei_ArtifactsConfigurationResponse.MissionParameters) -> Bool {
    if lhs._ship != rhs._ship {return false}
    if lhs.durations != rhs.durations {return false}
    if lhs.levelMissionRequirements != rhs.levelMissionRequirements {return false}
    if lhs._capacityDeprecated != rhs._capacityDeprecated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsConfigurationResponse.MissionParameters.Duration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsConfigurationResponse.MissionParameters.protoMessageName + ".Duration"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}duration_type\0\u{1}seconds\0\u{1}quality\0\u{3}min_quality\0\u{3}max_quality\0\u{1}capacity\0\u{3}level_capacity_bump\0\u{3}level_quality_bump\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._durationType) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._seconds) }()
      case 3: try { try decoder.decodeSingularFloatField(value: &self._quality) }()
      case 4: try { try decoder.decodeSingularFloatField(value: &self._minQuality) }()
      case 5: try { try decoder.decodeSingularFloatField(value: &self._maxQuality) }()
      case 6: try { try decoder.decodeSingularUInt32Field(value: &self._capacity) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._levelCapacityBump) }()
      case 8: try { try decoder.decodeSingularFloatField(value: &self._levelQualityBump) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._durationType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._seconds {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._quality {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._minQuality {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._maxQuality {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._capacity {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._levelCapacityBump {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._levelQualityBump {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsConfigurationResponse.MissionParameters.Duration, rhs: Ei_ArtifactsConfigurationResponse.MissionParameters.Duration) -> Bool {
    if lhs._durationType != rhs._durationType {return false}
    if lhs._seconds != rhs._seconds {return false}
    if lhs._quality != rhs._quality {return false}
    if lhs._minQuality != rhs._minQuality {return false}
    if lhs._maxQuality != rhs._maxQuality {return false}
    if lhs._capacity != rhs._capacity {return false}
    if lhs._levelCapacityBump != rhs._levelCapacityBump {return false}
    if lhs._levelQualityBump != rhs._levelQualityBump {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsConfigurationResponse.ArtifactParameters: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsConfigurationResponse.protoMessageName + ".ArtifactParameters"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}spec\0\u{3}base_quality\0\u{1}value\0\u{3}odds_multiplier\0\u{3}crafting_price\0\u{3}crafting_price_low\0\u{3}crafting_price_domain\0\u{3}crafting_price_curve\0\u{3}crafting_xp\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._baseQuality) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._value) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._oddsMultiplier) }()
      case 5: try { try decoder.decodeSingularDoubleField(value: &self._craftingPrice) }()
      case 6: try { try decoder.decodeSingularDoubleField(value: &self._craftingPriceLow) }()
      case 7: try { try decoder.decodeSingularUInt32Field(value: &self._craftingPriceDomain) }()
      case 8: try { try decoder.decodeSingularDoubleField(value: &self._craftingPriceCurve) }()
      case 9: try { try decoder.decodeSingularUInt64Field(value: &self._craftingXp) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._baseQuality {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._value {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._oddsMultiplier {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._craftingPrice {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._craftingPriceLow {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._craftingPriceDomain {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
    } }()
    try { if let v = self._craftingPriceCurve {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
    } }()
    try { if let v = self._craftingXp {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 9)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsConfigurationResponse.ArtifactParameters, rhs: Ei_ArtifactsConfigurationResponse.ArtifactParameters) -> Bool {
    if lhs._spec != rhs._spec {return false}
    if lhs._baseQuality != rhs._baseQuality {return false}
    if lhs._oddsMultiplier != rhs._oddsMultiplier {return false}
    if lhs._value != rhs._value {return false}
    if lhs._craftingPrice != rhs._craftingPrice {return false}
    if lhs._craftingPriceLow != rhs._craftingPriceLow {return false}
    if lhs._craftingPriceDomain != rhs._craftingPriceDomain {return false}
    if lhs._craftingPriceCurve != rhs._craftingPriceCurve {return false}
    if lhs._craftingXp != rhs._craftingXp {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsConfigurationResponse.CraftingLevelInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsConfigurationResponse.protoMessageName + ".CraftingLevelInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}xp_required\0\u{3}rarity_mult\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._xpRequired) }()
      case 2: try { try decoder.decodeSingularFloatField(value: &self._rarityMult) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._xpRequired {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rarityMult {
      try visitor.visitSingularFloatField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsConfigurationResponse.CraftingLevelInfo, rhs: Ei_ArtifactsConfigurationResponse.CraftingLevelInfo) -> Bool {
    if lhs._xpRequired != rhs._xpRequired {return false}
    if lhs._rarityMult != rhs._rarityMult {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MissionRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}client_version\0\u{1}info\0\u{3}ei_user_id\0\u{1}rinfo\0\u{3}client_info\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _clientVersion: UInt32? = nil
    var _eiUserID: String? = nil
    var _info: Ei_MissionInfo? = nil
    var _clientInfo: Ei_ArtifactsClientInfo? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _clientVersion = source._clientVersion
      _eiUserID = source._eiUserID
      _info = source._info
      _clientInfo = source._clientInfo
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularUInt32Field(value: &_storage._clientVersion) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._info) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._eiUserID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._clientInfo) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._clientVersion {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._eiUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._clientInfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MissionRequest, rhs: Ei_MissionRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._clientVersion != rhs_storage._clientVersion {return false}
        if _storage._eiUserID != rhs_storage._eiUserID {return false}
        if _storage._info != rhs_storage._info {return false}
        if _storage._clientInfo != rhs_storage._clientInfo {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_MissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".MissionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{1}info\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._info) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._info {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_MissionResponse, rhs: Ei_MissionResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._info != rhs._info {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GetActiveMissionsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetActiveMissionsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{3}reset_index\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._resetIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._resetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_GetActiveMissionsRequest, rhs: Ei_GetActiveMissionsRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._resetIndex != rhs._resetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_GetActiveMissionsResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".GetActiveMissionsResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{3}active_missions\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.activeMissions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    if !self.activeMissions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.activeMissions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_GetActiveMissionsResponse, rhs: Ei_GetActiveMissionsResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs.activeMissions != rhs.activeMissions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CompleteMissionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CompleteMissionResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{1}info\0\u{1}artifacts\0\u{3}other_rewards\0\u{3}ei_user_id\0")

  fileprivate class _StorageClass {
    var _success: Bool? = nil
    var _info: Ei_MissionInfo? = nil
    var _artifacts: [Ei_CompleteMissionResponse.SecureArtifactSpec] = []
    var _otherRewards: [Ei_Reward] = []
    var _eiUserID: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _success = source._success
      _info = source._info
      _artifacts = source._artifacts
      _otherRewards = source._otherRewards
      _eiUserID = source._eiUserID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularBoolField(value: &_storage._success) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._info) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._artifacts) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._otherRewards) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._eiUserID) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._success {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._info {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._artifacts.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artifacts, fieldNumber: 3)
      }
      if !_storage._otherRewards.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._otherRewards, fieldNumber: 4)
      }
      try { if let v = _storage._eiUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CompleteMissionResponse, rhs: Ei_CompleteMissionResponse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._success != rhs_storage._success {return false}
        if _storage._info != rhs_storage._info {return false}
        if _storage._artifacts != rhs_storage._artifacts {return false}
        if _storage._otherRewards != rhs_storage._otherRewards {return false}
        if _storage._eiUserID != rhs_storage._eiUserID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CompleteMissionResponse.SecureArtifactSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_CompleteMissionResponse.protoMessageName + ".SecureArtifactSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}spec\0\u{3}server_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._serverID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._serverID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CompleteMissionResponse.SecureArtifactSpec, rhs: Ei_CompleteMissionResponse.SecureArtifactSpec) -> Bool {
    if lhs._spec != rhs._spec {return false}
    if lhs._serverID != rhs._serverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CollectContractArtifactRewardsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectContractArtifactRewardsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{3}contract_identifier\0\u{3}goal_index\0\u{3}best_ship\0\u{1}league\0\u{1}grade\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._contractIdentifier) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._goalIndex) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._bestShip) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._league) }()
      case 6: try { try decoder.decodeSingularEnumField(value: &self._grade) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._contractIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._goalIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._bestShip {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._league {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._grade {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CollectContractArtifactRewardsRequest, rhs: Ei_CollectContractArtifactRewardsRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._contractIdentifier != rhs._contractIdentifier {return false}
    if lhs._league != rhs._league {return false}
    if lhs._grade != rhs._grade {return false}
    if lhs._goalIndex != rhs._goalIndex {return false}
    if lhs._bestShip != rhs._bestShip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CollectSeasonArtifactRewardsRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CollectSeasonArtifactRewardsRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{3}season_identifier\0\u{1}cxp\0\u{3}best_ship\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._seasonIdentifier) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._cxp) }()
      case 4: try { try decoder.decodeSingularEnumField(value: &self._bestShip) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._seasonIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._cxp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._bestShip {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CollectSeasonArtifactRewardsRequest, rhs: Ei_CollectSeasonArtifactRewardsRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._seasonIdentifier != rhs._seasonIdentifier {return false}
    if lhs._cxp != rhs._cxp {return false}
    if lhs._bestShip != rhs._bestShip {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CraftArtifactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CraftArtifactRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}ei_user_id\0\u{1}spec\0\u{3}item_id\0\u{1}ingredients\0\u{1}rinfo\0\u{3}gold_price_paid\0\u{3}crafting_count\0\u{3}crafting_xp\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _eiUserID: String? = nil
    var _spec: Ei_ArtifactSpec? = nil
    var _itemID: UInt64? = nil
    var _goldPricePaid: Double? = nil
    var _craftingCount: UInt32? = nil
    var _craftingXp: Double? = nil
    var _ingredients: [Ei_ArtifactInventoryItem] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _eiUserID = source._eiUserID
      _spec = source._spec
      _itemID = source._itemID
      _goldPricePaid = source._goldPricePaid
      _craftingCount = source._craftingCount
      _craftingXp = source._craftingXp
      _ingredients = source._ingredients
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._eiUserID) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 3: try { try decoder.decodeSingularUInt64Field(value: &_storage._itemID) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._ingredients) }()
        case 5: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._goldPricePaid) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._craftingCount) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._craftingXp) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._eiUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._itemID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
      } }()
      if !_storage._ingredients.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ingredients, fieldNumber: 4)
      }
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._goldPricePaid {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._craftingCount {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._craftingXp {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CraftArtifactRequest, rhs: Ei_CraftArtifactRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._eiUserID != rhs_storage._eiUserID {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._itemID != rhs_storage._itemID {return false}
        if _storage._goldPricePaid != rhs_storage._goldPricePaid {return false}
        if _storage._craftingCount != rhs_storage._craftingCount {return false}
        if _storage._craftingXp != rhs_storage._craftingXp {return false}
        if _storage._ingredients != rhs_storage._ingredients {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CraftArtifactResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CraftArtifactResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}item_id\0\u{3}rarity_achieved\0\u{3}server_id\0\u{4}\u{2}ei_user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularUInt64Field(value: &self._itemID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._rarityAchieved) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._serverID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._itemID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._rarityAchieved {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._serverID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CraftArtifactResponse, rhs: Ei_CraftArtifactResponse) -> Bool {
    if lhs._itemID != rhs._itemID {return false}
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs._rarityAchieved != rhs._rarityAchieved {return false}
    if lhs._serverID != rhs._serverID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ConsumeArtifactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsumeArtifactRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}spec\0\u{3}original_item_id\0\u{3}ei_user_id\0\u{1}rinfo\0\u{3}artifact_server_id\0\u{1}quantity\0\u{3}additional_server_ids\0\u{3}additional_item_ids\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _eiUserID: String? = nil
    var _spec: Ei_ArtifactSpec? = nil
    var _artifactServerID: String? = nil
    var _originalItemID: UInt64? = nil
    var _additionalServerIds: [String] = []
    var _additionalItemIds: [UInt64] = []
    var _quantity: UInt32? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _eiUserID = source._eiUserID
      _spec = source._spec
      _artifactServerID = source._artifactServerID
      _originalItemID = source._originalItemID
      _additionalServerIds = source._additionalServerIds
      _additionalItemIds = source._additionalItemIds
      _quantity = source._quantity
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._spec) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._originalItemID) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._eiUserID) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 5: try { try decoder.decodeSingularStringField(value: &_storage._artifactServerID) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._quantity) }()
        case 7: try { try decoder.decodeRepeatedStringField(value: &_storage._additionalServerIds) }()
        case 8: try { try decoder.decodeRepeatedUInt64Field(value: &_storage._additionalItemIds) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._spec {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._originalItemID {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._eiUserID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._artifactServerID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._quantity {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      } }()
      if !_storage._additionalServerIds.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._additionalServerIds, fieldNumber: 7)
      }
      if !_storage._additionalItemIds.isEmpty {
        try visitor.visitRepeatedUInt64Field(value: _storage._additionalItemIds, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ConsumeArtifactRequest, rhs: Ei_ConsumeArtifactRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._eiUserID != rhs_storage._eiUserID {return false}
        if _storage._spec != rhs_storage._spec {return false}
        if _storage._artifactServerID != rhs_storage._artifactServerID {return false}
        if _storage._originalItemID != rhs_storage._originalItemID {return false}
        if _storage._additionalServerIds != rhs_storage._additionalServerIds {return false}
        if _storage._additionalItemIds != rhs_storage._additionalItemIds {return false}
        if _storage._quantity != rhs_storage._quantity {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ConsumeArtifactResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ConsumeArtifactResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{3}original_item_id\0\u{1}byproducts\0\u{3}other_rewards\0\u{3}ei_user_id\0\u{3}additional_item_ids\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._originalItemID) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.byproducts) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.otherRewards) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      case 6: try { try decoder.decodeRepeatedUInt64Field(value: &self.additionalItemIds) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._originalItemID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    if !self.byproducts.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.byproducts, fieldNumber: 3)
    }
    if !self.otherRewards.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.otherRewards, fieldNumber: 4)
    }
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    if !self.additionalItemIds.isEmpty {
      try visitor.visitRepeatedUInt64Field(value: self.additionalItemIds, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ConsumeArtifactResponse, rhs: Ei_ConsumeArtifactResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._originalItemID != rhs._originalItemID {return false}
    if lhs.additionalItemIds != rhs.additionalItemIds {return false}
    if lhs.byproducts != rhs.byproducts {return false}
    if lhs.otherRewards != rhs.otherRewards {return false}
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AuthenticateArtifactResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticateArtifactResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{3}original_item_id\0\u{1}demote\0\u{1}delete\0\u{3}ei_user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._originalItemID) }()
      case 3: try { try decoder.decodeSingularBoolField(value: &self._demote) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._delete) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._originalItemID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._demote {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._delete {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AuthenticateArtifactResponse, rhs: Ei_AuthenticateArtifactResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._originalItemID != rhs._originalItemID {return false}
    if lhs._demote != rhs._demote {return false}
    if lhs._delete != rhs._delete {return false}
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SetArtifactRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetArtifactRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{1}artifact\0\u{1}stones\0\u{3}gold_price_paid\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _artifact: Ei_ArtifactInventoryItem? = nil
    var _stones: [Ei_ArtifactSpec] = []
    var _goldPricePaid: Double? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _artifact = source._artifact
      _stones = source._stones
      _goldPricePaid = source._goldPricePaid
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._artifact) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._stones) }()
        case 4: try { try decoder.decodeSingularDoubleField(value: &_storage._goldPricePaid) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._artifact {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      if !_storage._stones.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._stones, fieldNumber: 3)
      }
      try { if let v = _storage._goldPricePaid {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SetArtifactRequest, rhs: Ei_SetArtifactRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._artifact != rhs_storage._artifact {return false}
        if _storage._stones != rhs_storage._stones {return false}
        if _storage._goldPricePaid != rhs_storage._goldPricePaid {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SetArtifactResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SetArtifactResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{3}original_item_id\0\u{4}\u{3}ei_user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._originalItemID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._originalItemID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SetArtifactResponse, rhs: Ei_SetArtifactResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._originalItemID != rhs._originalItemID {return false}
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ActiveArtifactSlot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ActiveArtifactSlot"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}occupied\0\u{3}item_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._occupied) }()
      case 2: try { try decoder.decodeSingularUInt64Field(value: &self._itemID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._occupied {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._itemID {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ActiveArtifactSlot, rhs: Ei_ActiveArtifactSlot) -> Bool {
    if lhs._occupied != rhs._occupied {return false}
    if lhs._itemID != rhs._itemID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsDB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ArtifactsDB"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}inventory_items\0\u{3}item_sequence\0\u{3}inventory_slots_NOT_USED\0\u{3}mission_infos\0\u{3}mission_archive\0\u{4}\u{2}active_artifacts_DEPRECATED\0\u{3}discovered_artifacts_DEPRECATED\0\u{3}craftable_artifacts_DEPRECATED\0\u{3}crafting_counts_DEPRECATED\0\u{3}active_artifact_sets\0\u{3}artifact_status\0\u{3}saved_artifact_sets\0\u{3}fueling_mission\0\u{3}virtue_afx_db\0")

  fileprivate class _StorageClass {
    var _inventoryItems: [Ei_ArtifactInventoryItem] = []
    var _itemSequence: UInt64? = nil
    var _inventorySlotsNotUsed: [Ei_InventorySlot] = []
    var _activeArtifactsDeprecated: [Ei_ActiveArtifactSlot] = []
    var _activeArtifactSets: [Ei_ArtifactsDB.ActiveArtifactSet] = []
    var _savedArtifactSets: [Ei_ArtifactsDB.ActiveArtifactSet] = []
    var _artifactStatus: [Ei_ArtifactsDB.CraftableArtifact] = []
    var _fuelingMission: Ei_MissionInfo? = nil
    var _missionInfos: [Ei_MissionInfo] = []
    var _missionArchive: [Ei_MissionInfo] = []
    var _virtueAfxDb: Ei_ArtifactsDB.VirtueDB? = nil
    var _discoveredArtifactsDeprecated: [Ei_ArtifactSpec] = []
    var _craftableArtifactsDeprecated: [Ei_ArtifactsDB.CraftableArtifact] = []
    var _craftingCountsDeprecated: [Ei_ArtifactsDB.CraftableArtifact] = []

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _inventoryItems = source._inventoryItems
      _itemSequence = source._itemSequence
      _inventorySlotsNotUsed = source._inventorySlotsNotUsed
      _activeArtifactsDeprecated = source._activeArtifactsDeprecated
      _activeArtifactSets = source._activeArtifactSets
      _savedArtifactSets = source._savedArtifactSets
      _artifactStatus = source._artifactStatus
      _fuelingMission = source._fuelingMission
      _missionInfos = source._missionInfos
      _missionArchive = source._missionArchive
      _virtueAfxDb = source._virtueAfxDb
      _discoveredArtifactsDeprecated = source._discoveredArtifactsDeprecated
      _craftableArtifactsDeprecated = source._craftableArtifactsDeprecated
      _craftingCountsDeprecated = source._craftingCountsDeprecated
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._inventoryItems) }()
        case 2: try { try decoder.decodeSingularUInt64Field(value: &_storage._itemSequence) }()
        case 3: try { try decoder.decodeRepeatedMessageField(value: &_storage._inventorySlotsNotUsed) }()
        case 4: try { try decoder.decodeRepeatedMessageField(value: &_storage._missionInfos) }()
        case 5: try { try decoder.decodeRepeatedMessageField(value: &_storage._missionArchive) }()
        case 7: try { try decoder.decodeRepeatedMessageField(value: &_storage._activeArtifactsDeprecated) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._discoveredArtifactsDeprecated) }()
        case 9: try { try decoder.decodeRepeatedMessageField(value: &_storage._craftableArtifactsDeprecated) }()
        case 10: try { try decoder.decodeRepeatedMessageField(value: &_storage._craftingCountsDeprecated) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._activeArtifactSets) }()
        case 12: try { try decoder.decodeRepeatedMessageField(value: &_storage._artifactStatus) }()
        case 13: try { try decoder.decodeRepeatedMessageField(value: &_storage._savedArtifactSets) }()
        case 14: try { try decoder.decodeSingularMessageField(value: &_storage._fuelingMission) }()
        case 15: try { try decoder.decodeSingularMessageField(value: &_storage._virtueAfxDb) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._inventoryItems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inventoryItems, fieldNumber: 1)
      }
      try { if let v = _storage._itemSequence {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 2)
      } }()
      if !_storage._inventorySlotsNotUsed.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inventorySlotsNotUsed, fieldNumber: 3)
      }
      if !_storage._missionInfos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._missionInfos, fieldNumber: 4)
      }
      if !_storage._missionArchive.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._missionArchive, fieldNumber: 5)
      }
      if !_storage._activeArtifactsDeprecated.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._activeArtifactsDeprecated, fieldNumber: 7)
      }
      if !_storage._discoveredArtifactsDeprecated.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._discoveredArtifactsDeprecated, fieldNumber: 8)
      }
      if !_storage._craftableArtifactsDeprecated.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._craftableArtifactsDeprecated, fieldNumber: 9)
      }
      if !_storage._craftingCountsDeprecated.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._craftingCountsDeprecated, fieldNumber: 10)
      }
      if !_storage._activeArtifactSets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._activeArtifactSets, fieldNumber: 11)
      }
      if !_storage._artifactStatus.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artifactStatus, fieldNumber: 12)
      }
      if !_storage._savedArtifactSets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._savedArtifactSets, fieldNumber: 13)
      }
      try { if let v = _storage._fuelingMission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._virtueAfxDb {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsDB, rhs: Ei_ArtifactsDB) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._inventoryItems != rhs_storage._inventoryItems {return false}
        if _storage._itemSequence != rhs_storage._itemSequence {return false}
        if _storage._inventorySlotsNotUsed != rhs_storage._inventorySlotsNotUsed {return false}
        if _storage._activeArtifactsDeprecated != rhs_storage._activeArtifactsDeprecated {return false}
        if _storage._activeArtifactSets != rhs_storage._activeArtifactSets {return false}
        if _storage._savedArtifactSets != rhs_storage._savedArtifactSets {return false}
        if _storage._artifactStatus != rhs_storage._artifactStatus {return false}
        if _storage._fuelingMission != rhs_storage._fuelingMission {return false}
        if _storage._missionInfos != rhs_storage._missionInfos {return false}
        if _storage._missionArchive != rhs_storage._missionArchive {return false}
        if _storage._virtueAfxDb != rhs_storage._virtueAfxDb {return false}
        if _storage._discoveredArtifactsDeprecated != rhs_storage._discoveredArtifactsDeprecated {return false}
        if _storage._craftableArtifactsDeprecated != rhs_storage._craftableArtifactsDeprecated {return false}
        if _storage._craftingCountsDeprecated != rhs_storage._craftingCountsDeprecated {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsDB.ActiveArtifactSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsDB.protoMessageName + ".ActiveArtifactSet"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}slots\0\u{1}uid\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.slots) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._uid) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.slots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.slots, fieldNumber: 1)
    }
    try { if let v = self._uid {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsDB.ActiveArtifactSet, rhs: Ei_ArtifactsDB.ActiveArtifactSet) -> Bool {
    if lhs.slots != rhs.slots {return false}
    if lhs._uid != rhs._uid {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsDB.CraftableArtifact: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsDB.protoMessageName + ".CraftableArtifact"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}spec\0\u{1}seen\0\u{1}count\0\u{1}craftable\0\u{3}recipe_discovered\0\u{1}discovered\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._spec) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._seen) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._count) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._craftable) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._recipeDiscovered) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._discovered) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._spec {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._seen {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._count {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._craftable {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._recipeDiscovered {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._discovered {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsDB.CraftableArtifact, rhs: Ei_ArtifactsDB.CraftableArtifact) -> Bool {
    if lhs._spec != rhs._spec {return false}
    if lhs._discovered != rhs._discovered {return false}
    if lhs._craftable != rhs._craftable {return false}
    if lhs._recipeDiscovered != rhs._recipeDiscovered {return false}
    if lhs._seen != rhs._seen {return false}
    if lhs._count != rhs._count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ArtifactsDB.VirtueDB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ArtifactsDB.protoMessageName + ".VirtueDB"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}inventory_items\0\u{3}artifact_status\0\u{3}fueling_mission\0\u{4}\u{a}active_artifacts\0")

  fileprivate class _StorageClass {
    var _inventoryItems: [Ei_ArtifactInventoryItem] = []
    var _artifactStatus: [Ei_ArtifactsDB.CraftableArtifact] = []
    var _fuelingMission: Ei_MissionInfo? = nil
    var _activeArtifacts: Ei_ArtifactsDB.ActiveArtifactSet? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _inventoryItems = source._inventoryItems
      _artifactStatus = source._artifactStatus
      _fuelingMission = source._fuelingMission
      _activeArtifacts = source._activeArtifacts
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeRepeatedMessageField(value: &_storage._inventoryItems) }()
        case 2: try { try decoder.decodeRepeatedMessageField(value: &_storage._artifactStatus) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._fuelingMission) }()
        case 13: try { try decoder.decodeSingularMessageField(value: &_storage._activeArtifacts) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      if !_storage._inventoryItems.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._inventoryItems, fieldNumber: 1)
      }
      if !_storage._artifactStatus.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artifactStatus, fieldNumber: 2)
      }
      try { if let v = _storage._fuelingMission {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._activeArtifacts {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ArtifactsDB.VirtueDB, rhs: Ei_ArtifactsDB.VirtueDB) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._inventoryItems != rhs_storage._inventoryItems {return false}
        if _storage._artifactStatus != rhs_storage._artifactStatus {return false}
        if _storage._fuelingMission != rhs_storage._fuelingMission {return false}
        if _storage._activeArtifacts != rhs_storage._activeArtifacts {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AuthenticatedMessage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AuthenticatedMessage"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}message\0\u{1}code\0\u{1}version\0\u{1}compressed\0\u{3}original_size\0\u{3}user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBytesField(value: &self._message) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._code) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._version) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._compressed) }()
      case 5: try { try decoder.decodeSingularUInt32Field(value: &self._originalSize) }()
      case 6: try { try decoder.decodeSingularStringField(value: &self._userID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._message {
      try visitor.visitSingularBytesField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._code {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._version {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._compressed {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._originalSize {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._userID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AuthenticatedMessage, rhs: Ei_AuthenticatedMessage) -> Bool {
    if lhs._message != rhs._message {return false}
    if lhs._version != rhs._version {return false}
    if lhs._code != rhs._code {return false}
    if lhs._compressed != rhs._compressed {return false}
    if lhs._originalSize != rhs._originalSize {return false}
    if lhs._userID != rhs._userID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LogCompleteMissionPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogCompleteMissionPayload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}req\0\u{1}res\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._req) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._res) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._req {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._res {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LogCompleteMissionPayload, rhs: Ei_LogCompleteMissionPayload) -> Bool {
    if lhs._req != rhs._req {return false}
    if lhs._res != rhs._res {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LogCraftArtifactPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogCraftArtifactPayload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}req\0\u{1}res\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._req) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._res) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._req {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._res {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LogCraftArtifactPayload, rhs: Ei_LogCraftArtifactPayload) -> Bool {
    if lhs._req != rhs._req {return false}
    if lhs._res != rhs._res {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LogConsumeArtifactPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogConsumeArtifactPayload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}req\0\u{1}res\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._req) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._res) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._req {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._res {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LogConsumeArtifactPayload, rhs: Ei_LogConsumeArtifactPayload) -> Bool {
    if lhs._req != rhs._req {return false}
    if lhs._res != rhs._res {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_LogSetArtifactPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".LogSetArtifactPayload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}req\0\u{1}res\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._req) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._res) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._req {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._res {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_LogSetArtifactPayload, rhs: Ei_LogSetArtifactPayload) -> Bool {
    if lhs._req != rhs._req {return false}
    if lhs._res != rhs._res {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_AccountTransferPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".AccountTransferPayload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}from_id\0\u{3}to_ei_user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._fromID) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._toEiUserID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._fromID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._toEiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_AccountTransferPayload, rhs: Ei_AccountTransferPayload) -> Bool {
    if lhs._fromID != rhs._fromID {return false}
    if lhs._toEiUserID != rhs._toEiUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SaveBackupResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SaveBackupResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}success\0\u{3}error_code\0\u{1}message\0\u{3}existing_backup\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularBoolField(value: &self._success) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._errorCode) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._message) }()
      case 4: try { try decoder.decodeSingularMessageField(value: &self._existingBackup) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._success {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._errorCode {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._existingBackup {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SaveBackupResponse, rhs: Ei_SaveBackupResponse) -> Bool {
    if lhs._success != rhs._success {return false}
    if lhs._errorCode != rhs._errorCode {return false}
    if lhs._message != rhs._message {return false}
    if lhs._existingBackup != rhs._existingBackup {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SaveBackupResponse.ErrorCodes: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NO_ERROR\0\u{1}USER_NOT_FOUND\0\u{1}COULD_NOT_OVERWRITE\0\u{1}BACKUP_OFFERED\0\u{1}BAD_USER_ID\0")
}

extension Ei_CleanAccountRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CleanAccountRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}ei_user_id_to_keep\0\u{3}game_services_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._eiUserIDToKeep) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._gameServicesID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._eiUserIDToKeep {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._gameServicesID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CleanAccountRequest, rhs: Ei_CleanAccountRequest) -> Bool {
    if lhs._eiUserIDToKeep != rhs._eiUserIDToKeep {return false}
    if lhs._gameServicesID != rhs._gameServicesID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ReturnEDTPayload: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ReturnEDTPayload"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}ei_user_id\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._eiUserID) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._eiUserID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ReturnEDTPayload, rhs: Ei_ReturnEDTPayload) -> Bool {
    if lhs._eiUserID != rhs._eiUserID {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_DLCItem: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DLCItem"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}name\0\u{1}directory\0\u{1}ext\0\u{1}url\0\u{1}checksum\0\u{1}compressed\0\u{3}original_size\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._directory) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._ext) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._url) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._checksum) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._compressed) }()
      case 7: try { try decoder.decodeSingularUInt64Field(value: &self._originalSize) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._directory {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._ext {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._url {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._checksum {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._compressed {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._originalSize {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_DLCItem, rhs: Ei_DLCItem) -> Bool {
    if lhs._name != rhs._name {return false}
    if lhs._directory != rhs._directory {return false}
    if lhs._ext != rhs._ext {return false}
    if lhs._compressed != rhs._compressed {return false}
    if lhs._originalSize != rhs._originalSize {return false}
    if lhs._url != rhs._url {return false}
    if lhs._checksum != rhs._checksum {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{2}\u{2}name\0\u{1}price\0\u{3}required_eop\0\u{3}required_soul_eggs\0\u{4}\u{2}default_appearance\0\u{2}\u{3}pieces\0\u{3}primary_piece\0\u{3}set_identifier\0\u{3}is_new\0\u{1}expires\0\u{3}seconds_remaining\0\u{3}seconds_until_available\0\u{3}alt_assets\0\u{3}modified_geometry\0\u{3}required_parent_shell\0\u{1}popularity\0")

  fileprivate class _StorageClass {
    var _identifier: String? = nil
    var _primaryPiece: Ei_ShellSpec.ShellPiece? = nil
    var _pieces: [Ei_ShellSpec.ShellPiece] = []
    var _altAssets: [Ei_DLCItem] = []
    var _name: String? = nil
    var _setIdentifier: String? = nil
    var _modifiedGeometry: Bool? = nil
    var _price: UInt32? = nil
    var _requiredEop: UInt32? = nil
    var _requiredSoulEggs: Double? = nil
    var _requiredParentShell: String? = nil
    var _isNew: Bool? = nil
    var _expires: Bool? = nil
    var _secondsUntilAvailable: Double? = nil
    var _secondsRemaining: Double? = nil
    var _popularity: UInt64? = nil
    var _defaultAppearance: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identifier = source._identifier
      _primaryPiece = source._primaryPiece
      _pieces = source._pieces
      _altAssets = source._altAssets
      _name = source._name
      _setIdentifier = source._setIdentifier
      _modifiedGeometry = source._modifiedGeometry
      _price = source._price
      _requiredEop = source._requiredEop
      _requiredSoulEggs = source._requiredSoulEggs
      _requiredParentShell = source._requiredParentShell
      _isNew = source._isNew
      _expires = source._expires
      _secondsUntilAvailable = source._secondsUntilAvailable
      _secondsRemaining = source._secondsRemaining
      _popularity = source._popularity
      _defaultAppearance = source._defaultAppearance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._identifier) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._price) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._requiredEop) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._requiredSoulEggs) }()
        case 8: try { try decoder.decodeSingularBoolField(value: &_storage._defaultAppearance) }()
        case 11: try { try decoder.decodeRepeatedMessageField(value: &_storage._pieces) }()
        case 12: try { try decoder.decodeSingularMessageField(value: &_storage._primaryPiece) }()
        case 13: try { try decoder.decodeSingularStringField(value: &_storage._setIdentifier) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._isNew) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._expires) }()
        case 16: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsRemaining) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsUntilAvailable) }()
        case 18: try { try decoder.decodeRepeatedMessageField(value: &_storage._altAssets) }()
        case 19: try { try decoder.decodeSingularBoolField(value: &_storage._modifiedGeometry) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._requiredParentShell) }()
        case 21: try { try decoder.decodeSingularUInt64Field(value: &_storage._popularity) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._identifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._price {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._requiredEop {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._requiredSoulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._defaultAppearance {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 8)
      } }()
      if !_storage._pieces.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pieces, fieldNumber: 11)
      }
      try { if let v = _storage._primaryPiece {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._setIdentifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._isNew {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._expires {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._secondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._secondsUntilAvailable {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      if !_storage._altAssets.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._altAssets, fieldNumber: 18)
      }
      try { if let v = _storage._modifiedGeometry {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._requiredParentShell {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._popularity {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellSpec, rhs: Ei_ShellSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._primaryPiece != rhs_storage._primaryPiece {return false}
        if _storage._pieces != rhs_storage._pieces {return false}
        if _storage._altAssets != rhs_storage._altAssets {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._setIdentifier != rhs_storage._setIdentifier {return false}
        if _storage._modifiedGeometry != rhs_storage._modifiedGeometry {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._requiredEop != rhs_storage._requiredEop {return false}
        if _storage._requiredSoulEggs != rhs_storage._requiredSoulEggs {return false}
        if _storage._requiredParentShell != rhs_storage._requiredParentShell {return false}
        if _storage._isNew != rhs_storage._isNew {return false}
        if _storage._expires != rhs_storage._expires {return false}
        if _storage._secondsUntilAvailable != rhs_storage._secondsUntilAvailable {return false}
        if _storage._secondsRemaining != rhs_storage._secondsRemaining {return false}
        if _storage._popularity != rhs_storage._popularity {return false}
        if _storage._defaultAppearance != rhs_storage._defaultAppearance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellSpec.AssetType: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}COOP\0\u{1}SHACK\0\u{1}SUPER_SHACK\0\u{1}SHORT_HOUSE\0\u{1}THE_STANDARD\0\u{1}LONG_HOUSE\0\u{1}DOUBLE_DECKER\0\u{1}WAREHOUSE\0\u{1}CENTER\0\u{1}BUNKER\0\u{1}EGGKEA\0\u{1}HAB_1K\0\u{1}HANGAR\0\u{1}TOWER\0\u{1}HAB_10K\0\u{1}EGGTOPIA\0\u{1}MONOLITH\0\u{1}PLANET_PORTAL\0\u{1}CHICKEN_UNIVERSE\0\u{2}\u{1f}SILO_0_SMALL\0\u{1}SILO_0_MED\0\u{1}SILO_0_LARGE\0\u{1}SILO_1_SMALL\0\u{1}SILO_1_MED\0\u{1}SILO_1_LARGE\0\u{2}\u{4}SILO_ALL\0\u{2}\u{b}MAILBOX\0\u{1}TROPHY_CASE\0\u{1}GROUND\0\u{1}HARDSCAPE\0\u{1}HYPERLOOP\0\u{2}\u{1a}DEPOT_1\0\u{1}DEPOT_2\0\u{1}DEPOT_3\0\u{1}DEPOT_4\0\u{1}DEPOT_5\0\u{1}DEPOT_6\0\u{1}DEPOT_7\0\u{2}\u{4}LAB_1\0\u{1}LAB_2\0\u{1}LAB_3\0\u{1}LAB_4\0\u{1}LAB_5\0\u{1}LAB_6\0\u{2}\u{5}HATCHERY_EDIBLE\0\u{1}HATCHERY_SUPERFOOD\0\u{1}HATCHERY_MEDICAL\0\u{1}HATCHERY_ROCKET_FUEL\0\u{1}HATCHERY_SUPERMATERIAL\0\u{1}HATCHERY_FUSION\0\u{1}HATCHERY_QUANTUM\0\u{1}HATCHERY_IMMORTALITY\0\u{1}HATCHERY_TACHYON\0\u{1}HATCHERY_GRAVITON\0\u{1}HATCHERY_DILITHIUM\0\u{1}HATCHERY_PRODIGY\0\u{1}HATCHERY_TERRAFORM\0\u{1}HATCHERY_ANTIMATTER\0\u{1}HATCHERY_DARK_MATTER\0\u{1}HATCHERY_AI\0\u{1}HATCHERY_NEBULA\0\u{1}HATCHERY_UNIVERSE\0\u{1}HATCHERY_ENLIGHTENMENT\0\u{1}HATCHERY_CHOCOLATE\0\u{1}HATCHERY_EASTER\0\u{1}HATCHERY_WATERBALLOON\0\u{1}HATCHERY_FIREWORK\0\u{1}HATCHERY_PUMPKIN\0\u{2}\u{7}HATCHERY_CUSTOM\0\u{2}\u{a}HATCHERY_CURIOSITY\0\u{1}HATCHERY_INTEGRITY\0\u{1}HATCHERY_HUMILITY\0\u{1}HATCHERY_RESILIENCE\0\u{1}HATCHERY_KINDNESS\0\u{2}\u{6}HOA_1\0\u{1}HOA_2\0\u{1}HOA_3\0\u{2}\u{8}MISSION_CONTROL_1\0\u{1}MISSION_CONTROL_2\0\u{1}MISSION_CONTROL_3\0\u{2}\u{12}FUEL_TANK_1\0\u{1}FUEL_TANK_2\0\u{1}FUEL_TANK_3\0\u{1}FUEL_TANK_4\0\u{2}i\u{4}HATCHERY_GRAVITON_TOP\0\u{1}HATCHERY_NEBULA_MIDDLE\0\u{1}HATCHERY_NEBULA_TOP\0\u{2}\u{3}HATCHERY_DARK_MATTER_RING_1\0\u{1}HATCHERY_DARK_MATTER_RING_2\0\u{1}HATCHERY_DARK_MATTER_RING_3\0\u{2}\u{3}HATCHERY_AI_TOP_1\0\u{1}HATCHERY_AI_TOP_2\0\u{1}HATCHERY_AI_TOP_3\0\u{1}HATCHERY_AI_TOP_4\0\u{2}\u{2}HATCHERY_UNIVERSE_PROBE\0\u{1}HATCHERY_UNIVERSE_BOLT\0\u{2}\u{4}HATCHERY_ENLIGHTENMENT_ORB\0\u{2}\u{1e}HATCHERY_CURIOSITY_EXTRA\0\u{1}HATCHERY_INTEGRITY_EXTRA\0\u{1}HATCHERY_HUMILITY_EXTRA\0\u{1}HATCHERY_RESILIENCE_EXTRA\0\u{1}HATCHERY_KINDNESS_EXTRA\0\u{2}\u{10}HYPERLOOP_TRACK\0\u{2}\u{1e}MAILBOX_FULL\0\u{2}P\u{6}CHICKEN\0\u{2}\u{a}HAT\0\u{2}]L\u{2}UNKNOWN\0")
}

extension Ei_ShellSpec.ShellPiece: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellSpec.protoMessageName + ".ShellPiece"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}asset_type\0\u{1}dlc\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._assetType) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._dlc) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._assetType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._dlc {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellSpec.ShellPiece, rhs: Ei_ShellSpec.ShellPiece) -> Bool {
    if lhs._assetType != rhs._assetType {return false}
    if lhs._dlc != rhs._dlc {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellSetSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellSetSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{1}name\0\u{1}price\0\u{3}required_eop\0\u{3}required_soul_eggs\0\u{3}default_appearance\0\u{3}element_set\0\u{3}price_mult_DEPRECATED\0\u{3}is_new\0\u{1}expires\0\u{3}seconds_remaining\0\u{3}custom_appearance\0\u{3}modified_geometry\0\u{1}decorator\0\u{1}variations\0\u{3}hex_base_color\0\u{1}discount\0\u{3}seconds_until_available\0\u{1}icon\0\u{3}required_parent_set\0\u{1}popularity\0")

  fileprivate class _StorageClass {
    var _identifier: String? = nil
    var _name: String? = nil
    var _price: UInt32? = nil
    var _priceMultDeprecated: Double? = nil
    var _discount: Double? = nil
    var _requiredEop: UInt32? = nil
    var _requiredSoulEggs: Double? = nil
    var _requiredParentSet: String? = nil
    var _isNew: Bool? = nil
    var _expires: Bool? = nil
    var _secondsUntilAvailable: Double? = nil
    var _secondsRemaining: Double? = nil
    var _popularity: UInt64? = nil
    var _decorator: Bool? = nil
    var _modifiedGeometry: Bool? = nil
    var _elementSet: Bool? = nil
    var _hexBaseColor: String? = nil
    var _variations: [Ei_ShellSetSpec.VariationSpec] = []
    var _icon: Ei_DLCItem? = nil
    var _defaultAppearance: Bool? = nil
    var _customAppearance: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identifier = source._identifier
      _name = source._name
      _price = source._price
      _priceMultDeprecated = source._priceMultDeprecated
      _discount = source._discount
      _requiredEop = source._requiredEop
      _requiredSoulEggs = source._requiredSoulEggs
      _requiredParentSet = source._requiredParentSet
      _isNew = source._isNew
      _expires = source._expires
      _secondsUntilAvailable = source._secondsUntilAvailable
      _secondsRemaining = source._secondsRemaining
      _popularity = source._popularity
      _decorator = source._decorator
      _modifiedGeometry = source._modifiedGeometry
      _elementSet = source._elementSet
      _hexBaseColor = source._hexBaseColor
      _variations = source._variations
      _icon = source._icon
      _defaultAppearance = source._defaultAppearance
      _customAppearance = source._customAppearance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._identifier) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularUInt32Field(value: &_storage._price) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._requiredEop) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._requiredSoulEggs) }()
        case 6: try { try decoder.decodeSingularBoolField(value: &_storage._defaultAppearance) }()
        case 7: try { try decoder.decodeSingularBoolField(value: &_storage._elementSet) }()
        case 8: try { try decoder.decodeSingularDoubleField(value: &_storage._priceMultDeprecated) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._isNew) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._expires) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsRemaining) }()
        case 12: try { try decoder.decodeSingularBoolField(value: &_storage._customAppearance) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._modifiedGeometry) }()
        case 14: try { try decoder.decodeSingularBoolField(value: &_storage._decorator) }()
        case 15: try { try decoder.decodeRepeatedMessageField(value: &_storage._variations) }()
        case 16: try { try decoder.decodeSingularStringField(value: &_storage._hexBaseColor) }()
        case 17: try { try decoder.decodeSingularDoubleField(value: &_storage._discount) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsUntilAvailable) }()
        case 19: try { try decoder.decodeSingularMessageField(value: &_storage._icon) }()
        case 20: try { try decoder.decodeSingularStringField(value: &_storage._requiredParentSet) }()
        case 21: try { try decoder.decodeSingularUInt64Field(value: &_storage._popularity) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._identifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._price {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._requiredEop {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._requiredSoulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._defaultAppearance {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._elementSet {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._priceMultDeprecated {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._isNew {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._expires {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._secondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._customAppearance {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._modifiedGeometry {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._decorator {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 14)
      } }()
      if !_storage._variations.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._variations, fieldNumber: 15)
      }
      try { if let v = _storage._hexBaseColor {
        try visitor.visitSingularStringField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._discount {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._secondsUntilAvailable {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._icon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._requiredParentSet {
        try visitor.visitSingularStringField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._popularity {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 21)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellSetSpec, rhs: Ei_ShellSetSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._priceMultDeprecated != rhs_storage._priceMultDeprecated {return false}
        if _storage._discount != rhs_storage._discount {return false}
        if _storage._requiredEop != rhs_storage._requiredEop {return false}
        if _storage._requiredSoulEggs != rhs_storage._requiredSoulEggs {return false}
        if _storage._requiredParentSet != rhs_storage._requiredParentSet {return false}
        if _storage._isNew != rhs_storage._isNew {return false}
        if _storage._expires != rhs_storage._expires {return false}
        if _storage._secondsUntilAvailable != rhs_storage._secondsUntilAvailable {return false}
        if _storage._secondsRemaining != rhs_storage._secondsRemaining {return false}
        if _storage._popularity != rhs_storage._popularity {return false}
        if _storage._decorator != rhs_storage._decorator {return false}
        if _storage._modifiedGeometry != rhs_storage._modifiedGeometry {return false}
        if _storage._elementSet != rhs_storage._elementSet {return false}
        if _storage._hexBaseColor != rhs_storage._hexBaseColor {return false}
        if _storage._variations != rhs_storage._variations {return false}
        if _storage._icon != rhs_storage._icon {return false}
        if _storage._defaultAppearance != rhs_storage._defaultAppearance {return false}
        if _storage._customAppearance != rhs_storage._customAppearance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellSetSpec.VariationSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellSetSpec.protoMessageName + ".VariationSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{3}hex_color\0\u{1}price\0\u{3}default_appearance\0\u{3}custom_appearance\0\u{3}sort_priority\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._hexColor) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._price) }()
      case 4: try { try decoder.decodeSingularBoolField(value: &self._defaultAppearance) }()
      case 5: try { try decoder.decodeSingularBoolField(value: &self._customAppearance) }()
      case 6: try { try decoder.decodeSingularInt32Field(value: &self._sortPriority) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hexColor {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._price {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._defaultAppearance {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._customAppearance {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._sortPriority {
      try visitor.visitSingularInt32Field(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellSetSpec.VariationSpec, rhs: Ei_ShellSetSpec.VariationSpec) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._hexColor != rhs._hexColor {return false}
    if lhs._price != rhs._price {return false}
    if lhs._sortPriority != rhs._sortPriority {return false}
    if lhs._defaultAppearance != rhs._defaultAppearance {return false}
    if lhs._customAppearance != rhs._customAppearance {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellObjectSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellObjectSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{1}name\0\u{3}asset_type\0\u{1}price\0\u{3}required_eop\0\u{3}required_soul_eggs\0\u{1}metadata\0\u{1}pieces\0\u{3}default_appearance\0\u{3}is_new\0\u{1}expires\0\u{3}seconds_remaining\0\u{3}no_hats\0\u{3}object_class\0\u{3}icon_colors\0\u{3}chicken_animation\0\u{3}sort_priority\0\u{3}seconds_until_available\0\u{1}popularity\0")

  fileprivate class _StorageClass {
    var _identifier: String? = nil
    var _name: String? = nil
    var _assetType: Ei_ShellSpec.AssetType? = nil
    var _objectClass: String? = nil
    var _iconColors: [String] = []
    var _price: UInt32? = nil
    var _requiredEop: UInt32? = nil
    var _requiredSoulEggs: Double? = nil
    var _isNew: Bool? = nil
    var _expires: Bool? = nil
    var _secondsUntilAvailable: Double? = nil
    var _secondsRemaining: Double? = nil
    var _popularity: UInt64? = nil
    var _metadata: [Double] = []
    var _noHats: Bool? = nil
    var _chickenAnimation: Ei_ShellObjectSpec.ChickenAnimation? = nil
    var _sortPriority: Int32? = nil
    var _pieces: [Ei_ShellObjectSpec.LODPiece] = []
    var _defaultAppearance: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _identifier = source._identifier
      _name = source._name
      _assetType = source._assetType
      _objectClass = source._objectClass
      _iconColors = source._iconColors
      _price = source._price
      _requiredEop = source._requiredEop
      _requiredSoulEggs = source._requiredSoulEggs
      _isNew = source._isNew
      _expires = source._expires
      _secondsUntilAvailable = source._secondsUntilAvailable
      _secondsRemaining = source._secondsRemaining
      _popularity = source._popularity
      _metadata = source._metadata
      _noHats = source._noHats
      _chickenAnimation = source._chickenAnimation
      _sortPriority = source._sortPriority
      _pieces = source._pieces
      _defaultAppearance = source._defaultAppearance
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._identifier) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularEnumField(value: &_storage._assetType) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._price) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._requiredEop) }()
        case 6: try { try decoder.decodeSingularDoubleField(value: &_storage._requiredSoulEggs) }()
        case 7: try { try decoder.decodeRepeatedDoubleField(value: &_storage._metadata) }()
        case 8: try { try decoder.decodeRepeatedMessageField(value: &_storage._pieces) }()
        case 9: try { try decoder.decodeSingularBoolField(value: &_storage._defaultAppearance) }()
        case 10: try { try decoder.decodeSingularBoolField(value: &_storage._isNew) }()
        case 11: try { try decoder.decodeSingularBoolField(value: &_storage._expires) }()
        case 12: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsRemaining) }()
        case 13: try { try decoder.decodeSingularBoolField(value: &_storage._noHats) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._objectClass) }()
        case 15: try { try decoder.decodeRepeatedStringField(value: &_storage._iconColors) }()
        case 16: try { try decoder.decodeSingularEnumField(value: &_storage._chickenAnimation) }()
        case 17: try { try decoder.decodeSingularInt32Field(value: &_storage._sortPriority) }()
        case 18: try { try decoder.decodeSingularDoubleField(value: &_storage._secondsUntilAvailable) }()
        case 19: try { try decoder.decodeSingularUInt64Field(value: &_storage._popularity) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._identifier {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._assetType {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._price {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._requiredEop {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._requiredSoulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 6)
      } }()
      if !_storage._metadata.isEmpty {
        try visitor.visitRepeatedDoubleField(value: _storage._metadata, fieldNumber: 7)
      }
      if !_storage._pieces.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pieces, fieldNumber: 8)
      }
      try { if let v = _storage._defaultAppearance {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._isNew {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._expires {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._secondsRemaining {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._noHats {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._objectClass {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      if !_storage._iconColors.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._iconColors, fieldNumber: 15)
      }
      try { if let v = _storage._chickenAnimation {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 16)
      } }()
      try { if let v = _storage._sortPriority {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 17)
      } }()
      try { if let v = _storage._secondsUntilAvailable {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._popularity {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 19)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellObjectSpec, rhs: Ei_ShellObjectSpec) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._identifier != rhs_storage._identifier {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._assetType != rhs_storage._assetType {return false}
        if _storage._objectClass != rhs_storage._objectClass {return false}
        if _storage._iconColors != rhs_storage._iconColors {return false}
        if _storage._price != rhs_storage._price {return false}
        if _storage._requiredEop != rhs_storage._requiredEop {return false}
        if _storage._requiredSoulEggs != rhs_storage._requiredSoulEggs {return false}
        if _storage._isNew != rhs_storage._isNew {return false}
        if _storage._expires != rhs_storage._expires {return false}
        if _storage._secondsUntilAvailable != rhs_storage._secondsUntilAvailable {return false}
        if _storage._secondsRemaining != rhs_storage._secondsRemaining {return false}
        if _storage._popularity != rhs_storage._popularity {return false}
        if _storage._metadata != rhs_storage._metadata {return false}
        if _storage._noHats != rhs_storage._noHats {return false}
        if _storage._chickenAnimation != rhs_storage._chickenAnimation {return false}
        if _storage._sortPriority != rhs_storage._sortPriority {return false}
        if _storage._pieces != rhs_storage._pieces {return false}
        if _storage._defaultAppearance != rhs_storage._defaultAppearance {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellObjectSpec.ChickenAnimation: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STANDARD_RUN\0\u{1}WOBBLE\0\u{1}SMOOTH\0\u{1}HOVER\0\u{1}SIDEWAYS_SMOOTH\0\u{1}WOBBLE_LEAN\0\u{1}SMOOTH_LEAN\0\u{1}SLOWMO\0\u{1}SIDEWAYS_LEAN\0")
}

extension Ei_ShellObjectSpec.LODPiece: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellObjectSpec.protoMessageName + ".LODPiece"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}dlc\0\u{1}lod\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._dlc) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._lod) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._dlc {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._lod {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellObjectSpec.LODPiece, rhs: Ei_ShellObjectSpec.LODPiece) -> Bool {
    if lhs._dlc != rhs._dlc {return false}
    if lhs._lod != rhs._lod {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellGroupSpec: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellGroupSpec"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{1}name\0\u{3}member_ids\0\u{3}price_mult_DEPRECATED\0\u{3}asset_type\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._name) }()
      case 3: try { try decoder.decodeRepeatedStringField(value: &self.memberIds) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._priceMultDeprecated) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._assetType) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._name {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    if !self.memberIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.memberIds, fieldNumber: 3)
    }
    try { if let v = self._priceMultDeprecated {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._assetType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellGroupSpec, rhs: Ei_ShellGroupSpec) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._name != rhs._name {return false}
    if lhs._assetType != rhs._assetType {return false}
    if lhs.memberIds != rhs.memberIds {return false}
    if lhs._priceMultDeprecated != rhs._priceMultDeprecated {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_DLCCatalog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".DLCCatalog"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}items\0\u{1}shells\0\u{3}shell_sets\0\u{3}shell_objects\0\u{3}shell_groups\0\u{1}decorators\0\u{3}shells_showcase_last_featured_time\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.items) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shells) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.shellSets) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.shellObjects) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.shellGroups) }()
      case 6: try { try decoder.decodeRepeatedMessageField(value: &self.decorators) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._shellsShowcaseLastFeaturedTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.items.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.items, fieldNumber: 1)
    }
    if !self.shells.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shells, fieldNumber: 2)
    }
    if !self.shellSets.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellSets, fieldNumber: 3)
    }
    if !self.shellObjects.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellObjects, fieldNumber: 4)
    }
    if !self.shellGroups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellGroups, fieldNumber: 5)
    }
    if !self.decorators.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.decorators, fieldNumber: 6)
    }
    try { if let v = self._shellsShowcaseLastFeaturedTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_DLCCatalog, rhs: Ei_DLCCatalog) -> Bool {
    if lhs.items != rhs.items {return false}
    if lhs.shells != rhs.shells {return false}
    if lhs.shellSets != rhs.shellSets {return false}
    if lhs.decorators != rhs.decorators {return false}
    if lhs.shellObjects != rhs.shellObjects {return false}
    if lhs.shellGroups != rhs.shellGroups {return false}
    if lhs._shellsShowcaseLastFeaturedTime != rhs._shellsShowcaseLastFeaturedTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellDB"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}shell_inventory\0\u{3}shell_set_inventory\0\u{3}farm_configs\0\u{3}shell_object_inventory\0\u{3}shell_element_inventory\0\u{3}new_shells_downloaded\0\u{3}new_shells_seen\0\u{3}shell_variation_inventory\0\u{3}saved_configs\0\u{3}lighting_controls_unlocked\0\u{3}last_showcase_featured_time_seen\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.shellInventory) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shellSetInventory) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.farmConfigs) }()
      case 4: try { try decoder.decodeRepeatedMessageField(value: &self.shellObjectInventory) }()
      case 5: try { try decoder.decodeRepeatedMessageField(value: &self.shellElementInventory) }()
      case 6: try { try decoder.decodeRepeatedStringField(value: &self.newShellsDownloaded) }()
      case 7: try { try decoder.decodeRepeatedStringField(value: &self.newShellsSeen) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.shellVariationInventory) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.savedConfigs) }()
      case 10: try { try decoder.decodeSingularBoolField(value: &self._lightingControlsUnlocked) }()
      case 11: try { try decoder.decodeSingularDoubleField(value: &self._lastShowcaseFeaturedTimeSeen) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.shellInventory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellInventory, fieldNumber: 1)
    }
    if !self.shellSetInventory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellSetInventory, fieldNumber: 2)
    }
    if !self.farmConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.farmConfigs, fieldNumber: 3)
    }
    if !self.shellObjectInventory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellObjectInventory, fieldNumber: 4)
    }
    if !self.shellElementInventory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellElementInventory, fieldNumber: 5)
    }
    if !self.newShellsDownloaded.isEmpty {
      try visitor.visitRepeatedStringField(value: self.newShellsDownloaded, fieldNumber: 6)
    }
    if !self.newShellsSeen.isEmpty {
      try visitor.visitRepeatedStringField(value: self.newShellsSeen, fieldNumber: 7)
    }
    if !self.shellVariationInventory.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellVariationInventory, fieldNumber: 8)
    }
    if !self.savedConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.savedConfigs, fieldNumber: 9)
    }
    try { if let v = self._lightingControlsUnlocked {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 10)
    } }()
    try { if let v = self._lastShowcaseFeaturedTimeSeen {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB, rhs: Ei_ShellDB) -> Bool {
    if lhs.shellInventory != rhs.shellInventory {return false}
    if lhs.shellElementInventory != rhs.shellElementInventory {return false}
    if lhs.shellVariationInventory != rhs.shellVariationInventory {return false}
    if lhs.shellSetInventory != rhs.shellSetInventory {return false}
    if lhs.shellObjectInventory != rhs.shellObjectInventory {return false}
    if lhs.farmConfigs != rhs.farmConfigs {return false}
    if lhs.savedConfigs != rhs.savedConfigs {return false}
    if lhs.newShellsDownloaded != rhs.newShellsDownloaded {return false}
    if lhs.newShellsSeen != rhs.newShellsSeen {return false}
    if lhs._lastShowcaseFeaturedTimeSeen != rhs._lastShowcaseFeaturedTimeSeen {return false}
    if lhs._lightingControlsUnlocked != rhs._lightingControlsUnlocked {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.FarmElement: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}HEN_HOUSE\0\u{1}SILO\0\u{1}MAILBOX\0\u{1}TROPHY_CASE\0\u{1}GROUND\0\u{1}HARDSCAPE\0\u{1}HYPERLOOP\0\u{1}DEPOT\0\u{1}LAB\0\u{1}HATCHERY\0\u{1}HOA\0\u{1}MISSION_CONTROL\0\u{1}FUEL_TANK\0\u{1}CHICKEN\0\u{1}HAT\0\u{2}T\u{1}UNKNOWN\0")
}

extension Ei_ShellDB.ShellStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".ShellStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}identifier\0\u{1}owned\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._identifier) }()
      case 2: try { try decoder.decodeSingularBoolField(value: &self._owned) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._identifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._owned {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.ShellStatus, rhs: Ei_ShellDB.ShellStatus) -> Bool {
    if lhs._identifier != rhs._identifier {return false}
    if lhs._owned != rhs._owned {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.ShellElementStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".ShellElementStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}element\0\u{3}set_identifier\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._element) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._setIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._element {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._setIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.ShellElementStatus, rhs: Ei_ShellDB.ShellElementStatus) -> Bool {
    if lhs._element != rhs._element {return false}
    if lhs._setIdentifier != rhs._setIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.ShellSetVariationStatus: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".ShellSetVariationStatus"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}set_identifier\0\u{3}owned_variations\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._setIdentifier) }()
      case 2: try { try decoder.decodeRepeatedStringField(value: &self.ownedVariations) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._setIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    if !self.ownedVariations.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ownedVariations, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.ShellSetVariationStatus, rhs: Ei_ShellDB.ShellSetVariationStatus) -> Bool {
    if lhs._setIdentifier != rhs._setIdentifier {return false}
    if lhs.ownedVariations != rhs.ownedVariations {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.FarmConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".FarmConfiguration"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}shell_configs\0\u{3}shell_set_configs\0\u{4}\u{5}configure_chickens_by_group\0\u{3}group_configs\0\u{3}chicken_configs\0\u{3}locked_elements\0\u{3}lighting_config_enabled\0\u{3}lighting_config\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.shellConfigs) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.shellSetConfigs) }()
      case 7: try { try decoder.decodeSingularBoolField(value: &self._configureChickensByGroup) }()
      case 8: try { try decoder.decodeRepeatedMessageField(value: &self.groupConfigs) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.chickenConfigs) }()
      case 10: try { try decoder.decodeRepeatedEnumField(value: &self.lockedElements) }()
      case 11: try { try decoder.decodeSingularBoolField(value: &self._lightingConfigEnabled) }()
      case 12: try { try decoder.decodeSingularMessageField(value: &self._lightingConfig) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.shellConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellConfigs, fieldNumber: 1)
    }
    if !self.shellSetConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.shellSetConfigs, fieldNumber: 2)
    }
    try { if let v = self._configureChickensByGroup {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 7)
    } }()
    if !self.groupConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.groupConfigs, fieldNumber: 8)
    }
    if !self.chickenConfigs.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.chickenConfigs, fieldNumber: 9)
    }
    if !self.lockedElements.isEmpty {
      try visitor.visitRepeatedEnumField(value: self.lockedElements, fieldNumber: 10)
    }
    try { if let v = self._lightingConfigEnabled {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 11)
    } }()
    try { if let v = self._lightingConfig {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.FarmConfiguration, rhs: Ei_ShellDB.FarmConfiguration) -> Bool {
    if lhs.lockedElements != rhs.lockedElements {return false}
    if lhs.shellConfigs != rhs.shellConfigs {return false}
    if lhs.shellSetConfigs != rhs.shellSetConfigs {return false}
    if lhs._configureChickensByGroup != rhs._configureChickensByGroup {return false}
    if lhs.groupConfigs != rhs.groupConfigs {return false}
    if lhs.chickenConfigs != rhs.chickenConfigs {return false}
    if lhs._lightingConfigEnabled != rhs._lightingConfigEnabled {return false}
    if lhs._lightingConfig != rhs._lightingConfig {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.SavedFarmConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".SavedFarmConfiguration"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}config\0\u{3}client_save_time\0\u{3}server_id\0\u{3}display_name\0\u{1}purchased\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularMessageField(value: &self._config) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._clientSaveTime) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._serverID) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._displayName) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._purchased) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._config {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._clientSaveTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._serverID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._displayName {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._purchased {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.SavedFarmConfiguration, rhs: Ei_ShellDB.SavedFarmConfiguration) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._config != rhs._config {return false}
    if lhs._clientSaveTime != rhs._clientSaveTime {return false}
    if lhs._serverID != rhs._serverID {return false}
    if lhs._displayName != rhs._displayName {return false}
    if lhs._purchased != rhs._purchased {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.ShellConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".ShellConfiguration"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}asset_type\0\u{1}index\0\u{3}shell_identifier\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._assetType) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._index) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._shellIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._assetType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._shellIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.ShellConfiguration, rhs: Ei_ShellDB.ShellConfiguration) -> Bool {
    if lhs._assetType != rhs._assetType {return false}
    if lhs._index != rhs._index {return false}
    if lhs._shellIdentifier != rhs._shellIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.ShellSetConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".ShellSetConfiguration"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}element\0\u{1}index\0\u{3}shell_set_identifier\0\u{3}variation_identifier\0\u{3}decorator_identifier\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._element) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._index) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._shellSetIdentifier) }()
      case 4: try { try decoder.decodeSingularStringField(value: &self._variationIdentifier) }()
      case 5: try { try decoder.decodeSingularStringField(value: &self._decoratorIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._element {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._index {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._shellSetIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._variationIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._decoratorIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 5)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.ShellSetConfiguration, rhs: Ei_ShellDB.ShellSetConfiguration) -> Bool {
    if lhs._element != rhs._element {return false}
    if lhs._index != rhs._index {return false}
    if lhs._shellSetIdentifier != rhs._shellSetIdentifier {return false}
    if lhs._variationIdentifier != rhs._variationIdentifier {return false}
    if lhs._decoratorIdentifier != rhs._decoratorIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.ShellGroupConfiguration: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".ShellGroupConfiguration"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}asset_type\0\u{3}group_identifier\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._assetType) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._groupIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._assetType {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._groupIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.ShellGroupConfiguration, rhs: Ei_ShellDB.ShellGroupConfiguration) -> Bool {
    if lhs._assetType != rhs._assetType {return false}
    if lhs._groupIdentifier != rhs._groupIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.ChickenConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".ChickenConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}chicken_identifier\0\u{3}hat_identifier\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._chickenIdentifier) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._hatIdentifier) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._chickenIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._hatIdentifier {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.ChickenConfig, rhs: Ei_ShellDB.ChickenConfig) -> Bool {
    if lhs._chickenIdentifier != rhs._chickenIdentifier {return false}
    if lhs._hatIdentifier != rhs._hatIdentifier {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellDB.LightingConfig: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellDB.protoMessageName + ".LightingConfig"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}light_dir\0\u{3}light_direct_color\0\u{3}light_direct_intensity\0\u{3}light_ambient_color\0\u{3}light_ambient_intensity\0\u{3}fog_color\0\u{3}fog_near\0\u{3}fog_far\0\u{3}fog_density\0")

  fileprivate class _StorageClass {
    var _lightDir: Ei_Vector3? = nil
    var _lightDirectColor: Ei_Vector4? = nil
    var _lightDirectIntensity: Float? = nil
    var _lightAmbientColor: Ei_Vector4? = nil
    var _lightAmbientIntensity: Float? = nil
    var _fogColor: Ei_Vector4? = nil
    var _fogNear: Float? = nil
    var _fogFar: Float? = nil
    var _fogDensity: Float? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _lightDir = source._lightDir
      _lightDirectColor = source._lightDirectColor
      _lightDirectIntensity = source._lightDirectIntensity
      _lightAmbientColor = source._lightAmbientColor
      _lightAmbientIntensity = source._lightAmbientIntensity
      _fogColor = source._fogColor
      _fogNear = source._fogNear
      _fogFar = source._fogFar
      _fogDensity = source._fogDensity
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularMessageField(value: &_storage._lightDir) }()
        case 2: try { try decoder.decodeSingularMessageField(value: &_storage._lightDirectColor) }()
        case 3: try { try decoder.decodeSingularFloatField(value: &_storage._lightDirectIntensity) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._lightAmbientColor) }()
        case 5: try { try decoder.decodeSingularFloatField(value: &_storage._lightAmbientIntensity) }()
        case 6: try { try decoder.decodeSingularMessageField(value: &_storage._fogColor) }()
        case 7: try { try decoder.decodeSingularFloatField(value: &_storage._fogNear) }()
        case 8: try { try decoder.decodeSingularFloatField(value: &_storage._fogFar) }()
        case 9: try { try decoder.decodeSingularFloatField(value: &_storage._fogDensity) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._lightDir {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._lightDirectColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._lightDirectIntensity {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._lightAmbientColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._lightAmbientIntensity {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._fogColor {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._fogNear {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._fogFar {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._fogDensity {
        try visitor.visitSingularFloatField(value: v, fieldNumber: 9)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellDB.LightingConfig, rhs: Ei_ShellDB.LightingConfig) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._lightDir != rhs_storage._lightDir {return false}
        if _storage._lightDirectColor != rhs_storage._lightDirectColor {return false}
        if _storage._lightDirectIntensity != rhs_storage._lightDirectIntensity {return false}
        if _storage._lightAmbientColor != rhs_storage._lightAmbientColor {return false}
        if _storage._lightAmbientIntensity != rhs_storage._lightAmbientIntensity {return false}
        if _storage._fogColor != rhs_storage._fogColor {return false}
        if _storage._fogNear != rhs_storage._fogNear {return false}
        if _storage._fogFar != rhs_storage._fogFar {return false}
        if _storage._fogDensity != rhs_storage._fogDensity {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellPopularityStats: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellPopularityStats"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}data\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.data) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.data.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.data, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellPopularityStats, rhs: Ei_ShellPopularityStats) -> Bool {
    if lhs.data != rhs.data {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellPopularityStats.Entry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_ShellPopularityStats.protoMessageName + ".Entry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}element\0\u{1}spent\0\u{1}count\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._id) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._element) }()
      case 3: try { try decoder.decodeSingularUInt64Field(value: &self._spent) }()
      case 4: try { try decoder.decodeSingularUInt64Field(value: &self._count) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._id {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._element {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._spent {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 3)
    } }()
    try { if let v = self._count {
      try visitor.visitSingularUInt64Field(value: v, fieldNumber: 4)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellPopularityStats.Entry, rhs: Ei_ShellPopularityStats.Entry) -> Bool {
    if lhs._id != rhs._id {return false}
    if lhs._element != rhs._element {return false}
    if lhs._spent != rhs._spent {return false}
    if lhs._count != rhs._count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellsActionLog: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellsActionLog"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}user_id\0\u{1}action\0\u{3}sub_id\0\u{1}cost\0\u{3}approx_time\0\u{1}version\0\u{3}farm_index\0\u{1}rinfo\0\u{3}farm_element\0\u{3}soul_eggs\0\u{3}tickets_spent\0\u{3}gold_spent\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _userID: String? = nil
    var _action: String? = nil
    var _subID: String? = nil
    var _farmElement: Ei_ShellDB.FarmElement? = nil
    var _cost: UInt32? = nil
    var _approxTime: Double? = nil
    var _version: String? = nil
    var _farmIndex: Int32? = nil
    var _soulEggs: Double? = nil
    var _ticketsSpent: UInt64? = nil
    var _goldSpent: UInt64? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _userID = source._userID
      _action = source._action
      _subID = source._subID
      _farmElement = source._farmElement
      _cost = source._cost
      _approxTime = source._approxTime
      _version = source._version
      _farmIndex = source._farmIndex
      _soulEggs = source._soulEggs
      _ticketsSpent = source._ticketsSpent
      _goldSpent = source._goldSpent
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._action) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._subID) }()
        case 4: try { try decoder.decodeSingularUInt32Field(value: &_storage._cost) }()
        case 5: try { try decoder.decodeSingularDoubleField(value: &_storage._approxTime) }()
        case 6: try { try decoder.decodeSingularStringField(value: &_storage._version) }()
        case 7: try { try decoder.decodeSingularInt32Field(value: &_storage._farmIndex) }()
        case 8: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 9: try { try decoder.decodeSingularEnumField(value: &_storage._farmElement) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._soulEggs) }()
        case 11: try { try decoder.decodeSingularUInt64Field(value: &_storage._ticketsSpent) }()
        case 12: try { try decoder.decodeSingularUInt64Field(value: &_storage._goldSpent) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._action {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._subID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._cost {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._approxTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._version {
        try visitor.visitSingularStringField(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._farmIndex {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._farmElement {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._soulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._ticketsSpent {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._goldSpent {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 12)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellsActionLog, rhs: Ei_ShellsActionLog) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._action != rhs_storage._action {return false}
        if _storage._subID != rhs_storage._subID {return false}
        if _storage._farmElement != rhs_storage._farmElement {return false}
        if _storage._cost != rhs_storage._cost {return false}
        if _storage._approxTime != rhs_storage._approxTime {return false}
        if _storage._version != rhs_storage._version {return false}
        if _storage._farmIndex != rhs_storage._farmIndex {return false}
        if _storage._soulEggs != rhs_storage._soulEggs {return false}
        if _storage._ticketsSpent != rhs_storage._ticketsSpent {return false}
        if _storage._goldSpent != rhs_storage._goldSpent {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SubmitShellShowcaseRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubmitShellShowcaseRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}local_id\0\u{3}user_id\0\u{3}farm_config\0\u{1}rinfo\0\u{3}public_username\0")

  fileprivate class _StorageClass {
    var _rinfo: Ei_BasicRequestInfo? = nil
    var _localID: String? = nil
    var _userID: String? = nil
    var _publicUsername: Bool? = nil
    var _farmConfig: Ei_ShellDB.FarmConfiguration? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _rinfo = source._rinfo
      _localID = source._localID
      _userID = source._userID
      _publicUsername = source._publicUsername
      _farmConfig = source._farmConfig
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._localID) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._userID) }()
        case 3: try { try decoder.decodeSingularMessageField(value: &_storage._farmConfig) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._rinfo) }()
        case 5: try { try decoder.decodeSingularBoolField(value: &_storage._publicUsername) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._localID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._userID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._farmConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._rinfo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._publicUsername {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 5)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SubmitShellShowcaseRequest, rhs: Ei_SubmitShellShowcaseRequest) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._rinfo != rhs_storage._rinfo {return false}
        if _storage._localID != rhs_storage._localID {return false}
        if _storage._userID != rhs_storage._userID {return false}
        if _storage._publicUsername != rhs_storage._publicUsername {return false}
        if _storage._farmConfig != rhs_storage._farmConfig {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellShowcase: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellShowcase"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}top\0\u{1}featured\0\u{1}fresh\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.top) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.featured) }()
      case 3: try { try decoder.decodeRepeatedMessageField(value: &self.fresh) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.top.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.top, fieldNumber: 1)
    }
    if !self.featured.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.featured, fieldNumber: 2)
    }
    if !self.fresh.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.fresh, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellShowcase, rhs: Ei_ShellShowcase) -> Bool {
    if lhs.top != rhs.top {return false}
    if lhs.featured != rhs.featured {return false}
    if lhs.fresh != rhs.fresh {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellShowcaseListingInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellShowcaseListingInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}id\0\u{1}name\0\u{1}description\0\u{3}farm_config\0\u{1}sales\0\u{1}gross\0\u{1}views\0\u{1}likes\0\u{1}dislikes\0\u{3}share_url\0\u{1}status\0\u{3}local_id\0\u{1}equips\0\u{3}creator_name\0\u{3}is_new\0")

  fileprivate class _StorageClass {
    var _id: String? = nil
    var _localID: String? = nil
    var _name: String? = nil
    var _description_p: String? = nil
    var _isNew: Bool? = nil
    var _creatorName: String? = nil
    var _status: Ei_ShellShowcaseListingInfo.Status? = nil
    var _farmConfig: Ei_ShellDB.FarmConfiguration? = nil
    var _sales: UInt32? = nil
    var _gross: UInt64? = nil
    var _views: UInt64? = nil
    var _equips: UInt64? = nil
    var _likes: UInt32? = nil
    var _dislikes: UInt32? = nil
    var _shareURL: String? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _localID = source._localID
      _name = source._name
      _description_p = source._description_p
      _isNew = source._isNew
      _creatorName = source._creatorName
      _status = source._status
      _farmConfig = source._farmConfig
      _sales = source._sales
      _gross = source._gross
      _views = source._views
      _equips = source._equips
      _likes = source._likes
      _dislikes = source._dislikes
      _shareURL = source._shareURL
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularStringField(value: &_storage._id) }()
        case 2: try { try decoder.decodeSingularStringField(value: &_storage._name) }()
        case 3: try { try decoder.decodeSingularStringField(value: &_storage._description_p) }()
        case 4: try { try decoder.decodeSingularMessageField(value: &_storage._farmConfig) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._sales) }()
        case 6: try { try decoder.decodeSingularUInt64Field(value: &_storage._gross) }()
        case 7: try { try decoder.decodeSingularUInt64Field(value: &_storage._views) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._likes) }()
        case 9: try { try decoder.decodeSingularUInt32Field(value: &_storage._dislikes) }()
        case 10: try { try decoder.decodeSingularStringField(value: &_storage._shareURL) }()
        case 11: try { try decoder.decodeSingularEnumField(value: &_storage._status) }()
        case 12: try { try decoder.decodeSingularStringField(value: &_storage._localID) }()
        case 13: try { try decoder.decodeSingularUInt64Field(value: &_storage._equips) }()
        case 14: try { try decoder.decodeSingularStringField(value: &_storage._creatorName) }()
        case 15: try { try decoder.decodeSingularBoolField(value: &_storage._isNew) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._id {
        try visitor.visitSingularStringField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._name {
        try visitor.visitSingularStringField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._description_p {
        try visitor.visitSingularStringField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._farmConfig {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._sales {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._gross {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._views {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._likes {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._dislikes {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._shareURL {
        try visitor.visitSingularStringField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._status {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._localID {
        try visitor.visitSingularStringField(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._equips {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._creatorName {
        try visitor.visitSingularStringField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._isNew {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 15)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellShowcaseListingInfo, rhs: Ei_ShellShowcaseListingInfo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._localID != rhs_storage._localID {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._isNew != rhs_storage._isNew {return false}
        if _storage._creatorName != rhs_storage._creatorName {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._farmConfig != rhs_storage._farmConfig {return false}
        if _storage._sales != rhs_storage._sales {return false}
        if _storage._gross != rhs_storage._gross {return false}
        if _storage._views != rhs_storage._views {return false}
        if _storage._equips != rhs_storage._equips {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._dislikes != rhs_storage._dislikes {return false}
        if _storage._shareURL != rhs_storage._shareURL {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellShowcaseListingInfo.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0NONE\0\u{1}SUBMITTED\0\u{1}LIVE\0\u{1}FEATURED\0\u{1}INVALID\0\u{1}FEATURED_ALUM\0\u{1}ARCHIVED\0")
}

extension Ei_ShowcaseRoyaltyDeliveryConfirmation: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShowcaseRoyaltyDeliveryConfirmation"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}ids\0\u{1}amount\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedStringField(value: &self.ids) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._amount) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    if !self.ids.isEmpty {
      try visitor.visitRepeatedStringField(value: self.ids, fieldNumber: 1)
    }
    try { if let v = self._amount {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShowcaseRoyaltyDeliveryConfirmation, rhs: Ei_ShowcaseRoyaltyDeliveryConfirmation) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs.ids != rhs.ids {return false}
    if lhs._amount != rhs._amount {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellShowcaseListingSet: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellShowcaseListingSet"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}listings\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeRepeatedMessageField(value: &self.listings) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.listings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listings, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellShowcaseListingSet, rhs: Ei_ShellShowcaseListingSet) -> Bool {
    if lhs.listings != rhs.listings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_ShellsActionBatch: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".ShellsActionBatch"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{1}actions\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeRepeatedMessageField(value: &self.actions) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    if !self.actions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.actions, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_ShellsActionBatch, rhs: Ei_ShellsActionBatch) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs.actions != rhs.actions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_UserVerificationAnalysis: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserVerificationAnalysis"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}overall_status\0\u{3}start_time\0\u{3}completion_time\0\u{3}verified_pro_permit\0\u{3}verified_piggy_breaks\0\u{3}verified_other_iap\0\u{3}unverified_iap\0\u{3}missions_completed\0\u{3}artifacts_collected\0\u{3}artifacts_consumed\0\u{3}artifacts_in_inventory\0\u{3}num_coop_memberships\0\u{3}gold_earned\0\u{3}num_prestiges\0\u{3}soul_eggs\0\u{3}valid_contracts\0\u{3}invalid_contracts\0\u{3}iap_status\0\u{3}artifacts_status\0\u{3}contracts_status\0\u{3}gold_spent_crafting\0\u{3}regular_iap_buyer\0\u{3}regular_iap_cheater\0\u{3}excessive_consumes\0\u{3}excessive_inventory\0\u{3}excessive_spend\0\u{3}eggs_of_prophecy\0\u{3}excessive_eop\0\u{3}excessive_invalid_contracts\0\u{1}verified\0\u{3}verification_override\0\u{3}verification_override_value\0\u{3}rare_artifacts_in_inventory\0\u{3}rare_artifacts_on_server\0\u{3}legendary_artifacts_in_inventory\0\u{3}legendary_artifacts_on_server\0\u{3}verification_count\0")

  fileprivate class _StorageClass {
    var _overallStatus: Ei_UserVerificationAnalysis.Status? = nil
    var _startTime: Double? = nil
    var _completionTime: Double? = nil
    var _verificationCount: Int32? = nil
    var _numPrestiges: Double? = nil
    var _soulEggs: Double? = nil
    var _eggsOfProphecy: UInt32? = nil
    var _iapStatus: Ei_UserVerificationAnalysis.Status? = nil
    var _verifiedProPermit: Bool? = nil
    var _verifiedPiggyBreaks: UInt32? = nil
    var _verifiedOtherIap: UInt32? = nil
    var _unverifiedIap: UInt32? = nil
    var _goldEarned: Double? = nil
    var _regularIapBuyer: Bool? = nil
    var _regularIapCheater: Bool? = nil
    var _artifactsStatus: Ei_UserVerificationAnalysis.Status? = nil
    var _missionsCompleted: UInt32? = nil
    var _artifactsCollected: Double? = nil
    var _artifactsConsumed: Double? = nil
    var _artifactsInInventory: Double? = nil
    var _rareArtifactsInInventory: UInt64? = nil
    var _rareArtifactsOnServer: UInt64? = nil
    var _legendaryArtifactsInInventory: UInt64? = nil
    var _legendaryArtifactsOnServer: UInt64? = nil
    var _goldSpentCrafting: Double? = nil
    var _excessiveConsumes: Bool? = nil
    var _excessiveInventory: Bool? = nil
    var _excessiveSpend: Bool? = nil
    var _contractsStatus: Ei_UserVerificationAnalysis.Status? = nil
    var _numCoopMemberships: UInt32? = nil
    var _validContracts: UInt32? = nil
    var _invalidContracts: [String] = []
    var _excessiveEop: Bool? = nil
    var _excessiveInvalidContracts: Bool? = nil
    var _verified: Bool? = nil
    var _verificationOverride: Bool? = nil
    var _verificationOverrideValue: Bool? = nil

      // This property is used as the initial default value for new instances of the type.
      // The type itself is protecting the reference to its storage via CoW semantics.
      // This will force a copy to be made of this reference when the first mutation occurs;
      // hence, it is safe to mark this as `nonisolated(unsafe)`.
      static nonisolated(unsafe) let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _overallStatus = source._overallStatus
      _startTime = source._startTime
      _completionTime = source._completionTime
      _verificationCount = source._verificationCount
      _numPrestiges = source._numPrestiges
      _soulEggs = source._soulEggs
      _eggsOfProphecy = source._eggsOfProphecy
      _iapStatus = source._iapStatus
      _verifiedProPermit = source._verifiedProPermit
      _verifiedPiggyBreaks = source._verifiedPiggyBreaks
      _verifiedOtherIap = source._verifiedOtherIap
      _unverifiedIap = source._unverifiedIap
      _goldEarned = source._goldEarned
      _regularIapBuyer = source._regularIapBuyer
      _regularIapCheater = source._regularIapCheater
      _artifactsStatus = source._artifactsStatus
      _missionsCompleted = source._missionsCompleted
      _artifactsCollected = source._artifactsCollected
      _artifactsConsumed = source._artifactsConsumed
      _artifactsInInventory = source._artifactsInInventory
      _rareArtifactsInInventory = source._rareArtifactsInInventory
      _rareArtifactsOnServer = source._rareArtifactsOnServer
      _legendaryArtifactsInInventory = source._legendaryArtifactsInInventory
      _legendaryArtifactsOnServer = source._legendaryArtifactsOnServer
      _goldSpentCrafting = source._goldSpentCrafting
      _excessiveConsumes = source._excessiveConsumes
      _excessiveInventory = source._excessiveInventory
      _excessiveSpend = source._excessiveSpend
      _contractsStatus = source._contractsStatus
      _numCoopMemberships = source._numCoopMemberships
      _validContracts = source._validContracts
      _invalidContracts = source._invalidContracts
      _excessiveEop = source._excessiveEop
      _excessiveInvalidContracts = source._excessiveInvalidContracts
      _verified = source._verified
      _verificationOverride = source._verificationOverride
      _verificationOverrideValue = source._verificationOverrideValue
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        // The use of inline closures is to circumvent an issue where the compiler
        // allocates stack space for every case branch when no optimizations are
        // enabled. https://github.com/apple/swift-protobuf/issues/1034
        switch fieldNumber {
        case 1: try { try decoder.decodeSingularEnumField(value: &_storage._overallStatus) }()
        case 2: try { try decoder.decodeSingularDoubleField(value: &_storage._startTime) }()
        case 3: try { try decoder.decodeSingularDoubleField(value: &_storage._completionTime) }()
        case 4: try { try decoder.decodeSingularBoolField(value: &_storage._verifiedProPermit) }()
        case 5: try { try decoder.decodeSingularUInt32Field(value: &_storage._verifiedPiggyBreaks) }()
        case 6: try { try decoder.decodeSingularUInt32Field(value: &_storage._verifiedOtherIap) }()
        case 7: try { try decoder.decodeSingularUInt32Field(value: &_storage._unverifiedIap) }()
        case 8: try { try decoder.decodeSingularUInt32Field(value: &_storage._missionsCompleted) }()
        case 9: try { try decoder.decodeSingularDoubleField(value: &_storage._artifactsCollected) }()
        case 10: try { try decoder.decodeSingularDoubleField(value: &_storage._artifactsConsumed) }()
        case 11: try { try decoder.decodeSingularDoubleField(value: &_storage._artifactsInInventory) }()
        case 12: try { try decoder.decodeSingularUInt32Field(value: &_storage._numCoopMemberships) }()
        case 13: try { try decoder.decodeSingularDoubleField(value: &_storage._goldEarned) }()
        case 14: try { try decoder.decodeSingularDoubleField(value: &_storage._numPrestiges) }()
        case 15: try { try decoder.decodeSingularDoubleField(value: &_storage._soulEggs) }()
        case 16: try { try decoder.decodeSingularUInt32Field(value: &_storage._validContracts) }()
        case 17: try { try decoder.decodeRepeatedStringField(value: &_storage._invalidContracts) }()
        case 18: try { try decoder.decodeSingularEnumField(value: &_storage._iapStatus) }()
        case 19: try { try decoder.decodeSingularEnumField(value: &_storage._artifactsStatus) }()
        case 20: try { try decoder.decodeSingularEnumField(value: &_storage._contractsStatus) }()
        case 21: try { try decoder.decodeSingularDoubleField(value: &_storage._goldSpentCrafting) }()
        case 22: try { try decoder.decodeSingularBoolField(value: &_storage._regularIapBuyer) }()
        case 23: try { try decoder.decodeSingularBoolField(value: &_storage._regularIapCheater) }()
        case 24: try { try decoder.decodeSingularBoolField(value: &_storage._excessiveConsumes) }()
        case 25: try { try decoder.decodeSingularBoolField(value: &_storage._excessiveInventory) }()
        case 26: try { try decoder.decodeSingularBoolField(value: &_storage._excessiveSpend) }()
        case 27: try { try decoder.decodeSingularUInt32Field(value: &_storage._eggsOfProphecy) }()
        case 28: try { try decoder.decodeSingularBoolField(value: &_storage._excessiveEop) }()
        case 29: try { try decoder.decodeSingularBoolField(value: &_storage._excessiveInvalidContracts) }()
        case 30: try { try decoder.decodeSingularBoolField(value: &_storage._verified) }()
        case 31: try { try decoder.decodeSingularBoolField(value: &_storage._verificationOverride) }()
        case 32: try { try decoder.decodeSingularBoolField(value: &_storage._verificationOverrideValue) }()
        case 33: try { try decoder.decodeSingularUInt64Field(value: &_storage._rareArtifactsInInventory) }()
        case 34: try { try decoder.decodeSingularUInt64Field(value: &_storage._rareArtifactsOnServer) }()
        case 35: try { try decoder.decodeSingularUInt64Field(value: &_storage._legendaryArtifactsInInventory) }()
        case 36: try { try decoder.decodeSingularUInt64Field(value: &_storage._legendaryArtifactsOnServer) }()
        case 37: try { try decoder.decodeSingularInt32Field(value: &_storage._verificationCount) }()
        default: break
        }
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every if/case branch local when no optimizations
      // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
      // https://github.com/apple/swift-protobuf/issues/1182
      try { if let v = _storage._overallStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
      } }()
      try { if let v = _storage._startTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
      } }()
      try { if let v = _storage._completionTime {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
      } }()
      try { if let v = _storage._verifiedProPermit {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 4)
      } }()
      try { if let v = _storage._verifiedPiggyBreaks {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 5)
      } }()
      try { if let v = _storage._verifiedOtherIap {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 6)
      } }()
      try { if let v = _storage._unverifiedIap {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 7)
      } }()
      try { if let v = _storage._missionsCompleted {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 8)
      } }()
      try { if let v = _storage._artifactsCollected {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 9)
      } }()
      try { if let v = _storage._artifactsConsumed {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 10)
      } }()
      try { if let v = _storage._artifactsInInventory {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 11)
      } }()
      try { if let v = _storage._numCoopMemberships {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 12)
      } }()
      try { if let v = _storage._goldEarned {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 13)
      } }()
      try { if let v = _storage._numPrestiges {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 14)
      } }()
      try { if let v = _storage._soulEggs {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 15)
      } }()
      try { if let v = _storage._validContracts {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 16)
      } }()
      if !_storage._invalidContracts.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._invalidContracts, fieldNumber: 17)
      }
      try { if let v = _storage._iapStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 18)
      } }()
      try { if let v = _storage._artifactsStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 19)
      } }()
      try { if let v = _storage._contractsStatus {
        try visitor.visitSingularEnumField(value: v, fieldNumber: 20)
      } }()
      try { if let v = _storage._goldSpentCrafting {
        try visitor.visitSingularDoubleField(value: v, fieldNumber: 21)
      } }()
      try { if let v = _storage._regularIapBuyer {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 22)
      } }()
      try { if let v = _storage._regularIapCheater {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 23)
      } }()
      try { if let v = _storage._excessiveConsumes {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 24)
      } }()
      try { if let v = _storage._excessiveInventory {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 25)
      } }()
      try { if let v = _storage._excessiveSpend {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 26)
      } }()
      try { if let v = _storage._eggsOfProphecy {
        try visitor.visitSingularUInt32Field(value: v, fieldNumber: 27)
      } }()
      try { if let v = _storage._excessiveEop {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 28)
      } }()
      try { if let v = _storage._excessiveInvalidContracts {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 29)
      } }()
      try { if let v = _storage._verified {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 30)
      } }()
      try { if let v = _storage._verificationOverride {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 31)
      } }()
      try { if let v = _storage._verificationOverrideValue {
        try visitor.visitSingularBoolField(value: v, fieldNumber: 32)
      } }()
      try { if let v = _storage._rareArtifactsInInventory {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 33)
      } }()
      try { if let v = _storage._rareArtifactsOnServer {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 34)
      } }()
      try { if let v = _storage._legendaryArtifactsInInventory {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 35)
      } }()
      try { if let v = _storage._legendaryArtifactsOnServer {
        try visitor.visitSingularUInt64Field(value: v, fieldNumber: 36)
      } }()
      try { if let v = _storage._verificationCount {
        try visitor.visitSingularInt32Field(value: v, fieldNumber: 37)
      } }()
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_UserVerificationAnalysis, rhs: Ei_UserVerificationAnalysis) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._overallStatus != rhs_storage._overallStatus {return false}
        if _storage._startTime != rhs_storage._startTime {return false}
        if _storage._completionTime != rhs_storage._completionTime {return false}
        if _storage._verificationCount != rhs_storage._verificationCount {return false}
        if _storage._numPrestiges != rhs_storage._numPrestiges {return false}
        if _storage._soulEggs != rhs_storage._soulEggs {return false}
        if _storage._eggsOfProphecy != rhs_storage._eggsOfProphecy {return false}
        if _storage._iapStatus != rhs_storage._iapStatus {return false}
        if _storage._verifiedProPermit != rhs_storage._verifiedProPermit {return false}
        if _storage._verifiedPiggyBreaks != rhs_storage._verifiedPiggyBreaks {return false}
        if _storage._verifiedOtherIap != rhs_storage._verifiedOtherIap {return false}
        if _storage._unverifiedIap != rhs_storage._unverifiedIap {return false}
        if _storage._goldEarned != rhs_storage._goldEarned {return false}
        if _storage._regularIapBuyer != rhs_storage._regularIapBuyer {return false}
        if _storage._regularIapCheater != rhs_storage._regularIapCheater {return false}
        if _storage._artifactsStatus != rhs_storage._artifactsStatus {return false}
        if _storage._missionsCompleted != rhs_storage._missionsCompleted {return false}
        if _storage._artifactsCollected != rhs_storage._artifactsCollected {return false}
        if _storage._artifactsConsumed != rhs_storage._artifactsConsumed {return false}
        if _storage._artifactsInInventory != rhs_storage._artifactsInInventory {return false}
        if _storage._rareArtifactsInInventory != rhs_storage._rareArtifactsInInventory {return false}
        if _storage._rareArtifactsOnServer != rhs_storage._rareArtifactsOnServer {return false}
        if _storage._legendaryArtifactsInInventory != rhs_storage._legendaryArtifactsInInventory {return false}
        if _storage._legendaryArtifactsOnServer != rhs_storage._legendaryArtifactsOnServer {return false}
        if _storage._goldSpentCrafting != rhs_storage._goldSpentCrafting {return false}
        if _storage._excessiveConsumes != rhs_storage._excessiveConsumes {return false}
        if _storage._excessiveInventory != rhs_storage._excessiveInventory {return false}
        if _storage._excessiveSpend != rhs_storage._excessiveSpend {return false}
        if _storage._contractsStatus != rhs_storage._contractsStatus {return false}
        if _storage._numCoopMemberships != rhs_storage._numCoopMemberships {return false}
        if _storage._validContracts != rhs_storage._validContracts {return false}
        if _storage._invalidContracts != rhs_storage._invalidContracts {return false}
        if _storage._excessiveEop != rhs_storage._excessiveEop {return false}
        if _storage._excessiveInvalidContracts != rhs_storage._excessiveInvalidContracts {return false}
        if _storage._verified != rhs_storage._verified {return false}
        if _storage._verificationOverride != rhs_storage._verificationOverride {return false}
        if _storage._verificationOverrideValue != rhs_storage._verificationOverrideValue {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_UserVerificationAnalysis.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN\0\u{1}PROCESSING\0\u{1}COMPLETE\0")
}

extension Ei_UserSubscriptionInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".UserSubscriptionInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}original_transaction_id\0\u{3}first_subscribed\0\u{4}\u{2}period_end\0\u{1}status\0\u{3}auto_renew\0\u{3}last_updated\0\u{2}\u{2}history\0\u{1}platform\0\u{3}past_user_ids\0\u{4}\u{2}subscription_level\0\u{3}store_status\0\u{3}next_subscription_level\0\u{3}linked_transaction_id\0\u{1}acknowledged\0\u{3}lock_next_subscription_level\0\u{1}sandbox\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._originalTransactionID) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._firstSubscribed) }()
      case 4: try { try decoder.decodeSingularDoubleField(value: &self._periodEnd) }()
      case 5: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 6: try { try decoder.decodeSingularBoolField(value: &self._autoRenew) }()
      case 7: try { try decoder.decodeSingularDoubleField(value: &self._lastUpdated) }()
      case 9: try { try decoder.decodeRepeatedMessageField(value: &self.history) }()
      case 10: try { try decoder.decodeSingularEnumField(value: &self._platform) }()
      case 11: try { try decoder.decodeRepeatedStringField(value: &self.pastUserIds) }()
      case 13: try { try decoder.decodeSingularEnumField(value: &self._subscriptionLevel) }()
      case 14: try { try decoder.decodeSingularStringField(value: &self._storeStatus) }()
      case 15: try { try decoder.decodeSingularEnumField(value: &self._nextSubscriptionLevel) }()
      case 16: try { try decoder.decodeSingularStringField(value: &self._linkedTransactionID) }()
      case 17: try { try decoder.decodeSingularBoolField(value: &self._acknowledged) }()
      case 18: try { try decoder.decodeSingularBoolField(value: &self._lockNextSubscriptionLevel) }()
      case 19: try { try decoder.decodeSingularBoolField(value: &self._sandbox) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._originalTransactionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._firstSubscribed {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._periodEnd {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 4)
    } }()
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 5)
    } }()
    try { if let v = self._autoRenew {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 6)
    } }()
    try { if let v = self._lastUpdated {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 7)
    } }()
    if !self.history.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.history, fieldNumber: 9)
    }
    try { if let v = self._platform {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 10)
    } }()
    if !self.pastUserIds.isEmpty {
      try visitor.visitRepeatedStringField(value: self.pastUserIds, fieldNumber: 11)
    }
    try { if let v = self._subscriptionLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 13)
    } }()
    try { if let v = self._storeStatus {
      try visitor.visitSingularStringField(value: v, fieldNumber: 14)
    } }()
    try { if let v = self._nextSubscriptionLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 15)
    } }()
    try { if let v = self._linkedTransactionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 16)
    } }()
    try { if let v = self._acknowledged {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 17)
    } }()
    try { if let v = self._lockNextSubscriptionLevel {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 18)
    } }()
    try { if let v = self._sandbox {
      try visitor.visitSingularBoolField(value: v, fieldNumber: 19)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_UserSubscriptionInfo, rhs: Ei_UserSubscriptionInfo) -> Bool {
    if lhs._subscriptionLevel != rhs._subscriptionLevel {return false}
    if lhs._nextSubscriptionLevel != rhs._nextSubscriptionLevel {return false}
    if lhs._lockNextSubscriptionLevel != rhs._lockNextSubscriptionLevel {return false}
    if lhs._platform != rhs._platform {return false}
    if lhs._originalTransactionID != rhs._originalTransactionID {return false}
    if lhs._linkedTransactionID != rhs._linkedTransactionID {return false}
    if lhs._acknowledged != rhs._acknowledged {return false}
    if lhs._firstSubscribed != rhs._firstSubscribed {return false}
    if lhs._periodEnd != rhs._periodEnd {return false}
    if lhs._status != rhs._status {return false}
    if lhs._storeStatus != rhs._storeStatus {return false}
    if lhs._autoRenew != rhs._autoRenew {return false}
    if lhs._sandbox != rhs._sandbox {return false}
    if lhs._lastUpdated != rhs._lastUpdated {return false}
    if lhs.history != rhs.history {return false}
    if lhs.pastUserIds != rhs.pastUserIds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_UserSubscriptionInfo.Level: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0STANDARD\0\u{1}PRO\0")
}

extension Ei_UserSubscriptionInfo.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0UNKNOWN\0\u{1}ACTIVE\0\u{1}EXPIRED\0\u{1}REVOKED\0\u{1}GRACE_PERIOD\0\u{1}PAUSE_HOLD\0")
}

extension Ei_UserSubscriptionInfo.HistoryEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = Ei_UserSubscriptionInfo.protoMessageName + ".HistoryEntry"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}timestamp\0\u{3}message_id\0\u{1}message\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._timestamp) }()
      case 2: try { try decoder.decodeSingularStringField(value: &self._messageID) }()
      case 3: try { try decoder.decodeSingularStringField(value: &self._message) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._timestamp {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._messageID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._message {
      try visitor.visitSingularStringField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_UserSubscriptionInfo.HistoryEntry, rhs: Ei_UserSubscriptionInfo.HistoryEntry) -> Bool {
    if lhs._timestamp != rhs._timestamp {return false}
    if lhs._messageID != rhs._messageID {return false}
    if lhs._message != rhs._message {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SubscriptionChangeHintRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SubscriptionChangeHintRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}original_transaction_id\0\u{3}next_subscription_level\0\u{1}rinfo\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._originalTransactionID) }()
      case 2: try { try decoder.decodeSingularEnumField(value: &self._nextSubscriptionLevel) }()
      case 3: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._originalTransactionID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._nextSubscriptionLevel {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SubscriptionChangeHintRequest, rhs: Ei_SubscriptionChangeHintRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._originalTransactionID != rhs._originalTransactionID {return false}
    if lhs._nextSubscriptionLevel != rhs._nextSubscriptionLevel {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_CXPEvalRolloutInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".CXPEvalRolloutInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}current_id\0\u{3}basis_points\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularStringField(value: &self._currentID) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._basisPoints) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._currentID {
      try visitor.visitSingularStringField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._basisPoints {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_CXPEvalRolloutInfo, rhs: Ei_CXPEvalRolloutInfo) -> Bool {
    if lhs._currentID != rhs._currentID {return false}
    if lhs._basisPoints != rhs._basisPoints {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_PathOfVirtueInfo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".PathOfVirtueInfo"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{3}server_time\0\u{3}sim_time\0\u{3}reset_index\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularDoubleField(value: &self._serverTime) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._simTime) }()
      case 3: try { try decoder.decodeSingularUInt32Field(value: &self._resetIndex) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._serverTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._simTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._resetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_PathOfVirtueInfo, rhs: Ei_PathOfVirtueInfo) -> Bool {
    if lhs._serverTime != rhs._serverTime {return false}
    if lhs._simTime != rhs._simTime {return false}
    if lhs._resetIndex != rhs._resetIndex {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SyncPathOfVirtueRequest: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyncPathOfVirtueRequest"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}rinfo\0\u{3}reset_index\0\u{3}sim_time\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularMessageField(value: &self._rinfo) }()
      case 2: try { try decoder.decodeSingularUInt32Field(value: &self._resetIndex) }()
      case 3: try { try decoder.decodeSingularDoubleField(value: &self._simTime) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._rinfo {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._resetIndex {
      try visitor.visitSingularUInt32Field(value: v, fieldNumber: 2)
    } }()
    try { if let v = self._simTime {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 3)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SyncPathOfVirtueRequest, rhs: Ei_SyncPathOfVirtueRequest) -> Bool {
    if lhs._rinfo != rhs._rinfo {return false}
    if lhs._resetIndex != rhs._resetIndex {return false}
    if lhs._simTime != rhs._simTime {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SyncPathOfVirtueResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".SyncPathOfVirtueResponse"
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{1}status\0\u{3}sim_debt\0")

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      // The use of inline closures is to circumvent an issue where the compiler
      // allocates stack space for every case branch when no optimizations are
      // enabled. https://github.com/apple/swift-protobuf/issues/1034
      switch fieldNumber {
      case 1: try { try decoder.decodeSingularEnumField(value: &self._status) }()
      case 2: try { try decoder.decodeSingularDoubleField(value: &self._simDebt) }()
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    // The use of inline closures is to circumvent an issue where the compiler
    // allocates stack space for every if/case branch local when no optimizations
    // are enabled. https://github.com/apple/swift-protobuf/issues/1034 and
    // https://github.com/apple/swift-protobuf/issues/1182
    try { if let v = self._status {
      try visitor.visitSingularEnumField(value: v, fieldNumber: 1)
    } }()
    try { if let v = self._simDebt {
      try visitor.visitSingularDoubleField(value: v, fieldNumber: 2)
    } }()
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Ei_SyncPathOfVirtueResponse, rhs: Ei_SyncPathOfVirtueResponse) -> Bool {
    if lhs._status != rhs._status {return false}
    if lhs._simDebt != rhs._simDebt {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Ei_SyncPathOfVirtueResponse.Status: SwiftProtobuf._ProtoNameProviding {
  static let _protobuf_nameMap = SwiftProtobuf._NameMap(bytecode: "\0\u{2}\0OK\0\u{1}PROBLEM\0")
}
